{"magic_number_smell": "   *\n   * @param args command line args\n   */\n  public static void main(String[] args) {\n    //Create the invoice generator with product cost as 50 and foreign product tax\n    var internationalProductInvoice = new InvoiceGenerator(50.0,\n        new ForeignTaxCalculator());\n    LOGGER.info(\"Foreign Tax applied: {}\", \"\" + internationalProductInvoice.getAmountWithTax());\n\n    //Create the invoice generator with product cost as 50 and domestic product tax\n    var domesticProductInvoice = new InvoiceGenerator(50.0, new DomesticTaxCalculator());", "refactored_code": "  public static final double PRODUCT_COST = 50.0;\n   *\n   * @param args command line args\n   */\n  public static void main(String[] args) {\n    //Create the invoice generator with product cost as 50 and foreign product tax\n    var internationalProductInvoice = new InvoiceGenerator(PRODUCT_COST,\n        new ForeignTaxCalculator());\n    LOGGER.info(\"Foreign Tax applied: {}\", \"\" + internationalProductInvoice.getAmountWithTax());\n\n    //Create the invoice generator with product cost as 50 and domestic product tax\n    var domesticProductInvoice = new InvoiceGenerator(PRODUCT_COST, new DomesticTaxCalculator());"}
{"magic_number_smell": "\n/** Tests for the {@link AdaptiveScheduler}. */\npublic class AdaptiveSchedulerTest extends TestLogger {\n\n    private static final int 4 = 4;\n    private static final JobVertex JOB_VERTEX = createNoOpVertex(\"v1\", 4);\n\n    @ClassRule\n    public static final TestExecutorResource<ScheduledExecutorService> EXECUTOR_RESOURCE =\n            TestingUtils.defaultExecutorResource();\n", "refactored_code": "    private static final int PARALLELISM = 4;\n\n/** Tests for the {@link AdaptiveScheduler}. */\npublic class AdaptiveSchedulerTest extends TestLogger {\n\n    private static final int PARALLELISM = 4;\n    private static final JobVertex JOB_VERTEX = createNoOpVertex(\"v1\", PARALLELISM);\n\n    @ClassRule\n    public static final TestExecutorResource<ScheduledExecutorService> EXECUTOR_RESOURCE =\n            TestingUtils.defaultExecutorResource();\n"}
{"magic_number_smell": "    }\n\n    private GetResult getHalfMsg(MessageQueue messageQueue, long offset) {\n        GetResult getResult = new GetResult();\n\n        PullResult result = pullHalfMsg(messageQueue, offset, 1);\n        getResult.setPullResult(result);\n        List<MessageExt> messageExts = result.getMsgFoundList();\n        if (messageExts == null) {\n            return getResult;\n        }", "refactored_code": "    private static final int PULL_MSG_RETRY_NUMBER = 1;\n    }\n\n    private GetResult getHalfMsg(MessageQueue messageQueue, long offset) {\n        GetResult getResult = new GetResult();\n\n        PullResult result = pullHalfMsg(messageQueue, offset, PULL_MSG_RETRY_NUMBER);\n        getResult.setPullResult(result);\n        List<MessageExt> messageExts = result.getMsgFoundList();\n        if (messageExts == null) {\n            return getResult;\n        }"}
{"magic_number_smell": "\t\tthis.taskStates = Preconditions.checkNotNull(taskStates, \"Task States\");\n\t}\n\n\t@Override\n\tpublic int getVersion() {\n\t\treturn 0;\n\t}\n\n\t@Override\n\tpublic long getCheckpointId() {\n\t\treturn checkpointId;", "refactored_code": "\tpublic static final int VERSION = 0;\n\t\tthis.taskStates = Preconditions.checkNotNull(taskStates, \"Task States\");\n\t}\n\n\t@Override\n\tpublic int getVersion() {\n\t\treturn VERSION;\n\t}\n\n\t@Override\n\tpublic long getCheckpointId() {\n\t\treturn checkpointId;"}
{"magic_number_smell": "            response.setCode(ResponseCode.SYSTEM_ERROR);\n            response.setRemark(\"The specified topic contains illegal characters, allowing only \" + VALID_PATTERN_STR);\n            return false;\n        }\n\n        if (topic.length() > 127) {\n            response.setCode(ResponseCode.SYSTEM_ERROR);\n            response.setRemark(\"The specified topic is longer than topic max length.\");\n            return false;\n        }\n", "refactored_code": "    private static final int TOPIC_MAX_LENGTH = 127;\n            response.setCode(ResponseCode.SYSTEM_ERROR);\n            response.setRemark(\"The specified topic contains illegal characters, allowing only \" + VALID_PATTERN_STR);\n            return false;\n        }\n\n        if (topic.length() > TOPIC_MAX_LENGTH) {\n            response.setCode(ResponseCode.SYSTEM_ERROR);\n            response.setRemark(\"The specified topic is longer than topic max length.\");\n            return false;\n        }\n"}
{"magic_number_smell": "      service.submit(new Feind(creatures.get(i + 1), sword));\n      service.submit(new Feind(creatures.get(i + 2), sword));\n    }\n    // Wait for program to terminate.\n    try {\n      if (!service.awaitTermination(3, TimeUnit.SECONDS)) {\n        LOGGER.info(\"The master of the sword is now {}.\", sword.getLocker().getName());\n      }\n    } catch (InterruptedException e) {\n      LOGGER.error(e.getMessage());\n      Thread.currentThread().interrupt();", "refactored_code": "  private static final int WAIT_TIME = 3;\n      service.submit(new Feind(creatures.get(i + 1), sword));\n      service.submit(new Feind(creatures.get(i + 2), sword));\n    }\n    // Wait for program to terminate.\n    try {\n      if (!service.awaitTermination(WAIT_TIME, TimeUnit.SECONDS)) {\n        LOGGER.info(\"The master of the sword is now {}.\", sword.getLocker().getName());\n      }\n    } catch (InterruptedException e) {\n      LOGGER.error(e.getMessage());\n      Thread.currentThread().interrupt();"}
{"magic_number_smell": "    public MQAdminImpl getMQAdminImpl() {\n        return mQAdminImpl;\n    }\n\n    public long getBootTimestamp() {\n        return System.currentTimeMillis();\n    }\n\n    public ScheduledExecutorService getScheduledExecutorService() {\n        return scheduledExecutorService;\n    }", "refactored_code": "    private final long bootTimestamp = System.currentTimeMillis();\n    public MQAdminImpl getMQAdminImpl() {\n        return mQAdminImpl;\n    }\n\n    public long getBootTimestamp() {\n        return bootTimestamp;\n    }\n\n    public ScheduledExecutorService getScheduledExecutorService() {\n        return scheduledExecutorService;\n    }"}
{"magic_number_smell": "\n/** Tests for the {@link AdaptiveScheduler}. */\npublic class AdaptiveSchedulerTest extends TestLogger {\n\n    private static final int 4 = 4;\n    private static final JobVertex JOB_VERTEX = createNoOpVertex(\"v1\", 4);\n\n    @ClassRule\n    public static final TestExecutorResource<ScheduledExecutorService> EXECUTOR_RESOURCE =\n            TestingUtils.defaultExecutorResource();\n", "refactored_code": "    private static final int PARALLELISM = 4;\n\n/** Tests for the {@link AdaptiveScheduler}. */\npublic class AdaptiveSchedulerTest extends TestLogger {\n\n    private static final int PARALLELISM = 4;\n    private static final JobVertex JOB_VERTEX = createNoOpVertex(\"v1\", PARALLELISM);\n\n    @ClassRule\n    public static final TestExecutorResource<ScheduledExecutorService> EXECUTOR_RESOURCE =\n            TestingUtils.defaultExecutorResource();\n"}
{"magic_number_smell": "\t\tthis.taskStates = Preconditions.checkNotNull(taskStates, \"Task States\");\n\t}\n\n\t@Override\n\tpublic int getVersion() {\n\t\treturn 0;\n\t}\n\n\t@Override\n\tpublic long getCheckpointId() {\n\t\treturn checkpointId;", "refactored_code": "\tpublic static final int VERSION = 0;\n\t\tthis.taskStates = Preconditions.checkNotNull(taskStates, \"Task States\");\n\t}\n\n\t@Override\n\tpublic int getVersion() {\n\t\treturn VERSION;\n\t}\n\n\t@Override\n\tpublic long getCheckpointId() {\n\t\treturn checkpointId;"}
{"magic_number_smell": "      return;\n    }\n\n    buffer.offer(logEntry);\n\n    if (logCount.incrementAndGet() >= 3) {\n      flushBuffer();\n    }\n  }\n\n  /**", "refactored_code": "  private static final int BUFFER_THRESHOLD = 3;\n      return;\n    }\n\n    buffer.offer(logEntry);\n\n    if (logCount.incrementAndGet() >= BUFFER_THRESHOLD) {\n      flushBuffer();\n    }\n  }\n\n  /**"}
{"magic_number_smell": "      var statue = new Statue(3, 20);\n      world.addEntity(skeleton1);\n      world.addEntity(skeleton2);\n      world.addEntity(statue);\n      world.run();\n      Thread.sleep(2000);\n      world.stop();\n    } catch (InterruptedException e) {\n      LOGGER.error(e.getMessage());\n    }\n  }", "refactored_code": "  private static final int GAME_RUNNING_TIME = 2000;\n      var statue = new Statue(3, 20);\n      world.addEntity(skeleton1);\n      world.addEntity(skeleton2);\n      world.addEntity(statue);\n      world.run();\n      Thread.sleep(GAME_RUNNING_TIME);\n      world.stop();\n    } catch (InterruptedException e) {\n      LOGGER.error(e.getMessage());\n    }\n  }"}
{"magic_number_smell": "  /**\n   * Try to load connection properties from file. Fall back to default connection properties.\n   */\n  public static void load() {\n    var host = DEFAULT_HOST;\n    var port = 27017;\n    var path = System.getProperty(\"hexagonal.properties.path\");\n    var properties = new Properties();\n    if (path != null) {\n      try (var fin = new FileInputStream(path)) {\n        properties.load(fin);", "refactored_code": "  private static final int DEFAULT_PORT = 27017;\n  /**\n   * Try to load connection properties from file. Fall back to default connection properties.\n   */\n  public static void load() {\n    var host = DEFAULT_HOST;\n    var port = DEFAULT_PORT;\n    var path = System.getProperty(\"hexagonal.properties.path\");\n    var properties = new Properties();\n    if (path != null) {\n      try (var fin = new FileInputStream(path)) {\n        properties.load(fin);"}
{"magic_number_smell": "\n  private static final int 10000 = 10000;\n\n  private final int numEntities;\n\n  private final Component[] aiComponents = new AiComponent[10000];\n\n  public AiComponentManager(int numEntities) {\n    this.numEntities = numEntities;\n  }\n", "refactored_code": "  private static final int MAX_ENTITIES = 10000;\n\n  private static final int MAX_ENTITIES = 10000;\n\n  private final int numEntities;\n\n  private final Component[] aiComponents = new AiComponent[MAX_ENTITIES];\n\n  public AiComponentManager(int numEntities) {\n    this.numEntities = numEntities;\n  }\n"}
{"magic_number_smell": "public class CoffeeMakingTask extends Task {\n\n  private static final int 100 = 100;\n\n  public CoffeeMakingTask(int numCups) {\n    super(numCups * 100);\n  }\n\n  @Override\n  public String toString() {\n    return String.format(\"%s %s\", this.getClass().getSimpleName(), super.toString());", "refactored_code": "  private static final int TIME_PER_CUP = 100;\npublic class CoffeeMakingTask extends Task {\n\n  private static final int TIME_PER_CUP = 100;\n\n  public CoffeeMakingTask(int numCups) {\n    super(numCups * TIME_PER_CUP);\n  }\n\n  @Override\n  public String toString() {\n    return String.format(\"%s %s\", this.getClass().getSimpleName(), super.toString());"}
{"magic_number_smell": "  private static final int PRICE = 50;\n  private static final boolean BOOKED = false;\n\n  @BeforeEach\n  void setUp() {\n    room = new Room(1, ROOMTYPE, PRICE, BOOKED);\n  }\n\n  @Test\n  void getAndSetId() {\n    final var newId = 2;", "refactored_code": "  private static final int ID = 1;\n  private static final int PRICE = 50;\n  private static final boolean BOOKED = false;\n\n  @BeforeEach\n  void setUp() {\n    room = new Room(ID, ROOMTYPE, PRICE, BOOKED);\n  }\n\n  @Test\n  void getAndSetId() {\n    final var newId = 2;"}
{"magic_number_smell": "  /**\n   * Generates 4 unique random numbers between 1-20 into numbers set.\n   */\n  private void generateRandomNumbers() {\n    numbers.clear();\n    var generator = new RandomNumberGenerator(1, MAX_NUMBER);\n    while (numbers.size() < NUM_NUMBERS) {\n      var num = generator.nextInt();\n      numbers.add(num);\n    }\n  }", "refactored_code": "  public static final int MIN_NUMBER = 1;\n  /**\n   * Generates 4 unique random numbers between 1-20 into numbers set.\n   */\n  private void generateRandomNumbers() {\n    numbers.clear();\n    var generator = new RandomNumberGenerator(MIN_NUMBER, MAX_NUMBER);\n    while (numbers.size() < NUM_NUMBERS) {\n      var num = generator.nextInt();\n      numbers.add(num);\n    }\n  }"}
{"magic_number_smell": "public class LoopInitializer {\n\t\n\tpublic static final int 1 = 1;\n\t\n\tpublic int getLoopInitializationPoint() {\n\t\treturn LoopInitializer.1;\n\t}\n}\n", "refactored_code": "\tpublic static final int LOOP_INIT_VALUE = 1;\npublic class LoopInitializer {\n\t\n\tpublic static final int LOOP_INIT_VALUE = 1;\n\t\n\tpublic int getLoopInitializationPoint() {\n\t\treturn LoopInitializer.LOOP_INIT_VALUE;\n\t}\n}\n"}
{"magic_number_smell": "    this.dao = dao;\n  }\n\n  @BeforeEach\n  void setUp() {\n    for (int i = 0; i < 5; i++) {\n      final var className = dao.persistentClass.getSimpleName();\n      final var entityName = String.format(\"%s%d\", className, ID_GENERATOR.incrementAndGet());\n      this.dao.persist(this.factory.apply(entityName));\n    }\n  }", "refactored_code": "  private static final int INITIAL_COUNT = 5;\n    this.dao = dao;\n  }\n\n  @BeforeEach\n  void setUp() {\n    for (int i = 0; i < INITIAL_COUNT; i++) {\n      final var className = dao.persistentClass.getSimpleName();\n      final var entityName = String.format(\"%s%d\", className, ID_GENERATOR.incrementAndGet());\n      this.dao.persist(this.factory.apply(entityName));\n    }\n  }"}
