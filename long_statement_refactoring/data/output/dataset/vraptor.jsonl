{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.serialization.xstream;\n\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport br.com.caelum.vraptor.interceptor.DefaultTypeNameExtractor;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.ioc.PrototypeScoped;\n\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.converters.Converter;\nimport com.thoughtworks.xstream.converters.SingleValueConverter;\nimport com.thoughtworks.xstream.io.HierarchicalStreamDriver;\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\nimport com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver;\nimport com.thoughtworks.xstream.io.json.JsonWriter;\n\n/**\n * Implementation of default XStream configuration\n *\n * @author Rafael Viana\n * @since 3.4.0\n */\n@PrototypeScoped\n@Component\npublic class XStreamBuilderImpl implements XStreamBuilder {\n\n\tprivate final XStreamConverters converters;\n\tprivate final TypeNameExtractor extractor;\n\t\n\tprivate boolean indented;\n\tprivate boolean withoutRoot;\n\t\n\tpublic XStreamBuilderImpl(XStreamConverters converters, TypeNameExtractor extractor) {\n\t\tthis.converters = converters;\n\t\tthis.extractor = extractor;\n\t}\n\n\tpublic static XStreamBuilder cleanInstance(Converter...converters) {\n\treturn new XStreamBuilderImpl(\n\t\tnew XStreamConverters(Arrays.asList(converters), Collections.<SingleValueConverter>emptyList()),\n\t\tnew DefaultTypeNameExtractor());\n\t}\n\n\tpublic XStream xmlInstance() {\n\t\treturn configure(new VRaptorXStream(extractor));\n\t}\n\t\n\tprotected static final String DEFAULT_NEW_LINE = \"\";\n\tprotected static final char[] DEFAULT_LINE_INDENTER = {};\n\t\n\tprotected static final String INDENTED_NEW_LINE = \"\\n\";\n\tprotected static final char[] INDENTED_LINE_INDENTER = { ' ', ' '};\n\t\n\tpublic XStream jsonInstance() {\n\t\treturn configure(new VRaptorXStream(extractor, getHierarchicalStreamDriver()));\n\t}\n\t\n\tpublic XStream configure(XStream xstream) {\n\t\tconverters.registerComponents(xstream);\n\t\treturn xstream;\n\t}\n\n\t/**\n\t  * You can override this method for configuring Driver before serialization\n\t  * @return configured hierarchical driver\n\t  */\n\tprotected HierarchicalStreamDriver getHierarchicalStreamDriver() {\n\tfinal String newLine = (indented ? INDENTED_NEW_LINE : DEFAULT_NEW_LINE);\n\tfinal char[] lineIndenter = (indented ? INDENTED_LINE_INDENTER : DEFAULT_LINE_INDENTER);\n\n\treturn new JsonHierarchicalStreamDriver() {\n\t\tpublic HierarchicalStreamWriter createWriter(Writer writer) {\n\t\tif (withoutRoot) {\n\t\t\treturn new JsonWriter(writer, lineIndenter, newLine, JsonWriter.DROP_ROOT_MODE);\n\t\t}\n\n\t\treturn new JsonWriter(writer, lineIndenter, newLine);\n\t\t}\n\t};\n\t}\n\n\tpublic XStreamBuilder indented() {\n\t\tindented = true;\n\treturn this;\n\t}\n\n\tpublic XStreamBuilder withoutRoot() {\n\t\twithoutRoot = true;\n\treturn this;\n\t}\n\t\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.serialization.xstream;\n\nimport java.io.Writer;\nimport java.util.Arrays;\nimport java.util.Collections;\n\nimport br.com.caelum.vraptor.interceptor.DefaultTypeNameExtractor;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.ioc.PrototypeScoped;\n\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.converters.Converter;\nimport com.thoughtworks.xstream.converters.SingleValueConverter;\nimport com.thoughtworks.xstream.io.HierarchicalStreamDriver;\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\nimport com.thoughtworks.xstream.io.json.JsonHierarchicalStreamDriver;\nimport com.thoughtworks.xstream.io.json.JsonWriter;\n\n/**\n * Implementation of default XStream configuration\n *\n * @author Rafael Viana\n * @since 3.4.0\n */\n@PrototypeScoped\n@Component\npublic class XStreamBuilderImpl implements XStreamBuilder {\n\n\tprivate final XStreamConverters converters;\n\tprivate final TypeNameExtractor extractor;\n\t\n\tprivate boolean indented;\n\tprivate boolean withoutRoot;\n\tprivate boolean recursive;\n\t\n\tpublic XStreamBuilderImpl(XStreamConverters converters, TypeNameExtractor extractor) {\n\t\tthis.converters = converters;\n\t\tthis.extractor = extractor;\n\t}\n\n\tpublic static XStreamBuilder cleanInstance(Converter...converters) {\n\treturn new XStreamBuilderImpl(\n\t\tnew XStreamConverters(Arrays.asList(converters), Collections.<SingleValueConverter>emptyList()),\n\t\tnew DefaultTypeNameExtractor());\n\t}\n\n\tpublic XStream xmlInstance() {\n\t\tVRaptorXStream xstream = new VRaptorXStream(extractor);\n\t\txstream.getVRaptorMapper().getSerializee().setRecursive(recursive);\n\t\treturn configure(xstream);\n\t}\n\t\n\tprotected static final String DEFAULT_NEW_LINE = \"\";\n\tprotected static final char[] DEFAULT_LINE_INDENTER = {};\n\t\n\tprotected static final String INDENTED_NEW_LINE = \"\\n\";\n\tprotected static final char[] INDENTED_LINE_INDENTER = { ' ', ' '};\n\t\n\tpublic XStream jsonInstance() {\n\t\treturn configure(new VRaptorXStream(extractor, getHierarchicalStreamDriver()));\n\t}\n\t\n\tpublic XStream configure(XStream xstream) {\n\t\tconverters.registerComponents(xstream);\n\t\treturn xstream;\n\t}\n\n\t/**\n\t  * You can override this method for configuring Driver before serialization\n\t  * @return configured hierarchical driver\n\t  */\n\tprotected HierarchicalStreamDriver getHierarchicalStreamDriver() {\n\tfinal String newLine = (indented ? INDENTED_NEW_LINE : DEFAULT_NEW_LINE);\n\tfinal char[] lineIndenter = (indented ? INDENTED_LINE_INDENTER : DEFAULT_LINE_INDENTER);\n\n\treturn new JsonHierarchicalStreamDriver() {\n\t\tpublic HierarchicalStreamWriter createWriter(Writer writer) {\n\t\tif (withoutRoot) {\n\t\t\treturn new JsonWriter(writer, lineIndenter, newLine, JsonWriter.DROP_ROOT_MODE);\n\t\t}\n\n\t\treturn new JsonWriter(writer, lineIndenter, newLine);\n\t\t}\n\t};\n\t}\n\n\tpublic XStreamBuilder indented() {\n\t\tindented = true;\n\treturn this;\n\t}\n\n\tpublic XStreamBuilder withoutRoot() {\n\t\twithoutRoot = true;\n\treturn this;\n\t}\n\n\tpublic XStreamBuilder recursive() {\n\t\trecursive = true;\n\t\treturn this;\n\t}\n\t\n}\n","lineNo":64}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.config.BasicConfiguration;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.StaticContentHandler;\nimport br.com.caelum.vraptor.http.EncodingHandler;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.http.VRaptorResponse;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\n\n/**\n * VRaptor entry point.<br>\n * Provider configuration is supported through init parameter.\n *\n * @author Guilherme Silveira\n * @author Fabio Kung\n */\npublic class VRaptor implements Filter {\n\tprivate ContainerProvider provider;\n\tprivate ServletContext servletContext;\n\n\tprivate StaticContentHandler staticHandler;\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(VRaptor.class);\n\n\tpublic void destroy() {\n\t\tprovider.stop();\n\t\tprovider = null;\n\t\tservletContext = null;\n\t}\n\n\tpublic void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,\n\t\t\tServletException {\n\n\t\tif (!(req instanceof HttpServletRequest) || !(res instanceof HttpServletResponse)) {\n\t\t\tthrow new ServletException(\n\t\t\t\t\t\"VRaptor must be run inside a Servlet environment. Portlets and others aren't supported.\");\n\t\t}\n\n\t\tfinal HttpServletRequest baseRequest = (HttpServletRequest) req;\n\t\tfinal HttpServletResponse baseResponse = (HttpServletResponse) res;\n\n\t\tif (staticHandler.requestingStaticFile(baseRequest)) {\n\t\t\tstaticHandler.deferProcessingToContainer(chain, baseRequest, baseResponse);\n\t\t} else {\n\t\t\tlogger.debug(\"VRaptor received a new request\");\n\t\t\tlogger.trace(\"Request: {}\", req);\n\n\t\t\tVRaptorRequest mutableRequest = new VRaptorRequest(baseRequest);\n\t\t\tVRaptorResponse mutableResponse = new VRaptorResponse(baseResponse);\n\n\t\t\tfinal RequestInfo request = new RequestInfo(servletContext, chain, mutableRequest, mutableResponse);\n\t\t\tprovider.provideForRequest(request, new Execution<Object>() {\n\t\t\t\tpublic Object insideRequest(Container container) {\n\t\t\t\t\tcontainer.instanceFor(EncodingHandler.class).setEncoding(baseRequest, baseResponse);\n\t\t\t\t\tcontainer.instanceFor(RequestExecution.class).execute();\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t});\n\t\t\tlogger.debug(\"VRaptor ended the request\");\n\t\t}\n\t}\n\n\tpublic void init(FilterConfig cfg) throws ServletException {\n\t\tservletContext = cfg.getServletContext();\n\t\tBasicConfiguration config = new BasicConfiguration(servletContext);\n\t\tinit(config.getProvider());\n\t\tlogger.info(\"VRaptor 3.5.2-SNAPSHOT successfuly initialized\");\n\t}\n\n\tvoid init(ContainerProvider provider) {\n\t\tthis.provider = provider;\n\t\tthis.provider.start(servletContext);\n\t\tthis.staticHandler = provider.getContainer().instanceFor(StaticContentHandler.class);\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.config.BasicConfiguration;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.StaticContentHandler;\nimport br.com.caelum.vraptor.http.EncodingHandler;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.http.VRaptorResponse;\nimport br.com.caelum.vraptor.interceptor.ApplicationLogicException;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\n\n/**\n * VRaptor entry point.<br>\n * Provider configuration is supported through init parameter.\n *\n * @author Guilherme Silveira\n * @author Fabio Kung\n */\npublic class VRaptor implements Filter {\n\tprivate ContainerProvider provider;\n\tprivate ServletContext servletContext;\n\n\tprivate StaticContentHandler staticHandler;\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(VRaptor.class);\n\n\tpublic void destroy() {\n\t\tprovider.stop();\n\t\tprovider = null;\n\t\tservletContext = null;\n\t}\n\n\tpublic void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,\n\t\t\tServletException {\n\n\t\tif (!(req instanceof HttpServletRequest) || !(res instanceof HttpServletResponse)) {\n\t\t\tthrow new ServletException(\n\t\t\t\t\t\"VRaptor must be run inside a Servlet environment. Portlets and others aren't supported.\");\n\t\t}\n\n\t\tfinal HttpServletRequest baseRequest = (HttpServletRequest) req;\n\t\tfinal HttpServletResponse baseResponse = (HttpServletResponse) res;\n\n\t\tif (staticHandler.requestingStaticFile(baseRequest)) {\n\t\t\tstaticHandler.deferProcessingToContainer(chain, baseRequest, baseResponse);\n\t\t} else {\n\t\t\tlogger.debug(\"VRaptor received a new request\");\n\t\t\tlogger.trace(\"Request: {}\", req);\n\n\t\t\tVRaptorRequest mutableRequest = new VRaptorRequest(baseRequest);\n\t\t\tVRaptorResponse mutableResponse = new VRaptorResponse(baseResponse);\n\n\t\t\tfinal RequestInfo request = new RequestInfo(servletContext, chain, mutableRequest, mutableResponse);\n\t\t\t\n\t\t\tExecution<Object> execution = new Execution<Object>() {\n\t\t\t\tpublic Object insideRequest(Container container) {\n\t\t\t\t\tcontainer.instanceFor(EncodingHandler.class).setEncoding(baseRequest, baseResponse);\n\t\t\t\t\tcontainer.instanceFor(RequestExecution.class).execute();\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\ttry {\n\t\t\t\tprovider.provideForRequest(request, execution);\n\t\t\t} catch (ApplicationLogicException e) {\n\t\t\t\t// it is a business logic exception, we dont need to show\n\t\t\t\t// all interceptors stack trace\n\t\t\t\tthrow new ServletException(e.getMessage(), e.getCause());\n\t\t\t}\n\t\t\t\n\t\t\tlogger.debug(\"VRaptor ended the request\");\n\t\t}\n\t}\n\n\tpublic void init(FilterConfig cfg) throws ServletException {\n\t\tservletContext = cfg.getServletContext();\n\t\tBasicConfiguration config = new BasicConfiguration(servletContext);\n\t\tinit(config.getProvider());\n\t\tlogger.info(\"VRaptor 3.5.2-SNAPSHOT successfuly initialized\");\n\t}\n\n\tvoid init(ContainerProvider provider) {\n\t\tthis.provider = provider;\n\t\tthis.provider.start(servletContext);\n\t\tthis.staticHandler = provider.getContainer().instanceFor(StaticContentHandler.class);\n\t}\n\n}\n","lineNo":90}
{"Smelly Sample":"package br.com.caelum.vraptor.deserialization.gson;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.deserialization.Deserializer;\nimport br.com.caelum.vraptor.deserialization.Deserializes;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.ResultException;\n\nimport com.google.common.base.Objects;\nimport com.google.common.io.CharStreams;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.JsonDeserializer;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\n\n/**\n *\n * @author Renan Reis\n * @author Guilherme Mangabeira\n */\n\n@Deserializes({ \"application/json\", \"json\" })\n@SuppressWarnings(\"rawtypes\")\npublic class GsonDeserialization implements Deserializer {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(GsonDeserialization.class);\n\n\tprivate final ParameterNameProvider paramNameProvider;\n\n\tprivate final Collection<JsonDeserializer> adapters;\n\n\tprivate final HttpServletRequest request;\n\n\tpublic GsonDeserialization(ParameterNameProvider paramNameProvider, Collection<JsonDeserializer> adapters, HttpServletRequest request) {\n\t\tthis.paramNameProvider = paramNameProvider;\n\t\tthis.adapters = adapters;\n\t\tthis.request = request;\n\t}\n\n\tpublic Object[] deserialize(InputStream inputStream, ResourceMethod method) {\n\t\tMethod jMethod = method.getMethod();\n\t\tClass<?>[] types = getTypes(method);\n\t\tif (types.length == 0) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Methods that consumes representations must receive just one argument\");\n\t\t}\n\n\t\tGson gson = getGson();\n\n\t\tObject[] params = new Object[types.length];\n\t\tString[] parameterNames = paramNameProvider.parameterNamesFor(jMethod);\n\n\t\ttry {\n\t\t\tString content = getContentOfStream(inputStream);\n\t\t\tlogger.debug(\"json retrieved: {}\", content);\n\n\t\t\tJsonParser parser = new JsonParser();\n\t\t\tJsonObject root = (JsonObject) parser.parse(content);\n\n\t\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\t\tString name = parameterNames[i];\n\t\t\t\tJsonElement node = root.get(name);\n\t\t\t\tif (isWithoutRoot(types, node)) {\n\t\t\t\t\tparams[i] = gson.fromJson(root, types[i]);\n\t\t\t\t\tlogger.info(\"json without root deserialized\");\n\t\t\t\t}\n\t\t\t\telse if(node != null){\n\t\t\t\t\tparams[i] = gson.fromJson(node, types[i]);\n\t\t\t\t}\n\t\t\t\tlogger.debug(\"json deserialized: {}\", params[i]);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new ResultException(\"Unable to deserialize data\", e);\n\t\t}\n\t\t\n\t\treturn params;\n\t}\n\n\tprotected Class<?>[] getTypes(ResourceMethod method) {\n\t\tClass<?>[] parameterTypes = method.getMethod().getParameterTypes();\n\t\tType superclass = method.getResource().getType().getGenericSuperclass();\n\t\tif(superclass instanceof ParameterizedType) {\n\t\t\tparameterTypes[0] = (Class<?>) getFirstGenericType(superclass);\n\t\t}\n\t\treturn parameterTypes;\n\t}\n\t\n\tprivate boolean isWithoutRoot(Class<?>[] types, JsonElement node) {\n\t\treturn node == null && types.length == 1;\n\t}\n\n\tprotected Gson getGson() {\n\t\tGsonBuilder builder = new GsonBuilder();\n\n\t\tfor (JsonDeserializer<?> adapter : adapters) {\n\t\t\tbuilder.registerTypeHierarchyAdapter(getAdapterType(adapter), adapter);\n\t\t}\n\n\t\treturn builder.create();\n\t}\n\n\tprivate Class<?> getAdapterType(JsonDeserializer<?> adapter) {\n\t\tType[] genericInterfaces = adapter.getClass().getGenericInterfaces();\n\t\tType actualType = getFirstGenericType(genericInterfaces[0]);\n\n\t\treturn (Class<?>) actualType;\n\t}\n\t\n\tprivate Type getFirstGenericType(Type type) {\n\t\treturn getGenericsTypes(type)[0];\n\t}\n\t\n\tprivate Type[] getGenericsTypes(Type type) {\n\t\tParameterizedType paramType = (ParameterizedType) type;\n\t\treturn paramType.getActualTypeArguments();\n\t}\n\n\tprivate String getContentOfStream(InputStream input) throws IOException {\n\t\tString charset = getRequestCharset();\n\t\tlogger.debug(\"Using charset {}\", charset);\n\t\treturn CharStreams.toString(new InputStreamReader(input, charset));\n\t}\n\n\tprivate String getRequestCharset() {\n\t\tString charset = Objects.firstNonNull(request.getHeader(\"Accept-Charset\"), \"UTF-8\");\n\t\treturn charset.split(\",\")[0];\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.deserialization.gson;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Collection;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.deserialization.Deserializer;\nimport br.com.caelum.vraptor.deserialization.Deserializes;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.ResultException;\n\nimport com.google.common.base.Objects;\nimport com.google.common.io.CharStreams;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.JsonDeserializer;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\n\n/**\n *\n * @author Renan Reis\n * @author Guilherme Mangabeira\n */\n\n@Deserializes({ \"application/json\", \"json\" })\n@SuppressWarnings(\"rawtypes\")\npublic class GsonDeserialization implements Deserializer {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(GsonDeserialization.class);\n\n\tprivate final ParameterNameProvider paramNameProvider;\n\n\tprivate final Collection<JsonDeserializer> adapters;\n\n\tprivate final HttpServletRequest request;\n\n\tpublic GsonDeserialization(ParameterNameProvider paramNameProvider, Collection<JsonDeserializer> adapters, HttpServletRequest request) {\n\t\tthis.paramNameProvider = paramNameProvider;\n\t\tthis.adapters = adapters;\n\t\tthis.request = request;\n\t}\n\n\tpublic Object[] deserialize(InputStream inputStream, ResourceMethod method) {\n\t\tMethod jMethod = method.getMethod();\n\t\tClass<?>[] types = getTypes(method);\n\t\tif (types.length == 0) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"Methods that consumes representations must receive just one argument\");\n\t\t}\n\n\t\tGson gson = getGson();\n\n\t\tObject[] params = new Object[types.length];\n\t\tString[] parameterNames = paramNameProvider.parameterNamesFor(jMethod);\n\n\t\ttry {\n\t\t\tString content = getContentOfStream(inputStream);\n\t\t\tlogger.debug(\"json retrieved: {}\", content);\n\n\t\t\tJsonParser parser = new JsonParser();\n\t\t\tJsonObject root = (JsonObject) parser.parse(content);\n\n\t\t\tfor (int i = 0; i < types.length; i++) {\n\t\t\t\tString name = parameterNames[i];\n\t\t\t\tJsonElement node = root.get(name);\n\t\t\t\tif (isWithoutRoot(types, node)) {\n\t\t\t\t\tparams[i] = gson.fromJson(root, types[i]);\n\t\t\t\t\tlogger.info(\"json without root deserialized\");\n\t\t\t\t}\n\t\t\t\telse if(node != null){\n\t\t\t\t\tparams[i] = gson.fromJson(node, types[i]);\n\t\t\t\t}\n\t\t\t\tlogger.debug(\"json deserialized: {}\", params[i]);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tthrow new ResultException(\"Unable to deserialize data\", e);\n\t\t}\n\t\t\n\t\treturn params;\n\t}\n\n\tprotected Class<?>[] getTypes(ResourceMethod method) {\n\t\tClass<?>[] parameterTypes = method.getMethod().getParameterTypes();\n\t\tType superclass = method.getResource().getType().getGenericSuperclass();\n\t\tif(superclass instanceof ParameterizedType) {\n\t\t\tType type = getFirstGenericType(superclass);\n\t\t\tfor (int i = 0; i < parameterTypes.length; i++) {\n\t\t\t\tif(parameterTypes[i].isAssignableFrom(type.getClass())) {\n\t\t\t\t\tparameterTypes[i] = (Class<?>) type;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn parameterTypes;\n\t}\n\t\n\tprivate boolean isWithoutRoot(Class<?>[] types, JsonElement node) {\n\t\treturn node == null && types.length == 1;\n\t}\n\n\tprotected Gson getGson() {\n\t\tGsonBuilder builder = new GsonBuilder();\n\n\t\tfor (JsonDeserializer<?> adapter : adapters) {\n\t\t\tbuilder.registerTypeHierarchyAdapter(getAdapterType(adapter), adapter);\n\t\t}\n\n\t\treturn builder.create();\n\t}\n\n\tprivate Class<?> getAdapterType(JsonDeserializer<?> adapter) {\n\t\tType[] genericInterfaces = adapter.getClass().getGenericInterfaces();\n\t\tType actualType = getFirstGenericType(genericInterfaces[0]);\n\n\t\treturn (Class<?>) actualType;\n\t}\n\t\n\tprivate Type getFirstGenericType(Type type) {\n\t\treturn getGenericsTypes(type)[0];\n\t}\n\t\n\tprivate Type[] getGenericsTypes(Type type) {\n\t\tParameterizedType paramType = (ParameterizedType) type;\n\t\treturn paramType.getActualTypeArguments();\n\t}\n\n\tprivate String getContentOfStream(InputStream input) throws IOException {\n\t\tString charset = getRequestCharset();\n\t\tlogger.debug(\"Using charset {}\", charset);\n\t\treturn CharStreams.toString(new InputStreamReader(input, charset));\n\t}\n\n\tprivate String getRequestCharset() {\n\t\tString charset = Objects.firstNonNull(request.getHeader(\"Accept-Charset\"), \"UTF-8\");\n\t\treturn charset.split(\",\")[0];\n\t}\n}\n","lineNo":98}
{"Smelly Sample":"package br.com.caelum.vraptor.validator;\n\nimport static java.lang.annotation.ElementType.PARAMETER;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.util.Locale;\n\nimport javax.validation.MessageInterpolator;\nimport javax.validation.Valid;\nimport javax.validation.ValidatorFactory;\nimport javax.validation.constraints.NotNull;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.DefaultMethodInfo;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParanamerNameProvider;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.proxy.InstanceCreator;\nimport br.com.caelum.vraptor.proxy.ObjenesisInstanceCreator;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.util.test.MockValidator;\n\n/**\n * Test method validator feature.\n * \n * @author Otávio Scherer Garcia\n * @since 3.5\n */\npublic class MethodValidatorTest {\n\n    @Mock private Localization l10n;\n    @Mock private InterceptorStack stack;\n    @Mock private Container container;\n    \n    private MethodValidatorInterceptor interceptor;\n    private ParameterNameProvider provider;\n    private Validator validator;\n    private ValidatorFactory factory;\n    private MessageInterpolator interpolator;\n    \n\tprivate ResourceMethod withConstraint;\n\tprivate ResourceMethod withTwoConstraints;\n\tprivate ResourceMethod withoutConstraint;\n\tprivate ResourceMethod cascadeConstraint;\n\n    @Before\n    public void setup() throws Exception {\n        MockitoAnnotations.initMocks(this);\n\n        Locale.setDefault(Locale.ENGLISH);\n\n        ValidatorFactoryCreator creator = new ValidatorFactoryCreator();\n        creator.buildFactory();\n\n        provider = new ParanamerNameProvider();\n        doReturn(false).when(container).canProvide(any(Class.class));\n        doReturn(new ObjenesisInstanceCreator()).when(container).instanceFor(InstanceCreator.class);\n        \n        MethodValidatorFactoryCreator methodValidatorCreator = new MethodValidatorFactoryCreator(provider, container);\n        methodValidatorCreator.buildFactory();\n        factory = methodValidatorCreator.getInstance();\n\n        MessageInterpolatorFactory interpolatorFactory = new MessageInterpolatorFactory(creator.getInstance());\n        interpolatorFactory.createInterpolator();\n        interpolator = interpolatorFactory.getInstance();\n\n        validator = new MockValidator();\n        \n        withConstraint = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod(\"withConstraint\", String.class));\n        withTwoConstraints = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod(\"withTwoConstraints\", String.class, Customer.class));\n        withoutConstraint = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod(\"withoutConstraint\", String.class));\n        cascadeConstraint = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod(\"cascadeConstraint\", Customer.class));\n    }\n    \n    @Test\n    public void shouldAcceptIfMethodHasConstraint() {\n        interceptor = new MethodValidatorInterceptor(null, null, null, null, factory.getValidator());\n    \tassertThat(interceptor.accepts(withConstraint), is(true));\n    \t\n        interceptor = new MethodValidatorInterceptor(null, null, null, null, factory.getValidator());\n    \tassertThat(interceptor.accepts(withTwoConstraints), is(true));\n    \t\n        interceptor = new MethodValidatorInterceptor(null, null, null, null, factory.getValidator());\n    \tassertThat(interceptor.accepts(cascadeConstraint), is(true));\n    }\n\n    @Test\n    public void shouldNotAcceptIfMethodHasConstraint() {\n        interceptor = new MethodValidatorInterceptor(null, null, null, null, factory.getValidator());\n    \tassertThat(interceptor.accepts(withoutConstraint), is(false));\n    }\n\n    @Test\n    public void shouldValidateMethodWithConstraint()\n        throws Exception {\n        MethodInfo info = new DefaultMethodInfo();\n        info.setParameters(new Object[] { null });\n        info.setResourceMethod(withConstraint);\n\n        interceptor = new MethodValidatorInterceptor(l10n, interpolator, validator, info, factory.getValidator());\n        when(l10n.getLocale()).thenReturn(new Locale(\"pt\", \"br\"));\n\n        MyController controller = new MyController();\n        interceptor.intercept(stack, info.getResourceMethod(), controller);\n        \n        assertThat(validator.getErrors(), hasSize(1));\n        assertThat(validator.getErrors().get(0).getCategory(), is(\"withConstraint.email\"));\n    }\n\n    @Test\n    public void shouldUseDefaultLocale()\n        throws Exception {\n        MethodInfo info = new DefaultMethodInfo();\n        info.setParameters(new Object[] { null });\n        info.setResourceMethod(withConstraint);\n\n        interceptor = new MethodValidatorInterceptor(l10n, interpolator, validator, info, factory.getValidator());\n\n        MyController controller = new MyController();\n        interceptor.intercept(stack, info.getResourceMethod(), controller);\n\n        assertThat(validator.getErrors(), hasSize(1));\n        assertThat(validator.getErrors().get(0).getCategory(), is(\"withConstraint.email\"));\n        assertThat(validator.getErrors().get(0).getMessage(), is(\"may not be null\"));\n    }\n\n    @Test\n    public void shouldValidateMethodWithTwoConstraints()\n        throws Exception {\n        MethodInfo info = new DefaultMethodInfo();\n        info.setParameters(new Object[] { null, new Customer(null, null) });\n        info.setResourceMethod(withTwoConstraints);\n\n        interceptor = new MethodValidatorInterceptor(l10n, interpolator, validator, info, factory.getValidator());\n        when(l10n.getLocale()).thenReturn(new Locale(\"pt\", \"br\"));\n\n        MyController controller = new MyController();\n        interceptor.intercept(stack, info.getResourceMethod(), controller);\n        String messages = validator.getErrors().toString();\n\n        assertThat(validator.getErrors(), hasSize(3));\n        \n        assertThat(messages, containsString(\"não pode ser nulo\"));\n        assertThat(messages, containsString(\"withTwoConstraints.name\"));\n        assertThat(messages, containsString(\"withTwoConstraints.customer.name\"));\n        assertThat(messages, containsString(\"withTwoConstraints.customer.id\"));\n    }\n    \n    /**\n     * Customer for using in bean validator tests.\n     */\n    public class Customer {\n\n        @NotNull public Integer id;\n\n        @NotNull public String name;\n\n        public Customer(Integer id, String name) {\n            this.id = id;\n            this.name = name;\n        }\n    }\n\n    public class MyController {\n\n        public void withConstraint(@NotNull String email) {\n\n        }\n\n        public void withTwoConstraints(@NotNull String name, @Valid Customer customer) {\n\n        }\n        \n        public void withoutConstraint(@Foo String foo) {\n        \t\n        }\n        \n        public void cascadeConstraint(@Valid Customer customer) {\n\n        }\n    }\n    \n\t@Target(value = { PARAMETER })\n\t@Retention(value = RUNTIME)\n\t@Documented\n    public @interface Foo {\n    \t\n    }\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.validator;\n\nimport static java.lang.annotation.ElementType.PARAMETER;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\nimport java.util.Locale;\n\nimport javax.validation.MessageInterpolator;\nimport javax.validation.Valid;\nimport javax.validation.ValidatorFactory;\nimport javax.validation.constraints.NotNull;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.DefaultMethodInfo;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParanamerNameProvider;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.proxy.InstanceCreator;\nimport br.com.caelum.vraptor.proxy.ObjenesisInstanceCreator;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.util.test.MockValidator;\n\n/**\n * Test method validator feature.\n * \n * @author Otávio Scherer Garcia\n * @since 3.5\n */\npublic class MethodValidatorTest {\n\n    @Mock private Localization l10n;\n    @Mock private InterceptorStack stack;\n    @Mock private Container container;\n    \n    private MethodValidatorInterceptor interceptor;\n    private ParameterNameProvider provider;\n    private Validator validator;\n    private ValidatorFactory factory;\n    private MessageInterpolator interpolator;\n    \n\tprivate ResourceMethod withConstraint;\n\tprivate ResourceMethod withTwoConstraints;\n\tprivate ResourceMethod withoutConstraint;\n\tprivate ResourceMethod cascadeConstraint;\n\n    @Before\n    public void setup() throws Exception {\n        MockitoAnnotations.initMocks(this);\n\n        Locale.setDefault(Locale.ENGLISH);\n\n        ValidatorFactoryCreator creator = new ValidatorFactoryCreator();\n        creator.buildFactory();\n\n        provider = new ParanamerNameProvider();\n        doReturn(false).when(container).canProvide(any(Class.class));\n        doReturn(new ObjenesisInstanceCreator()).when(container).instanceFor(InstanceCreator.class);\n        \n        DIConstraintValidatorFactory constraintValidatorFactory = new DIConstraintValidatorFactory(container);\n        MethodValidatorFactoryCreator methodValidatorCreator = new MethodValidatorFactoryCreator(provider, constraintValidatorFactory);\n        methodValidatorCreator.buildFactory();\n        factory = methodValidatorCreator.getInstance();\n\n        MessageInterpolatorFactory interpolatorFactory = new MessageInterpolatorFactory(creator.getInstance());\n        interpolatorFactory.createInterpolator();\n        interpolator = interpolatorFactory.getInstance();\n\n        validator = new MockValidator();\n        \n        withConstraint = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod(\"withConstraint\", String.class));\n        withTwoConstraints = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod(\"withTwoConstraints\", String.class, Customer.class));\n        withoutConstraint = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod(\"withoutConstraint\", String.class));\n        cascadeConstraint = DefaultResourceMethod.instanceFor(MyController.class, MyController.class.getMethod(\"cascadeConstraint\", Customer.class));\n    }\n    \n    @Test\n    public void shouldAcceptIfMethodHasConstraint() {\n        interceptor = new MethodValidatorInterceptor(null, null, null, null, factory.getValidator());\n    \tassertThat(interceptor.accepts(withConstraint), is(true));\n    \t\n        interceptor = new MethodValidatorInterceptor(null, null, null, null, factory.getValidator());\n    \tassertThat(interceptor.accepts(withTwoConstraints), is(true));\n    \t\n        interceptor = new MethodValidatorInterceptor(null, null, null, null, factory.getValidator());\n    \tassertThat(interceptor.accepts(cascadeConstraint), is(true));\n    }\n\n    @Test\n    public void shouldNotAcceptIfMethodHasConstraint() {\n        interceptor = new MethodValidatorInterceptor(null, null, null, null, factory.getValidator());\n    \tassertThat(interceptor.accepts(withoutConstraint), is(false));\n    }\n\n    @Test\n    public void shouldValidateMethodWithConstraint()\n        throws Exception {\n        MethodInfo info = new DefaultMethodInfo();\n        info.setParameters(new Object[] { null });\n        info.setResourceMethod(withConstraint);\n\n        interceptor = new MethodValidatorInterceptor(l10n, interpolator, validator, info, factory.getValidator());\n        when(l10n.getLocale()).thenReturn(new Locale(\"pt\", \"br\"));\n\n        MyController controller = new MyController();\n        interceptor.intercept(stack, info.getResourceMethod(), controller);\n        \n        assertThat(validator.getErrors(), hasSize(1));\n        assertThat(validator.getErrors().get(0).getCategory(), is(\"withConstraint.email\"));\n    }\n\n    @Test\n    public void shouldUseDefaultLocale()\n        throws Exception {\n        MethodInfo info = new DefaultMethodInfo();\n        info.setParameters(new Object[] { null });\n        info.setResourceMethod(withConstraint);\n\n        interceptor = new MethodValidatorInterceptor(l10n, interpolator, validator, info, factory.getValidator());\n\n        MyController controller = new MyController();\n        interceptor.intercept(stack, info.getResourceMethod(), controller);\n\n        assertThat(validator.getErrors(), hasSize(1));\n        assertThat(validator.getErrors().get(0).getCategory(), is(\"withConstraint.email\"));\n        assertThat(validator.getErrors().get(0).getMessage(), is(\"may not be null\"));\n    }\n\n    @Test\n    public void shouldValidateMethodWithTwoConstraints()\n        throws Exception {\n        MethodInfo info = new DefaultMethodInfo();\n        info.setParameters(new Object[] { null, new Customer(null, null) });\n        info.setResourceMethod(withTwoConstraints);\n\n        interceptor = new MethodValidatorInterceptor(l10n, interpolator, validator, info, factory.getValidator());\n        when(l10n.getLocale()).thenReturn(new Locale(\"pt\", \"br\"));\n\n        MyController controller = new MyController();\n        interceptor.intercept(stack, info.getResourceMethod(), controller);\n        String messages = validator.getErrors().toString();\n\n        assertThat(validator.getErrors(), hasSize(3));\n        \n        assertThat(messages, containsString(\"não pode ser nulo\"));\n        assertThat(messages, containsString(\"withTwoConstraints.name\"));\n        assertThat(messages, containsString(\"withTwoConstraints.customer.name\"));\n        assertThat(messages, containsString(\"withTwoConstraints.customer.id\"));\n    }\n    \n    /**\n     * Customer for using in bean validator tests.\n     */\n    public class Customer {\n\n        @NotNull public Integer id;\n\n        @NotNull public String name;\n\n        public Customer(Integer id, String name) {\n            this.id = id;\n            this.name = name;\n        }\n    }\n\n    public class MyController {\n\n        public void withConstraint(@NotNull String email) {\n\n        }\n\n        public void withTwoConstraints(@NotNull String name, @Valid Customer customer) {\n\n        }\n        \n        public void withoutConstraint(@Foo String foo) {\n        \t\n        }\n        \n        public void cascadeConstraint(@Valid Customer customer) {\n\n        }\n    }\n    \n\t@Target(value = { PARAMETER })\n\t@Retention(value = RUNTIME)\n\t@Documented\n    public @interface Foo {\n    \t\n    }\n}\n","lineNo":78}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n * \thttp://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */\npackage br.com.caelum.vraptor.converter.l10n;\n\nimport static com.google.common.base.Strings.isNullOrEmpty;\n\nimport java.math.BigDecimal;\nimport java.text.DecimalFormat;\nimport java.text.MessageFormat;\nimport java.text.ParseException;\nimport java.util.ResourceBundle;\n\nimport br.com.caelum.vraptor.Convert;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.converter.ConversionError;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\n\n/**\n * Localized version of VRaptor's BigDecimal converter. This component is optional and must be declared in web.xml\n * before using. If the input value if empty or a null string, null values are returned. If the input string is not a\n * number a {@link ConversionError} will be throw.\n * \n * @author Otávio Scherer Garcia\n * @since 3.1.2\n */\n@Convert(BigDecimal.class)\n@RequestScoped\npublic class LocaleBasedBigDecimalConverter\n    implements Converter<BigDecimal> {\n\n    private final Localization localization;\n    \n    public LocaleBasedBigDecimalConverter(Localization localization) {\n        this.localization = localization;\n    }\n\n    public BigDecimal convert(String value, Class<? extends BigDecimal> type, ResourceBundle bundle) {\n        if (isNullOrEmpty(value)) {\n            return null;\n        }\n        \n        try {\n        \treturn new BigDecimal(value);\n        } catch (NumberFormatException e) {\n        \ttry {\n        \t\tDecimalFormat formatBigDecimal = ((DecimalFormat) DecimalFormat.getInstance(localization.getLocale()));\n            \tformatBigDecimal.setParseBigDecimal(true);\n            \treturn (BigDecimal) formatBigDecimal.parse(value);\n        \t} catch(ParseException pe){\n        \t\tthrow new ConversionError(MessageFormat.format(bundle.getString(\"is_not_a_valid_number\"), value));\n        \t}\n            \n        }\n    }\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n * \thttp://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */\npackage br.com.caelum.vraptor.converter.l10n;\n\nimport static com.google.common.base.Strings.isNullOrEmpty;\n\nimport java.math.BigDecimal;\nimport java.text.DecimalFormat;\nimport java.text.MessageFormat;\nimport java.text.ParseException;\nimport java.util.Locale;\nimport java.util.ResourceBundle;\n\nimport br.com.caelum.vraptor.Convert;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.converter.ConversionError;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\n\n/**\n * Localized version of VRaptor's BigDecimal converter. This component is optional and must be declared in web.xml\n * before using. If the input value if empty or a null string, null values are returned. If the input string is not a\n * number a {@link ConversionError} will be throw.\n * \n * @author Otávio Scherer Garcia\n * @since 3.1.2\n */\n@Convert(BigDecimal.class)\n@RequestScoped\npublic class LocaleBasedBigDecimalConverter\n    implements Converter<BigDecimal> {\n\n    private final Localization localization;\n    \n    public LocaleBasedBigDecimalConverter(Localization localization) {\n        this.localization = localization;\n    }\n\n    public BigDecimal convert(String value, Class<? extends BigDecimal> type, ResourceBundle bundle) {\n        if (isNullOrEmpty(value)) {\n            return null;\n        }\n        \n        try {\n            final Locale locale = localization.getLocale();\n            DecimalFormat fmt = ((DecimalFormat) DecimalFormat.getInstance(locale));\n            fmt.setParseBigDecimal(true);\n            \n            return (BigDecimal) fmt.parse(value);\n        } catch (ParseException e) {\n            throw new ConversionError(MessageFormat.format(bundle.getString(\"is_not_a_valid_number\"), value));\n        }\n    }\n}\n","lineNo":59}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpSession;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.web.context.ConfigurableWebApplicationContext;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport br.com.caelum.vraptor.config.BasicConfiguration;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.test.HttpServletRequestMock;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\n\n/**\n * @author Fabio Kung\n */\npublic class SpringProviderTest {\n\tprivate Mockery mockery;\n\tprivate ServletContext servletContext;\n\tprivate HttpServletRequestMock request;\n\tprivate HttpSession session;\n\n\t@Before\n\tpublic void init() {\n\t\tmockery = new Mockery();\n\t\tservletContext = mockery.mock(ServletContext.class);\n\n\t\tsession = new HttpSessionMock(servletContext, \"session\");\n\t\trequest = new HttpServletRequestMock(session, mockery.mock(MutableRequest.class), mockery);\n\n\t\tServletRequestAttributes requestAttributes = new ServletRequestAttributes(\n\t\t\t\trequest);\n\t\tRequestContextHolder.setRequestAttributes(requestAttributes);\n\t}\n\n\t@After\n\tpublic void destroy() {\n\t\tmockery.assertIsSatisfied();\n\t\tRequestContextHolder.resetRequestAttributes();\n\t}\n\t\n\t@Test\n\tpublic void shouldIncludeTheApplicationContextOnTheRootApplicationContextParamIfNotSet() throws Exception {\n\t\tmockery.checking(new Expectations() {{\n\t\t\tone(servletContext).getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);\n\t\t\twill(returnValue(null));\n\t\t\t\n\t\t\tone(servletContext).setAttribute(with(equal(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)), with(any(WebApplicationContext.class)));\n\t\t}});\n\t\t\n\t\tdefaultExpectations();\n\t\t\n\t\tSpringProvider provider = new SpringProvider();\n\t\tprovider.start(servletContext);\n\t\t\n\t\tmockery.assertIsSatisfied();\n\t}\n\t\n\t@Test\n\tpublic void shouldNotIncludeTheApplicationContextOnTheRootApplicationContextParamIfAlreadySet() throws Exception {\n\t\tmockery.checking(new Expectations() {{\n\t\t\tConfigurableWebApplicationContext mock = mockery.mock(ConfigurableWebApplicationContext.class);\n\t\t\t\n\t\t\tone(servletContext).getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);\n\t\t\twill(returnValue(mock));\n\t\t\t\n\t\t\tnever(servletContext).setAttribute(with(equal(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)), with(any(WebApplicationContext.class)));\n\t\t\t\n\t\t\tignoring(mock);\n\t\t}});\n\t\t\n\t\tdefaultExpectations();\n\t\t\n\t\tSpringProvider provider = new SpringProvider();\n\t\tprovider.start(servletContext);\n\t\t\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldLoadInitParameterForBasePackages() {\n\t\tdefaultExpectations();\n\t\tSpringProvider provider = new SpringProvider();\n\t\tprovider.start(servletContext);\n\t}\n\n\tprivate void defaultExpectations() {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tatLeast(1).of(servletContext).getInitParameter(\n\t\t\t\t\t\tBasicConfiguration.BASE_PACKAGES_PARAMETER_NAME);\n\t\t\t\twill(returnValue(\"br.com.caelum.vraptor.ioc.spring.components.registrar\"));\n\n\t\t\t\tallowing(servletContext).getRealPath(\"/WEB-INF/classes\");\n\t\t\t\twill(returnValue(this.getClass().getResource(\".\").getPath()));\n\n\t\t\t\tallowing(servletContext).getAttribute(with(any(String.class)));\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tallowing(servletContext).setAttribute(with(any(String.class)), with(any(Object.class)));\n\n                allowing(servletContext).getInitParameter(BasicConfiguration.SCANNING_PARAM);\n                will(returnValue(\"enabled\"));\n\n                allowing(servletContext).getClassLoader();\n                will(returnValue(Thread.currentThread().getContextClassLoader()));\n\n                allowing(servletContext);\n\t\t\t}\n\t\t});\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport static br.com.caelum.vraptor.config.BasicConfiguration.BASE_PACKAGES_PARAMETER_NAME;\nimport static br.com.caelum.vraptor.config.BasicConfiguration.SCANNING_PARAM;\nimport static java.util.Arrays.asList;\nimport static java.util.Collections.enumeration;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Matchers.isA;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.springframework.web.context.WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE;\n\nimport java.util.Collections;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpSession;\n\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.web.context.ConfigurableWebApplicationContext;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.test.HttpServletRequestMock;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\n\n/**\n * @author Fabio Kung\n */\npublic class SpringProviderTest {\n\tprivate ServletContext servletContext;\n\tprivate HttpServletRequestMock request;\n\tprivate HttpSession session;\n\n\t@Before\n\tpublic void init() {\n\t\tservletContext = mock(ServletContext.class);\n\n\t\tsession = new HttpSessionMock(servletContext, \"session\");\n\t\trequest = new HttpServletRequestMock(session, mock(MutableRequest.class));\n\n\t\tServletRequestAttributes requestAttributes = new ServletRequestAttributes(request);\n\t\tRequestContextHolder.setRequestAttributes(requestAttributes);\n\t}\n\n\t@After\n\tpublic void destroy() {\n\t\tRequestContextHolder.resetRequestAttributes();\n\t}\n\t\n\t@Test\n\tpublic void shouldIncludeTheApplicationContextOnTheRootApplicationContextParamIfNotSet() throws Exception {\n\t\twhen(servletContext.getAttributeNames()).thenReturn(enumeration(Collections.<String> emptyList()));\n\t\twhen(servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE))\n\t\t\t.thenReturn(null);\n\t\t\n\t\tdefaultExpectations();\n\t\t\n\t\tSpringProvider provider = new SpringProvider();\n\t\tprovider.start(servletContext);\n\t\t\n\t\tverify(servletContext).setAttribute(eq(ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE), isA(WebApplicationContext.class));\n\t}\n\t\n\t@Test\n\tpublic void shouldNotIncludeTheApplicationContextOnTheRootApplicationContextParamIfAlreadySet() throws Exception {\n\t\tConfigurableWebApplicationContext ctx = mock(ConfigurableWebApplicationContext.class);\n\n\t\twhen(servletContext.getAttributeNames()).thenReturn(enumeration(Collections.<String> emptyList()));\n\t\twhen(servletContext.getAttribute(ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE)).thenReturn(ctx);\n\t\t\t\n\t\tdefaultExpectations();\n\t\t\n\t\tSpringProvider provider = new SpringProvider();\n\t\tprovider.start(servletContext);\n\t\t\n\t\tverify(servletContext, never()).setAttribute(eq(ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE), isA(WebApplicationContext.class));\n\t}\n\n\t@Test\n\tpublic void shouldLoadInitParameterForBasePackages() {\n\t\twhen(servletContext.getAttributeNames()).thenReturn(enumeration(Collections.<String> emptyList()));\n\t\t\n\t\tdefaultExpectations();\n\t\tSpringProvider provider = new SpringProvider();\n\t\tprovider.start(servletContext);\n\t}\n\n\tprivate void defaultExpectations() {\n\t\twhen(servletContext.getInitParameter(BASE_PACKAGES_PARAMETER_NAME))\n\t\t\t.thenReturn(\"br.com.caelum.vraptor.ioc.spring.components.registrar\");\n\n\t\twhen(servletContext.getRealPath(\"/WEB-INF/classes\"))\n\t\t\t.thenReturn(this.getClass().getResource(\".\").getPath());\n\n\t\twhen(servletContext.getInitParameter(SCANNING_PARAM)).thenReturn(\"enabled\");\n\n        when(servletContext.getClassLoader())\n        \t.thenReturn(Thread.currentThread().getContextClassLoader());\n        \n    \twhen(servletContext.getInitParameterNames()).thenReturn(enumeration(asList(SCANNING_PARAM)));\n\t}\n}\n","lineNo":88}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport java.lang.reflect.Method;\nimport java.util.EnumSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.jmock.Expectations;\nimport org.jmock.Sequence;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.JavassistProxifier;\nimport br.com.caelum.vraptor.proxy.ObjenesisInstanceCreator;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\n/**\n * Those are more likely to be acceptance than unit tests.\n * @author guilherme silveira\n */\npublic class DefaultRouterTest {\n\n    private Proxifier proxifier;\n\tprivate DefaultRouter router;\n\tprivate VRaptorMockery mockery;\n\tprivate VRaptorRequest request;\n\tprivate ResourceMethod method;\n\tprivate Converters converters;\n\tprivate ParameterNameProvider nameProvider;\n\n\t@Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.proxifier = new JavassistProxifier(new ObjenesisInstanceCreator());\n\t\tthis.method = mockery.mock(ResourceMethod.class);\n\t\tthis.converters = mockery.mock(Converters.class);\n\t\tthis.nameProvider = mockery.mock(ParameterNameProvider.class);\n\n\t\tmockery.checking(new Expectations() {{\n\t\t\tignoring(nameProvider);\n\t\t}});\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), proxifier, new NoTypeFinder(), converters, nameProvider, new JavaEvaluator());\n\t}\n\n\t@Test\n\tpublic void shouldThrowResourceNotFoundExceptionWhenNoRoutesMatchTheURI() throws Exception {\n\t\tfinal Route route = mockery.mock(Route.class);\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(route).canHandle(with(any(String.class)));\n\t\t\t\twill(returnValue(false));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\trouter.add(route);\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tAssert.fail(\"ResourceNotFoundException is expected\");\n\t\t} catch (ResourceNotFoundException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\t@Test\n\tpublic void shouldThrowMethodNotAllowedExceptionWhenNoRoutesMatchTheURIWithGivenHttpMethod() throws Exception {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(route).canHandle(with(any(String.class)));\n\t\t\t\twill(returnValue(true));\n\n\t\t\t\tallowing(route).allowedMethods();\n\t\t\t\twill(returnValue(EnumSet.of(HttpMethod.GET)));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\trouter.add(route);\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tAssert.fail(\"MethodNotAllowedException is expected\");\n\t\t} catch (MethodNotAllowedException e) {\n\t\t\tassertThat(e.getAllowedMethods(), is((Set<HttpMethod>)EnumSet.of(HttpMethod.GET)));\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void shouldObeyPriorityOfRoutes() throws Exception {\n\t\tfinal Route first = mockery.mock(Route.class, \"first\");\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tfinal Route third = mockery.mock(Route.class, \"third\");\n\n\t\tfinal Sequence handle = mockery.sequence(\"invocation\");\n\t\tfinal Sequence allowed = mockery.sequence(\"allowed\");\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(first).getPriority(); will(returnValue(Path.HIGH));\n\t\t\t\tallowing(second).getPriority(); will(returnValue(Path.DEFAULT));\n\t\t\t\tallowing(third).getPriority(); will(returnValue(Path.LOW));\n\n\t\t\t\tallowing(first).canHandle(with(any(String.class))); will(returnValue(false));\n\t\t\t\tinSequence(handle);\n\t\t\t\tallowing(second).canHandle(with(any(String.class))); will(returnValue(false));\n\t\t\t\tinSequence(handle);\n\t\t\t\tallowing(third).canHandle(with(any(String.class))); will(returnValue(true));\n\t\t\t\tinSequence(handle);\n\n\t\t\t\tEnumSet<HttpMethod> get = EnumSet.of(HttpMethod.GET);\n\n\t\t\t\tallowing(first).allowedMethods(); will(returnValue(get));\n\t\t\t\tinSequence(allowed);\n\t\t\t\tallowing(second).allowedMethods(); will(returnValue(get));\n\t\t\t\tinSequence(allowed);\n\t\t\t\tallowing(third).allowedMethods(); will(returnValue(get));\n\t\t\t\tinSequence(allowed);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trouter.add(third);\n\t\trouter.add(first);\n\t\trouter.add(second);\n\n\t\trouter.parse(\"anything\", HttpMethod.GET, request);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\");\n\t\t\twill(returnValue(true));\n\n\t\t\tallowing(route).allowedMethods();\n\t\t\twill(returnValue(EnumSet.of(HttpMethod.POST)));\n\n\t\t\tallowing(route).resourceMethod(request, \"/clients/add\");\n\t\t\twill(returnValue(method));\n\n\t\t\tallowing(route).getPriority();\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t@Test\n\tpublic void passesTheWebMethod() throws SecurityException, NoSuchMethodException {\n\t\tfinal HttpMethod delete = HttpMethod.DELETE;\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\");\n\t\t\twill(returnValue(true));\n\n\t\t\tallowing(route).allowedMethods();\n\t\t\twill(returnValue(EnumSet.of(delete)));\n\n\t\t\tallowing(route).resourceMethod(request, \"/clients/add\");\n\t\t\twill(returnValue(method));\n\n\t\t\tallowing(route).getPriority();\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", delete, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\"); will(returnValue(true));\n\t\t\tallowing(second).canHandle(\"/clients/add\");\twill(returnValue(true));\n\n\t\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\t\tallowing(route).allowedMethods(); will(returnValue(all));\n\t\t\tallowing(second).allowedMethods();\twill(returnValue(all));\n\n\t\t\tone(route).resourceMethod(request, \"/clients/add\");\n\t\t\twill(returnValue(method));\n\n\t\t\tallowing(route).getPriority(); will(returnValue(Path.HIGHEST));\n\t\t\tallowing(second).getPriority(); will(returnValue(Path.LOWEST));\n\t\t}});\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void throwsExceptionIfMoreThanOneUriMatchesWithSamePriority() {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\"); will(returnValue(true));\n\t\t\tallowing(second).canHandle(\"/clients/add\");\twill(returnValue(true));\n\n\t\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\t\tallowing(route).allowedMethods(); will(returnValue(all));\n\t\t\tallowing(second).allowedMethods();\twill(returnValue(all));\n\n\t\t\tallowing(route).getPriority(); will(returnValue(Path.DEFAULT));\n\t\t\tallowing(second).getPriority(); will(returnValue(Path.DEFAULT));\n\t\t}});\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\ttry {\n\t\t\trouter.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\t\tAssert.fail(\"IllegalStateException expected\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\n\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\tprivate Method method(String methodName, Class<?>... params) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(methodName, params);\n\t}\n\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Resource\n\tpublic static class MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"starPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\tprivate void registerRulesFor(Class<?> type) {\n\t\tRoutesParser parser = new PathAnnotationRoutesParser(router);\n\n\t\tList<Route> rules = parser.rulesFor(mockery.resource(type));\n\t\tfor (Route route : rules) {\n\t\t\trouter.add(route);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tregisterRulesFor(InheritanceExample.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"notAnnotated\");\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"customizedPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\t@Deprecated\n\t@Ignore\n\tpublic void canAccessGenericTypeAndMethodRoute() throws NoSuchMethodException, ClassNotFoundException {\n\t\tClass.forName(DefaultRouterTest.class.getPackage().getName() + \".MyCustomResource\");\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n//\t\t\t\trouteFor(\"--{webLogic}--{webMethod}\").is(type(DefaultRouterTest.class.getPackage().getName() + \".{webLogic}\"), method(\"{webMethod}\"));\n\t\t\t}\n\t\t};\n\t\tResourceMethod resourceMethod = router.parse(\"--\" + MyCustomResource.class.getSimpleName() + \"--notAnnotated\", HttpMethod.GET, request);\n\t\tfinal Method javaMethodFound = resourceMethod.getMethod();\n\t\tassertThat(javaMethodFound, is(equalTo(MyCustomResource.class.getDeclaredMethod(\"notAnnotated\"))));\n\t\tString url = router.urlFor(MyCustomResource.class, javaMethodFound, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.GET, request).getMethod(), is(equalTo(javaMethodFound)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\nclass MyCustomResource {\n\tpublic void notAnnotated() {\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Mockito.atLeastOnce;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\nimport java.util.EnumSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.http.DefaultParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.DefaultTypeNameExtractor;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.JavassistProxifier;\nimport br.com.caelum.vraptor.proxy.ObjenesisInstanceCreator;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.DefaultResourceClass;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceClass;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Those are more likely to be acceptance than unit tests.\n * @author guilherme silveira\n */\npublic class DefaultRouterTest {\n\n    private Proxifier proxifier;\n\tprivate DefaultRouter router;\n\tprivate VRaptorRequest request;\n\tprivate ResourceMethod method;\n\tprivate Converters converters;\n\tprivate ParameterNameProvider nameProvider;\n\n\t@Before\n\tpublic void setup() {\n\t\tthis.request = new VRaptorRequest(mock(HttpServletRequest.class));\n\t\tthis.proxifier = new JavassistProxifier(new ObjenesisInstanceCreator());\n\t\tthis.method = mock(ResourceMethod.class);\n\t\tthis.converters = mock(Converters.class);\n\t\tthis.nameProvider = new DefaultParameterNameProvider(new DefaultTypeNameExtractor());\n\n\t\trouter = new DefaultRouter(new NoRoutesConfiguration(), proxifier, new NoTypeFinder(), converters, nameProvider, new JavaEvaluator());\n\t}\n\n\t@Test\n\tpublic void shouldThrowResourceNotFoundExceptionWhenNoRoutesMatchTheURI() throws Exception {\n\t\tRoute route = mock(Route.class);\n\t\twhen(route.canHandle(anyString())).thenReturn(false);\n\n\t\trouter.add(route);\n\t\t\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tfail(\"ResourceNotFoundException is expected\");\n\t\t} catch (ResourceNotFoundException e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void shouldThrowMethodNotAllowedExceptionWhenNoRoutesMatchTheURIWithGivenHttpMethod() throws Exception {\n\t\tRoute route = mock(Route.class);\n\t\twhen(route.canHandle(anyString())).thenReturn(true);\n\t\twhen(route.allowedMethods()).thenReturn(EnumSet.of(HttpMethod.GET));\n\n\t\trouter.add(route);\n\t\t\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tfail(\"MethodNotAllowedException is expected\");\n\t\t} catch (MethodNotAllowedException e) {\n\t\t\tassertThat(e.getAllowedMethods(), is((Set<HttpMethod>)EnumSet.of(HttpMethod.GET)));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void shouldObeyPriorityOfRoutes() throws Exception {\n\t\tRoute first = mock(Route.class);\n\t\tRoute second = mock(Route.class);\n\t\t\n\t\tResourceMethod method2 = second.resourceMethod(request, \"second\");\n\t\t\n\t\trouter.add(second);\n\t\trouter.add(first);\n\n\t\twhen(first.getPriority()).thenReturn(Path.HIGH);\n\t\twhen(second.getPriority()).thenReturn(Path.LOW);\n\t\t\n\t\tEnumSet<HttpMethod> get = EnumSet.of(HttpMethod.GET);\n\t\twhen(first.allowedMethods()).thenReturn(get);\n\t\twhen(second.allowedMethods()).thenReturn(get);\n\t\t\n\t\twhen(first.canHandle(anyString())).thenReturn(false);\n\t\twhen(second.canHandle(anyString())).thenReturn(true);\n\t\t\n\t\tResourceMethod found = router.parse(\"anything\", HttpMethod.GET, request);\n\t\tassertThat(found, is(method2));\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tRoute route = mock(Route.class);\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(route.allowedMethods()).thenReturn(EnumSet.of(HttpMethod.POST));\n\t\twhen(route.resourceMethod(request, \"/clients/add\")).thenReturn(method);\n\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\t\n\t\tassertThat(found, is(equalTo(method)));\n\t\tverify(route, atLeastOnce()).getPriority();\n\t}\n\n\n\t@Test\n\tpublic void passesTheWebMethod() throws SecurityException, NoSuchMethodException {\n\t\tHttpMethod delete = HttpMethod.DELETE;\n\t\tRoute route = mock(Route.class);\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(route.allowedMethods()).thenReturn(EnumSet.of(delete));\n\t\twhen(route.resourceMethod(request, \"/clients/add\")).thenReturn(method);\n\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", delete, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tverify(route, atLeastOnce()).getPriority();\n\t}\n\t\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tRoute route = mock(Route.class);\n\t\tRoute second = mock(Route.class, \"second\");\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(second.canHandle(\"/clients/add\")).thenReturn(true);\n\n\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\twhen(route.allowedMethods()).thenReturn(all);\n\t\twhen(second.allowedMethods()).thenReturn(all);\n\n\t\twhen(route.resourceMethod(request, \"/clients/add\")).thenReturn(method);\n\t\twhen(route.getPriority()).thenReturn(Path.HIGHEST);\n\t\twhen(second.getPriority()).thenReturn(Path.LOWEST);\n\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\t\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t}\n\t@Test\n\tpublic void throwsExceptionIfMoreThanOneUriMatchesWithSamePriority() {\n\t\tRoute route = mock(Route.class);\n\t\tRoute second = mock(Route.class, \"second\");\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(second.canHandle(\"/clients/add\")).thenReturn(true);\n\n\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\twhen(route.allowedMethods()).thenReturn(all);\n\t\twhen(second.allowedMethods()).thenReturn(all);\n\n\t\twhen(route.getPriority()).thenReturn(Path.DEFAULT);\n\t\twhen(second.getPriority()).thenReturn(Path.DEFAULT);\n\t\t\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\t\n\t\ttry {\n\t\t\trouter.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\t\tfail(\"IllegalStateException expected\");\n\t\t} catch (IllegalStateException e) {\n\t\t}\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t}\n\n\tprivate Method method(String methodName, Class<?>... params) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(methodName, params);\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\t\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\t\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t}\n\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Resource\n\tpublic static class MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"starPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t}\n\n\tprivate void registerRulesFor(Class<?> type) {\n\t\tRoutesParser parser = new PathAnnotationRoutesParser(router);\n\t\t\n\t\tResourceClass resourceClass = new DefaultResourceClass(type);\n\t\tList<Route> rules = parser.rulesFor(resourceClass);\n\t\tfor (Route route : rules) {\n\t\t\trouter.add(route);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tregisterRulesFor(InheritanceExample.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"notAnnotated\");\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"customizedPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t}\n}\n\nclass MyCustomResource {\n\tpublic void notAnnotated() {\n\t}\n}\n","lineNo":124}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport java.lang.reflect.Method;\nimport java.util.EnumSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.jmock.Expectations;\nimport org.jmock.Sequence;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.JavassistProxifier;\nimport br.com.caelum.vraptor.proxy.ObjenesisInstanceCreator;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\n/**\n * Those are more likely to be acceptance than unit tests.\n * @author guilherme silveira\n */\npublic class DefaultRouterTest {\n\n    private Proxifier proxifier;\n\tprivate DefaultRouter router;\n\tprivate VRaptorMockery mockery;\n\tprivate VRaptorRequest request;\n\tprivate ResourceMethod method;\n\tprivate Converters converters;\n\tprivate ParameterNameProvider nameProvider;\n\n\t@Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.proxifier = new JavassistProxifier(new ObjenesisInstanceCreator());\n\t\tthis.method = mockery.mock(ResourceMethod.class);\n\t\tthis.converters = mockery.mock(Converters.class);\n\t\tthis.nameProvider = mockery.mock(ParameterNameProvider.class);\n\n\t\tmockery.checking(new Expectations() {{\n\t\t\tignoring(nameProvider);\n\t\t}});\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), proxifier, new NoTypeFinder(), converters, nameProvider, new JavaEvaluator());\n\t}\n\n\t@Test\n\tpublic void shouldThrowResourceNotFoundExceptionWhenNoRoutesMatchTheURI() throws Exception {\n\t\tfinal Route route = mockery.mock(Route.class);\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(route).canHandle(with(any(String.class)));\n\t\t\t\twill(returnValue(false));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\trouter.add(route);\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tAssert.fail(\"ResourceNotFoundException is expected\");\n\t\t} catch (ResourceNotFoundException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\t@Test\n\tpublic void shouldThrowMethodNotAllowedExceptionWhenNoRoutesMatchTheURIWithGivenHttpMethod() throws Exception {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(route).canHandle(with(any(String.class)));\n\t\t\t\twill(returnValue(true));\n\n\t\t\t\tallowing(route).allowedMethods();\n\t\t\t\twill(returnValue(EnumSet.of(HttpMethod.GET)));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\trouter.add(route);\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tAssert.fail(\"MethodNotAllowedException is expected\");\n\t\t} catch (MethodNotAllowedException e) {\n\t\t\tassertThat(e.getAllowedMethods(), is((Set<HttpMethod>)EnumSet.of(HttpMethod.GET)));\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void shouldObeyPriorityOfRoutes() throws Exception {\n\t\tfinal Route first = mockery.mock(Route.class, \"first\");\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tfinal Route third = mockery.mock(Route.class, \"third\");\n\n\t\tfinal Sequence handle = mockery.sequence(\"invocation\");\n\t\tfinal Sequence allowed = mockery.sequence(\"allowed\");\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(first).getPriority(); will(returnValue(Path.HIGH));\n\t\t\t\tallowing(second).getPriority(); will(returnValue(Path.DEFAULT));\n\t\t\t\tallowing(third).getPriority(); will(returnValue(Path.LOW));\n\n\t\t\t\tallowing(first).canHandle(with(any(String.class))); will(returnValue(false));\n\t\t\t\tinSequence(handle);\n\t\t\t\tallowing(second).canHandle(with(any(String.class))); will(returnValue(false));\n\t\t\t\tinSequence(handle);\n\t\t\t\tallowing(third).canHandle(with(any(String.class))); will(returnValue(true));\n\t\t\t\tinSequence(handle);\n\n\t\t\t\tEnumSet<HttpMethod> get = EnumSet.of(HttpMethod.GET);\n\n\t\t\t\tallowing(first).allowedMethods(); will(returnValue(get));\n\t\t\t\tinSequence(allowed);\n\t\t\t\tallowing(second).allowedMethods(); will(returnValue(get));\n\t\t\t\tinSequence(allowed);\n\t\t\t\tallowing(third).allowedMethods(); will(returnValue(get));\n\t\t\t\tinSequence(allowed);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trouter.add(third);\n\t\trouter.add(first);\n\t\trouter.add(second);\n\n\t\trouter.parse(\"anything\", HttpMethod.GET, request);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\");\n\t\t\twill(returnValue(true));\n\n\t\t\tallowing(route).allowedMethods();\n\t\t\twill(returnValue(EnumSet.of(HttpMethod.POST)));\n\n\t\t\tallowing(route).resourceMethod(request, \"/clients/add\");\n\t\t\twill(returnValue(method));\n\n\t\t\tallowing(route).getPriority();\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t@Test\n\tpublic void passesTheWebMethod() throws SecurityException, NoSuchMethodException {\n\t\tfinal HttpMethod delete = HttpMethod.DELETE;\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\");\n\t\t\twill(returnValue(true));\n\n\t\t\tallowing(route).allowedMethods();\n\t\t\twill(returnValue(EnumSet.of(delete)));\n\n\t\t\tallowing(route).resourceMethod(request, \"/clients/add\");\n\t\t\twill(returnValue(method));\n\n\t\t\tallowing(route).getPriority();\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", delete, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\"); will(returnValue(true));\n\t\t\tallowing(second).canHandle(\"/clients/add\");\twill(returnValue(true));\n\n\t\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\t\tallowing(route).allowedMethods(); will(returnValue(all));\n\t\t\tallowing(second).allowedMethods();\twill(returnValue(all));\n\n\t\t\tone(route).resourceMethod(request, \"/clients/add\");\n\t\t\twill(returnValue(method));\n\n\t\t\tallowing(route).getPriority(); will(returnValue(Path.HIGHEST));\n\t\t\tallowing(second).getPriority(); will(returnValue(Path.LOWEST));\n\t\t}});\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void throwsExceptionIfMoreThanOneUriMatchesWithSamePriority() {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\"); will(returnValue(true));\n\t\t\tallowing(second).canHandle(\"/clients/add\");\twill(returnValue(true));\n\n\t\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\t\tallowing(route).allowedMethods(); will(returnValue(all));\n\t\t\tallowing(second).allowedMethods();\twill(returnValue(all));\n\n\t\t\tallowing(route).getPriority(); will(returnValue(Path.DEFAULT));\n\t\t\tallowing(second).getPriority(); will(returnValue(Path.DEFAULT));\n\t\t}});\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\ttry {\n\t\t\trouter.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\t\tAssert.fail(\"IllegalStateException expected\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\n\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\tprivate Method method(String methodName, Class<?>... params) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(methodName, params);\n\t}\n\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Resource\n\tpublic static class MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"starPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\tprivate void registerRulesFor(Class<?> type) {\n\t\tRoutesParser parser = new PathAnnotationRoutesParser(router);\n\n\t\tList<Route> rules = parser.rulesFor(mockery.resource(type));\n\t\tfor (Route route : rules) {\n\t\t\trouter.add(route);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tregisterRulesFor(InheritanceExample.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"notAnnotated\");\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"customizedPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\t@Deprecated\n\t@Ignore\n\tpublic void canAccessGenericTypeAndMethodRoute() throws NoSuchMethodException, ClassNotFoundException {\n\t\tClass.forName(DefaultRouterTest.class.getPackage().getName() + \".MyCustomResource\");\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n//\t\t\t\trouteFor(\"--{webLogic}--{webMethod}\").is(type(DefaultRouterTest.class.getPackage().getName() + \".{webLogic}\"), method(\"{webMethod}\"));\n\t\t\t}\n\t\t};\n\t\tResourceMethod resourceMethod = router.parse(\"--\" + MyCustomResource.class.getSimpleName() + \"--notAnnotated\", HttpMethod.GET, request);\n\t\tfinal Method javaMethodFound = resourceMethod.getMethod();\n\t\tassertThat(javaMethodFound, is(equalTo(MyCustomResource.class.getDeclaredMethod(\"notAnnotated\"))));\n\t\tString url = router.urlFor(MyCustomResource.class, javaMethodFound, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.GET, request).getMethod(), is(equalTo(javaMethodFound)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\nclass MyCustomResource {\n\tpublic void notAnnotated() {\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Mockito.atLeastOnce;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\nimport java.util.EnumSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.http.DefaultParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.DefaultTypeNameExtractor;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.JavassistProxifier;\nimport br.com.caelum.vraptor.proxy.ObjenesisInstanceCreator;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.DefaultResourceClass;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceClass;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Those are more likely to be acceptance than unit tests.\n * @author guilherme silveira\n */\npublic class DefaultRouterTest {\n\n    private Proxifier proxifier;\n\tprivate DefaultRouter router;\n\tprivate VRaptorRequest request;\n\tprivate ResourceMethod method;\n\tprivate Converters converters;\n\tprivate ParameterNameProvider nameProvider;\n\n\t@Before\n\tpublic void setup() {\n\t\tthis.request = new VRaptorRequest(mock(HttpServletRequest.class));\n\t\tthis.proxifier = new JavassistProxifier(new ObjenesisInstanceCreator());\n\t\tthis.method = mock(ResourceMethod.class);\n\t\tthis.converters = mock(Converters.class);\n\t\tthis.nameProvider = new DefaultParameterNameProvider(new DefaultTypeNameExtractor());\n\n\t\trouter = new DefaultRouter(new NoRoutesConfiguration(), proxifier, new NoTypeFinder(), converters, nameProvider, new JavaEvaluator());\n\t}\n\n\t@Test\n\tpublic void shouldThrowResourceNotFoundExceptionWhenNoRoutesMatchTheURI() throws Exception {\n\t\tRoute route = mock(Route.class);\n\t\twhen(route.canHandle(anyString())).thenReturn(false);\n\n\t\trouter.add(route);\n\t\t\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tfail(\"ResourceNotFoundException is expected\");\n\t\t} catch (ResourceNotFoundException e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void shouldThrowMethodNotAllowedExceptionWhenNoRoutesMatchTheURIWithGivenHttpMethod() throws Exception {\n\t\tRoute route = mock(Route.class);\n\t\twhen(route.canHandle(anyString())).thenReturn(true);\n\t\twhen(route.allowedMethods()).thenReturn(EnumSet.of(HttpMethod.GET));\n\n\t\trouter.add(route);\n\t\t\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tfail(\"MethodNotAllowedException is expected\");\n\t\t} catch (MethodNotAllowedException e) {\n\t\t\tassertThat(e.getAllowedMethods(), is((Set<HttpMethod>)EnumSet.of(HttpMethod.GET)));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void shouldObeyPriorityOfRoutes() throws Exception {\n\t\tRoute first = mock(Route.class);\n\t\tRoute second = mock(Route.class);\n\t\t\n\t\tResourceMethod method2 = second.resourceMethod(request, \"second\");\n\t\t\n\t\trouter.add(second);\n\t\trouter.add(first);\n\n\t\twhen(first.getPriority()).thenReturn(Path.HIGH);\n\t\twhen(second.getPriority()).thenReturn(Path.LOW);\n\t\t\n\t\tEnumSet<HttpMethod> get = EnumSet.of(HttpMethod.GET);\n\t\twhen(first.allowedMethods()).thenReturn(get);\n\t\twhen(second.allowedMethods()).thenReturn(get);\n\t\t\n\t\twhen(first.canHandle(anyString())).thenReturn(false);\n\t\twhen(second.canHandle(anyString())).thenReturn(true);\n\t\t\n\t\tResourceMethod found = router.parse(\"anything\", HttpMethod.GET, request);\n\t\tassertThat(found, is(method2));\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tRoute route = mock(Route.class);\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(route.allowedMethods()).thenReturn(EnumSet.of(HttpMethod.POST));\n\t\twhen(route.resourceMethod(request, \"/clients/add\")).thenReturn(method);\n\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\t\n\t\tassertThat(found, is(equalTo(method)));\n\t\tverify(route, atLeastOnce()).getPriority();\n\t}\n\n\n\t@Test\n\tpublic void passesTheWebMethod() throws SecurityException, NoSuchMethodException {\n\t\tHttpMethod delete = HttpMethod.DELETE;\n\t\tRoute route = mock(Route.class);\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(route.allowedMethods()).thenReturn(EnumSet.of(delete));\n\t\twhen(route.resourceMethod(request, \"/clients/add\")).thenReturn(method);\n\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", delete, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tverify(route, atLeastOnce()).getPriority();\n\t}\n\t\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tRoute route = mock(Route.class);\n\t\tRoute second = mock(Route.class, \"second\");\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(second.canHandle(\"/clients/add\")).thenReturn(true);\n\n\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\twhen(route.allowedMethods()).thenReturn(all);\n\t\twhen(second.allowedMethods()).thenReturn(all);\n\n\t\twhen(route.resourceMethod(request, \"/clients/add\")).thenReturn(method);\n\t\twhen(route.getPriority()).thenReturn(Path.HIGHEST);\n\t\twhen(second.getPriority()).thenReturn(Path.LOWEST);\n\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\t\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t}\n\t@Test\n\tpublic void throwsExceptionIfMoreThanOneUriMatchesWithSamePriority() {\n\t\tRoute route = mock(Route.class);\n\t\tRoute second = mock(Route.class, \"second\");\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(second.canHandle(\"/clients/add\")).thenReturn(true);\n\n\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\twhen(route.allowedMethods()).thenReturn(all);\n\t\twhen(second.allowedMethods()).thenReturn(all);\n\n\t\twhen(route.getPriority()).thenReturn(Path.DEFAULT);\n\t\twhen(second.getPriority()).thenReturn(Path.DEFAULT);\n\t\t\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\t\n\t\ttry {\n\t\t\trouter.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\t\tfail(\"IllegalStateException expected\");\n\t\t} catch (IllegalStateException e) {\n\t\t}\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t}\n\n\tprivate Method method(String methodName, Class<?>... params) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(methodName, params);\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\t\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\t\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t}\n\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Resource\n\tpublic static class MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"starPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t}\n\n\tprivate void registerRulesFor(Class<?> type) {\n\t\tRoutesParser parser = new PathAnnotationRoutesParser(router);\n\t\t\n\t\tResourceClass resourceClass = new DefaultResourceClass(type);\n\t\tList<Route> rules = parser.rulesFor(resourceClass);\n\t\tfor (Route route : rules) {\n\t\t\trouter.add(route);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tregisterRulesFor(InheritanceExample.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"notAnnotated\");\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"customizedPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t}\n}\n\nclass MyCustomResource {\n\tpublic void notAnnotated() {\n\t}\n}\n","lineNo":174}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport java.lang.reflect.Method;\nimport java.util.EnumSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.jmock.Expectations;\nimport org.jmock.Sequence;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.JavassistProxifier;\nimport br.com.caelum.vraptor.proxy.ObjenesisInstanceCreator;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\n/**\n * Those are more likely to be acceptance than unit tests.\n * @author guilherme silveira\n */\npublic class DefaultRouterTest {\n\n    private Proxifier proxifier;\n\tprivate DefaultRouter router;\n\tprivate VRaptorMockery mockery;\n\tprivate VRaptorRequest request;\n\tprivate ResourceMethod method;\n\tprivate Converters converters;\n\tprivate ParameterNameProvider nameProvider;\n\n\t@Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.proxifier = new JavassistProxifier(new ObjenesisInstanceCreator());\n\t\tthis.method = mockery.mock(ResourceMethod.class);\n\t\tthis.converters = mockery.mock(Converters.class);\n\t\tthis.nameProvider = mockery.mock(ParameterNameProvider.class);\n\n\t\tmockery.checking(new Expectations() {{\n\t\t\tignoring(nameProvider);\n\t\t}});\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), proxifier, new NoTypeFinder(), converters, nameProvider, new JavaEvaluator());\n\t}\n\n\t@Test\n\tpublic void shouldThrowResourceNotFoundExceptionWhenNoRoutesMatchTheURI() throws Exception {\n\t\tfinal Route route = mockery.mock(Route.class);\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(route).canHandle(with(any(String.class)));\n\t\t\t\twill(returnValue(false));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\trouter.add(route);\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tAssert.fail(\"ResourceNotFoundException is expected\");\n\t\t} catch (ResourceNotFoundException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\t@Test\n\tpublic void shouldThrowMethodNotAllowedExceptionWhenNoRoutesMatchTheURIWithGivenHttpMethod() throws Exception {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(route).canHandle(with(any(String.class)));\n\t\t\t\twill(returnValue(true));\n\n\t\t\t\tallowing(route).allowedMethods();\n\t\t\t\twill(returnValue(EnumSet.of(HttpMethod.GET)));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\trouter.add(route);\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tAssert.fail(\"MethodNotAllowedException is expected\");\n\t\t} catch (MethodNotAllowedException e) {\n\t\t\tassertThat(e.getAllowedMethods(), is((Set<HttpMethod>)EnumSet.of(HttpMethod.GET)));\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\n\t@Test\n\tpublic void shouldObeyPriorityOfRoutes() throws Exception {\n\t\tfinal Route first = mockery.mock(Route.class, \"first\");\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tfinal Route third = mockery.mock(Route.class, \"third\");\n\n\t\tfinal Sequence handle = mockery.sequence(\"invocation\");\n\t\tfinal Sequence allowed = mockery.sequence(\"allowed\");\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(first).getPriority(); will(returnValue(Path.HIGH));\n\t\t\t\tallowing(second).getPriority(); will(returnValue(Path.DEFAULT));\n\t\t\t\tallowing(third).getPriority(); will(returnValue(Path.LOW));\n\n\t\t\t\tallowing(first).canHandle(with(any(String.class))); will(returnValue(false));\n\t\t\t\tinSequence(handle);\n\t\t\t\tallowing(second).canHandle(with(any(String.class))); will(returnValue(false));\n\t\t\t\tinSequence(handle);\n\t\t\t\tallowing(third).canHandle(with(any(String.class))); will(returnValue(true));\n\t\t\t\tinSequence(handle);\n\n\t\t\t\tEnumSet<HttpMethod> get = EnumSet.of(HttpMethod.GET);\n\n\t\t\t\tallowing(first).allowedMethods(); will(returnValue(get));\n\t\t\t\tinSequence(allowed);\n\t\t\t\tallowing(second).allowedMethods(); will(returnValue(get));\n\t\t\t\tinSequence(allowed);\n\t\t\t\tallowing(third).allowedMethods(); will(returnValue(get));\n\t\t\t\tinSequence(allowed);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trouter.add(third);\n\t\trouter.add(first);\n\t\trouter.add(second);\n\n\t\trouter.parse(\"anything\", HttpMethod.GET, request);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\");\n\t\t\twill(returnValue(true));\n\n\t\t\tallowing(route).allowedMethods();\n\t\t\twill(returnValue(EnumSet.of(HttpMethod.POST)));\n\n\t\t\tallowing(route).resourceMethod(request, \"/clients/add\");\n\t\t\twill(returnValue(method));\n\n\t\t\tallowing(route).getPriority();\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t@Test\n\tpublic void passesTheWebMethod() throws SecurityException, NoSuchMethodException {\n\t\tfinal HttpMethod delete = HttpMethod.DELETE;\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\");\n\t\t\twill(returnValue(true));\n\n\t\t\tallowing(route).allowedMethods();\n\t\t\twill(returnValue(EnumSet.of(delete)));\n\n\t\t\tallowing(route).resourceMethod(request, \"/clients/add\");\n\t\t\twill(returnValue(method));\n\n\t\t\tallowing(route).getPriority();\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", delete, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\"); will(returnValue(true));\n\t\t\tallowing(second).canHandle(\"/clients/add\");\twill(returnValue(true));\n\n\t\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\t\tallowing(route).allowedMethods(); will(returnValue(all));\n\t\t\tallowing(second).allowedMethods();\twill(returnValue(all));\n\n\t\t\tone(route).resourceMethod(request, \"/clients/add\");\n\t\t\twill(returnValue(method));\n\n\t\t\tallowing(route).getPriority(); will(returnValue(Path.HIGHEST));\n\t\t\tallowing(second).getPriority(); will(returnValue(Path.LOWEST));\n\t\t}});\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void throwsExceptionIfMoreThanOneUriMatchesWithSamePriority() {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tmockery.checking(new Expectations() {{\n\t\t\tallowing(route).canHandle(\"/clients/add\"); will(returnValue(true));\n\t\t\tallowing(second).canHandle(\"/clients/add\");\twill(returnValue(true));\n\n\t\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\t\tallowing(route).allowedMethods(); will(returnValue(all));\n\t\t\tallowing(second).allowedMethods();\twill(returnValue(all));\n\n\t\t\tallowing(route).getPriority(); will(returnValue(Path.DEFAULT));\n\t\t\tallowing(second).getPriority(); will(returnValue(Path.DEFAULT));\n\t\t}});\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\ttry {\n\t\t\trouter.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\t\tAssert.fail(\"IllegalStateException expected\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\n\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\tprivate Method method(String methodName, Class<?>... params) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(methodName, params);\n\t}\n\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Resource\n\tpublic static class MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"starPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\tprivate void registerRulesFor(Class<?> type) {\n\t\tRoutesParser parser = new PathAnnotationRoutesParser(router);\n\n\t\tList<Route> rules = parser.rulesFor(mockery.resource(type));\n\t\tfor (Route route : rules) {\n\t\t\trouter.add(route);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tregisterRulesFor(InheritanceExample.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"notAnnotated\");\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"customizedPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\t@Deprecated\n\t@Ignore\n\tpublic void canAccessGenericTypeAndMethodRoute() throws NoSuchMethodException, ClassNotFoundException {\n\t\tClass.forName(DefaultRouterTest.class.getPackage().getName() + \".MyCustomResource\");\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n//\t\t\t\trouteFor(\"--{webLogic}--{webMethod}\").is(type(DefaultRouterTest.class.getPackage().getName() + \".{webLogic}\"), method(\"{webMethod}\"));\n\t\t\t}\n\t\t};\n\t\tResourceMethod resourceMethod = router.parse(\"--\" + MyCustomResource.class.getSimpleName() + \"--notAnnotated\", HttpMethod.GET, request);\n\t\tfinal Method javaMethodFound = resourceMethod.getMethod();\n\t\tassertThat(javaMethodFound, is(equalTo(MyCustomResource.class.getDeclaredMethod(\"notAnnotated\"))));\n\t\tString url = router.urlFor(MyCustomResource.class, javaMethodFound, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.GET, request).getMethod(), is(equalTo(javaMethodFound)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\nclass MyCustomResource {\n\tpublic void notAnnotated() {\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Mockito.atLeastOnce;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\nimport java.util.EnumSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.http.DefaultParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.DefaultTypeNameExtractor;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.JavassistProxifier;\nimport br.com.caelum.vraptor.proxy.ObjenesisInstanceCreator;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.DefaultResourceClass;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceClass;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Those are more likely to be acceptance than unit tests.\n * @author guilherme silveira\n */\npublic class DefaultRouterTest {\n\n    private Proxifier proxifier;\n\tprivate DefaultRouter router;\n\tprivate VRaptorRequest request;\n\tprivate ResourceMethod method;\n\tprivate Converters converters;\n\tprivate ParameterNameProvider nameProvider;\n\n\t@Before\n\tpublic void setup() {\n\t\tthis.request = new VRaptorRequest(mock(HttpServletRequest.class));\n\t\tthis.proxifier = new JavassistProxifier(new ObjenesisInstanceCreator());\n\t\tthis.method = mock(ResourceMethod.class);\n\t\tthis.converters = mock(Converters.class);\n\t\tthis.nameProvider = new DefaultParameterNameProvider(new DefaultTypeNameExtractor());\n\n\t\trouter = new DefaultRouter(new NoRoutesConfiguration(), proxifier, new NoTypeFinder(), converters, nameProvider, new JavaEvaluator());\n\t}\n\n\t@Test\n\tpublic void shouldThrowResourceNotFoundExceptionWhenNoRoutesMatchTheURI() throws Exception {\n\t\tRoute route = mock(Route.class);\n\t\twhen(route.canHandle(anyString())).thenReturn(false);\n\n\t\trouter.add(route);\n\t\t\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tfail(\"ResourceNotFoundException is expected\");\n\t\t} catch (ResourceNotFoundException e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void shouldThrowMethodNotAllowedExceptionWhenNoRoutesMatchTheURIWithGivenHttpMethod() throws Exception {\n\t\tRoute route = mock(Route.class);\n\t\twhen(route.canHandle(anyString())).thenReturn(true);\n\t\twhen(route.allowedMethods()).thenReturn(EnumSet.of(HttpMethod.GET));\n\n\t\trouter.add(route);\n\t\t\n\t\ttry {\n\t\t\trouter.parse(\"any uri\", HttpMethod.DELETE, request);\n\t\t\tfail(\"MethodNotAllowedException is expected\");\n\t\t} catch (MethodNotAllowedException e) {\n\t\t\tassertThat(e.getAllowedMethods(), is((Set<HttpMethod>)EnumSet.of(HttpMethod.GET)));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void shouldObeyPriorityOfRoutes() throws Exception {\n\t\tRoute first = mock(Route.class);\n\t\tRoute second = mock(Route.class);\n\t\t\n\t\tResourceMethod method2 = second.resourceMethod(request, \"second\");\n\t\t\n\t\trouter.add(second);\n\t\trouter.add(first);\n\n\t\twhen(first.getPriority()).thenReturn(Path.HIGH);\n\t\twhen(second.getPriority()).thenReturn(Path.LOW);\n\t\t\n\t\tEnumSet<HttpMethod> get = EnumSet.of(HttpMethod.GET);\n\t\twhen(first.allowedMethods()).thenReturn(get);\n\t\twhen(second.allowedMethods()).thenReturn(get);\n\t\t\n\t\twhen(first.canHandle(anyString())).thenReturn(false);\n\t\twhen(second.canHandle(anyString())).thenReturn(true);\n\t\t\n\t\tResourceMethod found = router.parse(\"anything\", HttpMethod.GET, request);\n\t\tassertThat(found, is(method2));\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tRoute route = mock(Route.class);\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(route.allowedMethods()).thenReturn(EnumSet.of(HttpMethod.POST));\n\t\twhen(route.resourceMethod(request, \"/clients/add\")).thenReturn(method);\n\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\t\n\t\tassertThat(found, is(equalTo(method)));\n\t\tverify(route, atLeastOnce()).getPriority();\n\t}\n\n\n\t@Test\n\tpublic void passesTheWebMethod() throws SecurityException, NoSuchMethodException {\n\t\tHttpMethod delete = HttpMethod.DELETE;\n\t\tRoute route = mock(Route.class);\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(route.allowedMethods()).thenReturn(EnumSet.of(delete));\n\t\twhen(route.resourceMethod(request, \"/clients/add\")).thenReturn(method);\n\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", delete, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tverify(route, atLeastOnce()).getPriority();\n\t}\n\t\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tRoute route = mock(Route.class);\n\t\tRoute second = mock(Route.class, \"second\");\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(second.canHandle(\"/clients/add\")).thenReturn(true);\n\n\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\twhen(route.allowedMethods()).thenReturn(all);\n\t\twhen(second.allowedMethods()).thenReturn(all);\n\n\t\twhen(route.resourceMethod(request, \"/clients/add\")).thenReturn(method);\n\t\twhen(route.getPriority()).thenReturn(Path.HIGHEST);\n\t\twhen(second.getPriority()).thenReturn(Path.LOWEST);\n\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\t\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t}\n\t@Test\n\tpublic void throwsExceptionIfMoreThanOneUriMatchesWithSamePriority() {\n\t\tRoute route = mock(Route.class);\n\t\tRoute second = mock(Route.class, \"second\");\n\t\t\n\t\twhen(route.canHandle(\"/clients/add\")).thenReturn(true);\n\t\twhen(second.canHandle(\"/clients/add\")).thenReturn(true);\n\n\t\tEnumSet<HttpMethod> all = EnumSet.allOf(HttpMethod.class);\n\n\t\twhen(route.allowedMethods()).thenReturn(all);\n\t\twhen(second.allowedMethods()).thenReturn(all);\n\n\t\twhen(route.getPriority()).thenReturn(Path.DEFAULT);\n\t\twhen(second.getPriority()).thenReturn(Path.DEFAULT);\n\t\t\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\t\n\t\ttry {\n\t\t\trouter.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\t\tfail(\"IllegalStateException expected\");\n\t\t} catch (IllegalStateException e) {\n\t\t}\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t}\n\n\tprivate Method method(String methodName, Class<?>... params) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(methodName, params);\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\t\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\t\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t}\n\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Resource\n\tpublic static class MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"starPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t}\n\n\tprivate void registerRulesFor(Class<?> type) {\n\t\tRoutesParser parser = new PathAnnotationRoutesParser(router);\n\t\t\n\t\tResourceClass resourceClass = new DefaultResourceClass(type);\n\t\tList<Route> rules = parser.rulesFor(resourceClass);\n\t\tfor (Route route : rules) {\n\t\t\trouter.add(route);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tregisterRulesFor(InheritanceExample.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"notAnnotated\");\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tregisterRulesFor(MyResource.class);\n\t\tfinal Method method = MyResource.class.getMethod(\"customizedPath\");\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t}\n}\n\nclass MyCustomResource {\n\tpublic void notAnnotated() {\n\t}\n}\n","lineNo":197}
{"Smelly Sample":"package br.com.caelum.vraptor.view;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\nimport static br.com.caelum.vraptor.view.Results.page;\n\nimport org.jmock.Expectations;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.route.ResourceNotFoundException;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class DefaultRefererResultTest {\n\n\n\tprivate VRaptorMockery mockery;\n\tprivate Result result;\n\tprivate MutableRequest request;\n\tprivate Router router;\n\tprivate DefaultRefererResult refererResult;\n\tprivate Localization localization;\n\tprivate ParametersProvider provider;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tmockery = new VRaptorMockery();\n\t\tresult = mockery.mock(Result.class);\n\t\trequest = mockery.mock(MutableRequest.class);\n\t\trouter = mockery.mock(Router.class);\n\t\tprovider = mockery.mock(ParametersProvider.class);\n\t\tlocalization = mockery.mock(Localization.class);\n\t\trefererResult = new DefaultRefererResult(result, request, router, provider, localization);\n\t}\n\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnForward() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\trefererResult.forward();\n\t\t\tAssert.fail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnRedirect() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\trefererResult.redirect();\n\t\t\tAssert.fail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldForwardToPage() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(throwException(new ResourceNotFoundException()));\n\n\t\t\t\tPageResult page = mockery.mock(PageResult.class);\n\n\t\t\t\tone(result).use(page());\n\t\t\t\twill(returnValue(page));\n\n\t\t\t\tone(page).forwardTo(\"/no-controller\");\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.forward();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldRedirectToPage() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(throwException(new ResourceNotFoundException()));\n\n\t\t\t\tPageResult page = mockery.mock(PageResult.class);\n\n\t\t\t\tone(result).use(page());\n\t\t\t\twill(returnValue(page));\n\n\t\t\t\tone(page).redirectTo(\"/no-controller\");\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.redirect();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\tpublic static class RefererController {\n\t\tpublic void index() {\n\n\t\t}\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldRedirectToIt() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tResourceMethod method = mockery.methodFor(RefererController.class, \"index\");\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(returnValue(method));\n\n\t\t\t\tLogicResult logic = mockery.mock(LogicResult.class);\n\n\t\t\t\tone(result).use(logic());\n\t\t\t\twill(returnValue(logic));\n\n\t\t\t\tone(logic).redirectTo(RefererController.class);\n\t\t\t\twill(returnValue(new RefererController()));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.redirect();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldForwardToIt() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tResourceMethod method = mockery.methodFor(RefererController.class, \"index\");\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(returnValue(method));\n\n\t\t\t\tLogicResult logic = mockery.mock(LogicResult.class);\n\n\t\t\t\tone(result).use(logic());\n\t\t\t\twill(returnValue(logic));\n\n\t\t\t\tone(logic).forwardTo(RefererController.class);\n\t\t\t\twill(returnValue(new RefererController()));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.forward();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.view;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\nimport static br.com.caelum.vraptor.view.Results.page;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.route.ResourceNotFoundException;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DefaultRefererResultTest {\n\n\tprivate @Mock Result result;\n\tprivate @Mock MutableRequest request;\n\tprivate @Mock Router router;\n\tprivate @Mock Localization localization;\n\tprivate @Mock ParametersProvider provider;\n\tprivate DefaultRefererResult refererResult;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\trefererResult = new DefaultRefererResult(result, request, router, provider, localization);\n\t}\n\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnForward() throws Exception {\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(null);\n\t\t\n\t\ttry {\n\t\t\trefererResult.forward();\n\t\t\tfail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnRedirect() throws Exception {\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(null);\n\n\t\ttry {\n\t\t\trefererResult.redirect();\n\t\t\tfail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldForwardToPage() throws Exception {\n\t\tPageResult page = mock(PageResult.class);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenThrow(new ResourceNotFoundException());\n\t\tdoReturn(page).when(result).use(page());\n\n\t\trefererResult.forward();\n\t\t\n\t\tverify(page).forwardTo(\"/no-controller\");\n\t}\n\t\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldRedirectToPage() throws Exception {\n\t\tPageResult page = mock(PageResult.class);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenThrow(new ResourceNotFoundException());\n\t\tdoReturn(page).when(result).use(page());\n\t\t\n\t\trefererResult.redirect();\n\t\t\n\t\tverify(page).redirectTo(\"/no-controller\");\n\t}\n\t\n\tpublic static class RefererController {\n\t\tpublic void index() {\n\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldRedirectToIt() throws Exception {\n\t\tLogicResult logic = mock(LogicResult.class);\n\n\t\tMethod index = RefererController.class.getMethod(\"index\");\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(RefererController.class, index);\n\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenReturn(method);\n\t\tdoReturn(logic).when(result).use(logic());\n\t\twhen(logic.redirectTo(RefererController.class)).thenReturn(new RefererController());\n\n\t\trefererResult.redirect();\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldForwardToIt() throws Exception {\n\t\tLogicResult logic = mock(LogicResult.class);\n\t\t\n\t\tMethod index = RefererController.class.getMethod(\"index\");\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(RefererController.class, index);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenReturn(method);\n\t\tdoReturn(logic).when(result).use(logic());\n\t\twhen(logic.forwardTo(RefererController.class)).thenReturn(new RefererController());\n\t\t\n\t\trefererResult.forward();\n\t}\n}\n","lineNo":69}
{"Smelly Sample":"package br.com.caelum.vraptor.view;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\nimport static br.com.caelum.vraptor.view.Results.page;\n\nimport org.jmock.Expectations;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.route.ResourceNotFoundException;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class DefaultRefererResultTest {\n\n\n\tprivate VRaptorMockery mockery;\n\tprivate Result result;\n\tprivate MutableRequest request;\n\tprivate Router router;\n\tprivate DefaultRefererResult refererResult;\n\tprivate Localization localization;\n\tprivate ParametersProvider provider;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tmockery = new VRaptorMockery();\n\t\tresult = mockery.mock(Result.class);\n\t\trequest = mockery.mock(MutableRequest.class);\n\t\trouter = mockery.mock(Router.class);\n\t\tprovider = mockery.mock(ParametersProvider.class);\n\t\tlocalization = mockery.mock(Localization.class);\n\t\trefererResult = new DefaultRefererResult(result, request, router, provider, localization);\n\t}\n\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnForward() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\trefererResult.forward();\n\t\t\tAssert.fail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnRedirect() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\trefererResult.redirect();\n\t\t\tAssert.fail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldForwardToPage() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(throwException(new ResourceNotFoundException()));\n\n\t\t\t\tPageResult page = mockery.mock(PageResult.class);\n\n\t\t\t\tone(result).use(page());\n\t\t\t\twill(returnValue(page));\n\n\t\t\t\tone(page).forwardTo(\"/no-controller\");\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.forward();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldRedirectToPage() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(throwException(new ResourceNotFoundException()));\n\n\t\t\t\tPageResult page = mockery.mock(PageResult.class);\n\n\t\t\t\tone(result).use(page());\n\t\t\t\twill(returnValue(page));\n\n\t\t\t\tone(page).redirectTo(\"/no-controller\");\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.redirect();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\tpublic static class RefererController {\n\t\tpublic void index() {\n\n\t\t}\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldRedirectToIt() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tResourceMethod method = mockery.methodFor(RefererController.class, \"index\");\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(returnValue(method));\n\n\t\t\t\tLogicResult logic = mockery.mock(LogicResult.class);\n\n\t\t\t\tone(result).use(logic());\n\t\t\t\twill(returnValue(logic));\n\n\t\t\t\tone(logic).redirectTo(RefererController.class);\n\t\t\t\twill(returnValue(new RefererController()));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.redirect();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldForwardToIt() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tResourceMethod method = mockery.methodFor(RefererController.class, \"index\");\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(returnValue(method));\n\n\t\t\t\tLogicResult logic = mockery.mock(LogicResult.class);\n\n\t\t\t\tone(result).use(logic());\n\t\t\t\twill(returnValue(logic));\n\n\t\t\t\tone(logic).forwardTo(RefererController.class);\n\t\t\t\twill(returnValue(new RefererController()));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.forward();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.view;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\nimport static br.com.caelum.vraptor.view.Results.page;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.route.ResourceNotFoundException;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DefaultRefererResultTest {\n\n\tprivate @Mock Result result;\n\tprivate @Mock MutableRequest request;\n\tprivate @Mock Router router;\n\tprivate @Mock Localization localization;\n\tprivate @Mock ParametersProvider provider;\n\tprivate DefaultRefererResult refererResult;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\trefererResult = new DefaultRefererResult(result, request, router, provider, localization);\n\t}\n\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnForward() throws Exception {\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(null);\n\t\t\n\t\ttry {\n\t\t\trefererResult.forward();\n\t\t\tfail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnRedirect() throws Exception {\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(null);\n\n\t\ttry {\n\t\t\trefererResult.redirect();\n\t\t\tfail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldForwardToPage() throws Exception {\n\t\tPageResult page = mock(PageResult.class);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenThrow(new ResourceNotFoundException());\n\t\tdoReturn(page).when(result).use(page());\n\n\t\trefererResult.forward();\n\t\t\n\t\tverify(page).forwardTo(\"/no-controller\");\n\t}\n\t\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldRedirectToPage() throws Exception {\n\t\tPageResult page = mock(PageResult.class);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenThrow(new ResourceNotFoundException());\n\t\tdoReturn(page).when(result).use(page());\n\t\t\n\t\trefererResult.redirect();\n\t\t\n\t\tverify(page).redirectTo(\"/no-controller\");\n\t}\n\t\n\tpublic static class RefererController {\n\t\tpublic void index() {\n\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldRedirectToIt() throws Exception {\n\t\tLogicResult logic = mock(LogicResult.class);\n\n\t\tMethod index = RefererController.class.getMethod(\"index\");\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(RefererController.class, index);\n\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenReturn(method);\n\t\tdoReturn(logic).when(result).use(logic());\n\t\twhen(logic.redirectTo(RefererController.class)).thenReturn(new RefererController());\n\n\t\trefererResult.redirect();\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldForwardToIt() throws Exception {\n\t\tLogicResult logic = mock(LogicResult.class);\n\t\t\n\t\tMethod index = RefererController.class.getMethod(\"index\");\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(RefererController.class, index);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenReturn(method);\n\t\tdoReturn(logic).when(result).use(logic());\n\t\twhen(logic.forwardTo(RefererController.class)).thenReturn(new RefererController());\n\t\t\n\t\trefererResult.forward();\n\t}\n}\n","lineNo":83}
{"Smelly Sample":"package br.com.caelum.vraptor.view;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\nimport static br.com.caelum.vraptor.view.Results.page;\n\nimport org.jmock.Expectations;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.route.ResourceNotFoundException;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class DefaultRefererResultTest {\n\n\n\tprivate VRaptorMockery mockery;\n\tprivate Result result;\n\tprivate MutableRequest request;\n\tprivate Router router;\n\tprivate DefaultRefererResult refererResult;\n\tprivate Localization localization;\n\tprivate ParametersProvider provider;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tmockery = new VRaptorMockery();\n\t\tresult = mockery.mock(Result.class);\n\t\trequest = mockery.mock(MutableRequest.class);\n\t\trouter = mockery.mock(Router.class);\n\t\tprovider = mockery.mock(ParametersProvider.class);\n\t\tlocalization = mockery.mock(Localization.class);\n\t\trefererResult = new DefaultRefererResult(result, request, router, provider, localization);\n\t}\n\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnForward() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\trefererResult.forward();\n\t\t\tAssert.fail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnRedirect() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\trefererResult.redirect();\n\t\t\tAssert.fail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldForwardToPage() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(throwException(new ResourceNotFoundException()));\n\n\t\t\t\tPageResult page = mockery.mock(PageResult.class);\n\n\t\t\t\tone(result).use(page());\n\t\t\t\twill(returnValue(page));\n\n\t\t\t\tone(page).forwardTo(\"/no-controller\");\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.forward();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldRedirectToPage() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(throwException(new ResourceNotFoundException()));\n\n\t\t\t\tPageResult page = mockery.mock(PageResult.class);\n\n\t\t\t\tone(result).use(page());\n\t\t\t\twill(returnValue(page));\n\n\t\t\t\tone(page).redirectTo(\"/no-controller\");\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.redirect();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\tpublic static class RefererController {\n\t\tpublic void index() {\n\n\t\t}\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldRedirectToIt() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tResourceMethod method = mockery.methodFor(RefererController.class, \"index\");\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(returnValue(method));\n\n\t\t\t\tLogicResult logic = mockery.mock(LogicResult.class);\n\n\t\t\t\tone(result).use(logic());\n\t\t\t\twill(returnValue(logic));\n\n\t\t\t\tone(logic).redirectTo(RefererController.class);\n\t\t\t\twill(returnValue(new RefererController()));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.redirect();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldForwardToIt() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tResourceMethod method = mockery.methodFor(RefererController.class, \"index\");\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(returnValue(method));\n\n\t\t\t\tLogicResult logic = mockery.mock(LogicResult.class);\n\n\t\t\t\tone(result).use(logic());\n\t\t\t\twill(returnValue(logic));\n\n\t\t\t\tone(logic).forwardTo(RefererController.class);\n\t\t\t\twill(returnValue(new RefererController()));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.forward();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.view;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\nimport static br.com.caelum.vraptor.view.Results.page;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.route.ResourceNotFoundException;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DefaultRefererResultTest {\n\n\tprivate @Mock Result result;\n\tprivate @Mock MutableRequest request;\n\tprivate @Mock Router router;\n\tprivate @Mock Localization localization;\n\tprivate @Mock ParametersProvider provider;\n\tprivate DefaultRefererResult refererResult;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\trefererResult = new DefaultRefererResult(result, request, router, provider, localization);\n\t}\n\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnForward() throws Exception {\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(null);\n\t\t\n\t\ttry {\n\t\t\trefererResult.forward();\n\t\t\tfail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnRedirect() throws Exception {\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(null);\n\n\t\ttry {\n\t\t\trefererResult.redirect();\n\t\t\tfail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldForwardToPage() throws Exception {\n\t\tPageResult page = mock(PageResult.class);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenThrow(new ResourceNotFoundException());\n\t\tdoReturn(page).when(result).use(page());\n\n\t\trefererResult.forward();\n\t\t\n\t\tverify(page).forwardTo(\"/no-controller\");\n\t}\n\t\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldRedirectToPage() throws Exception {\n\t\tPageResult page = mock(PageResult.class);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenThrow(new ResourceNotFoundException());\n\t\tdoReturn(page).when(result).use(page());\n\t\t\n\t\trefererResult.redirect();\n\t\t\n\t\tverify(page).redirectTo(\"/no-controller\");\n\t}\n\t\n\tpublic static class RefererController {\n\t\tpublic void index() {\n\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldRedirectToIt() throws Exception {\n\t\tLogicResult logic = mock(LogicResult.class);\n\n\t\tMethod index = RefererController.class.getMethod(\"index\");\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(RefererController.class, index);\n\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenReturn(method);\n\t\tdoReturn(logic).when(result).use(logic());\n\t\twhen(logic.redirectTo(RefererController.class)).thenReturn(new RefererController());\n\n\t\trefererResult.redirect();\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldForwardToIt() throws Exception {\n\t\tLogicResult logic = mock(LogicResult.class);\n\t\t\n\t\tMethod index = RefererController.class.getMethod(\"index\");\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(RefererController.class, index);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenReturn(method);\n\t\tdoReturn(logic).when(result).use(logic());\n\t\twhen(logic.forwardTo(RefererController.class)).thenReturn(new RefererController());\n\t\t\n\t\trefererResult.forward();\n\t}\n}\n","lineNo":103}
{"Smelly Sample":"package br.com.caelum.vraptor.view;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\nimport static br.com.caelum.vraptor.view.Results.page;\n\nimport org.jmock.Expectations;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.route.ResourceNotFoundException;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class DefaultRefererResultTest {\n\n\n\tprivate VRaptorMockery mockery;\n\tprivate Result result;\n\tprivate MutableRequest request;\n\tprivate Router router;\n\tprivate DefaultRefererResult refererResult;\n\tprivate Localization localization;\n\tprivate ParametersProvider provider;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tmockery = new VRaptorMockery();\n\t\tresult = mockery.mock(Result.class);\n\t\trequest = mockery.mock(MutableRequest.class);\n\t\trouter = mockery.mock(Router.class);\n\t\tprovider = mockery.mock(ParametersProvider.class);\n\t\tlocalization = mockery.mock(Localization.class);\n\t\trefererResult = new DefaultRefererResult(result, request, router, provider, localization);\n\t}\n\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnForward() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\trefererResult.forward();\n\t\t\tAssert.fail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnRedirect() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\ttry {\n\t\t\trefererResult.redirect();\n\t\t\tAssert.fail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\tmockery.assertIsSatisfied();\n\t\t}\n\t}\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldForwardToPage() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(throwException(new ResourceNotFoundException()));\n\n\t\t\t\tPageResult page = mockery.mock(PageResult.class);\n\n\t\t\t\tone(result).use(page());\n\t\t\t\twill(returnValue(page));\n\n\t\t\t\tone(page).forwardTo(\"/no-controller\");\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.forward();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldRedirectToPage() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(throwException(new ResourceNotFoundException()));\n\n\t\t\t\tPageResult page = mockery.mock(PageResult.class);\n\n\t\t\t\tone(result).use(page());\n\t\t\t\twill(returnValue(page));\n\n\t\t\t\tone(page).redirectTo(\"/no-controller\");\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.redirect();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\tpublic static class RefererController {\n\t\tpublic void index() {\n\n\t\t}\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldRedirectToIt() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tResourceMethod method = mockery.methodFor(RefererController.class, \"index\");\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(returnValue(method));\n\n\t\t\t\tLogicResult logic = mockery.mock(LogicResult.class);\n\n\t\t\t\tone(result).use(logic());\n\t\t\t\twill(returnValue(logic));\n\n\t\t\t\tone(logic).redirectTo(RefererController.class);\n\t\t\t\twill(returnValue(new RefererController()));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.redirect();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldForwardToIt() throws Exception {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(request).getHeader(\"Referer\");\n\t\t\t\twill(returnValue(\"http://localhost:8080/vraptor/no-controller\"));\n\n\t\t\t\tone(request).getContextPath();\n\t\t\t\twill(returnValue(\"/vraptor\"));\n\n\t\t\t\tResourceMethod method = mockery.methodFor(RefererController.class, \"index\");\n\n\t\t\t\tone(router).parse(\"/no-controller\", HttpMethod.GET, request);\n\t\t\t\twill(returnValue(method));\n\n\t\t\t\tLogicResult logic = mockery.mock(LogicResult.class);\n\n\t\t\t\tone(result).use(logic());\n\t\t\t\twill(returnValue(logic));\n\n\t\t\t\tone(logic).forwardTo(RefererController.class);\n\t\t\t\twill(returnValue(new RefererController()));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\t\trefererResult.forward();\n\n\t\tmockery.assertIsSatisfied();\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.view;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\nimport static br.com.caelum.vraptor.view.Results.page;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.route.ResourceNotFoundException;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DefaultRefererResultTest {\n\n\tprivate @Mock Result result;\n\tprivate @Mock MutableRequest request;\n\tprivate @Mock Router router;\n\tprivate @Mock Localization localization;\n\tprivate @Mock ParametersProvider provider;\n\tprivate DefaultRefererResult refererResult;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\trefererResult = new DefaultRefererResult(result, request, router, provider, localization);\n\t}\n\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnForward() throws Exception {\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(null);\n\t\t\n\t\ttry {\n\t\t\trefererResult.forward();\n\t\t\tfail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenThereIsNoRefererShouldThrowExceptionOnRedirect() throws Exception {\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(null);\n\n\t\ttry {\n\t\t\trefererResult.redirect();\n\t\t\tfail(\"Expected IllegalStateException\");\n\t\t} catch (IllegalStateException e) {\n\t\t\t\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldForwardToPage() throws Exception {\n\t\tPageResult page = mock(PageResult.class);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenThrow(new ResourceNotFoundException());\n\t\tdoReturn(page).when(result).use(page());\n\n\t\trefererResult.forward();\n\t\t\n\t\tverify(page).forwardTo(\"/no-controller\");\n\t}\n\t\n\t@Test\n\tpublic void whenRefererDontMatchAControllerShouldRedirectToPage() throws Exception {\n\t\tPageResult page = mock(PageResult.class);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenThrow(new ResourceNotFoundException());\n\t\tdoReturn(page).when(result).use(page());\n\t\t\n\t\trefererResult.redirect();\n\t\t\n\t\tverify(page).redirectTo(\"/no-controller\");\n\t}\n\t\n\tpublic static class RefererController {\n\t\tpublic void index() {\n\n\t\t}\n\t}\n\t\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldRedirectToIt() throws Exception {\n\t\tLogicResult logic = mock(LogicResult.class);\n\n\t\tMethod index = RefererController.class.getMethod(\"index\");\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(RefererController.class, index);\n\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenReturn(method);\n\t\tdoReturn(logic).when(result).use(logic());\n\t\twhen(logic.redirectTo(RefererController.class)).thenReturn(new RefererController());\n\n\t\trefererResult.redirect();\n\t}\n\t@Test\n\tpublic void whenRefererMatchesAControllerShouldForwardToIt() throws Exception {\n\t\tLogicResult logic = mock(LogicResult.class);\n\t\t\n\t\tMethod index = RefererController.class.getMethod(\"index\");\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(RefererController.class, index);\n\t\t\n\t\twhen(request.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/vraptor/no-controller\");\n\t\twhen(request.getContextPath()).thenReturn(\"/vraptor\");\n\t\twhen(router.parse(\"/no-controller\", HttpMethod.GET, request)).thenReturn(method);\n\t\tdoReturn(logic).when(result).use(logic());\n\t\twhen(logic.forwardTo(RefererController.class)).thenReturn(new RefererController());\n\t\t\n\t\trefererResult.forward();\n\t}\n}\n","lineNo":118}
{"Smelly Sample":"package br.com.caelum.vraptor.interceptor;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.http.VRaptorResponse;\n\n/**\n * Tests FlashInterceptor\n *\n * @author Lucas Cavalcanti\n * @author Adriano Almeida\n * @author Caires Vinicius\n */\npublic class FlashInterceptorTest {\n\n\n\tprivate Mockery mockery;\n\tprivate HttpSession session;\n\tprivate Result result;\n\tprivate MutableResponse response;\n\tprivate FlashInterceptor interceptor;\n\tprivate InterceptorStack stack;\n\tprivate HttpServletResponse mockResponse;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tmockery = new Mockery();\n\t\tsession = mockery.mock(HttpSession.class);\n\t\tresult = mockery.mock(Result.class);\n\t\tstack = mockery.mock(InterceptorStack.class);\n\n\t\tmockResponse = mockery.mock(HttpServletResponse.class);\n\t\tresponse = new VRaptorResponse(mockResponse);\n\n\t\tinterceptor = new FlashInterceptor(session, result, response);\n\t}\n\n    @Test\n    public void shouldAcceptAlways() {\n    \tassertTrue(interceptor.accepts(null));\n    }\n    \n\t@Test\n\tpublic void shouldDoNothingWhenThereIsNoFlashParameters() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tnever(result);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldAddAllFlashParametersToResult() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(Collections.singletonMap(\"Abc\", 1002)));\n\n\t\t\t\tone(result).include(\"Abc\", 1002);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRemoveFlashIncludedParameters() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(Collections.singletonMap(\"Abc\", 1002)));\n\n\t\t\t\tone(session).removeAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void shouldIncludeFlashParametersWhenARedirectHappens() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\t\t\tone(result).included();\n\t\t\t\twill(returnValue(parameters));\n\n\t\t\t\tone(session).setAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS, parameters);\n\n\t\t\t\tallowing(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void shouldNotIncludeFlashParametersWhenThereIsNoIncludedParameter() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tMap<String, Object> parameters = Collections.emptyMap();\n\n\t\t\t\tone(result).included();\n\t\t\t\twill(returnValue(parameters));\n\n\t\t\t\tnever(session).setAttribute(with(any(String.class)), with(any(Object.class)));\n\n\t\t\t\tallowing(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(stack);\n\t\t\t\tignoring(mockResponse);\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void shouldNotCrashWhenSessionIsInvalid() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\t\t\tone(result).included();\n\t\t\t\twill(returnValue(parameters));\n\n\t\t\t\tone(session).setAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS, parameters);\n\t\t\t\twill(throwException(new IllegalStateException()));\n\n\t\t\t\tallowing(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tmockery.assertIsSatisfied();\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.interceptor;\n\nimport static br.com.caelum.vraptor.interceptor.FlashInterceptor.FLASH_INCLUDED_PARAMETERS;\nimport static java.util.Collections.singletonMap;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.anyObject;\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.http.VRaptorResponse;\n\n/**\n * Tests FlashInterceptor\n *\n * @author Lucas Cavalcanti\n * @author Adriano Almeida\n * @author Caires Vinicius\n */\npublic class FlashInterceptorTest {\n\n\n\tprivate @Mock HttpSession session;\n\tprivate @Mock Result result;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock HttpServletResponse mockResponse;\n\tprivate MutableResponse response;\n\tprivate FlashInterceptor interceptor;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\t\n\t\tresponse = new VRaptorResponse(mockResponse);\n\t\tinterceptor = new FlashInterceptor(session, result, response);\n\t}\n\n    @Test\n    public void shouldAcceptAlways() {\n    \tassertTrue(interceptor.accepts(null));\n    }\n    \n\t@Test\n\tpublic void shouldDoNothingWhenThereIsNoFlashParameters() throws Exception {\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tverifyZeroInteractions(result);\n\t}\n\n\t@Test\n\tpublic void shouldAddAllFlashParametersToResult() throws Exception {\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(singletonMap(\"Abc\", 1002));\n\t\t\n\t\tinterceptor.intercept(stack, null, null);\n\t\tverify(result).include(\"Abc\", 1002);\n\t}\n\n\t@Test\n\tpublic void shouldRemoveFlashIncludedParameters() throws Exception {\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(singletonMap(\"Abc\", 1002));\n\t\t\n\t\tinterceptor.intercept(stack, null, null);\n\t\tverify(session).removeAttribute(FLASH_INCLUDED_PARAMETERS);\n\t}\n\t\n\t@Test\n\tpublic void shouldIncludeFlashParametersWhenARedirectHappens() throws Exception {\n\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\twhen(result.included()).thenReturn(parameters);\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tresponse.sendRedirect(\"Anything\");\n\t\t\n\t\tverify(session).setAttribute(FLASH_INCLUDED_PARAMETERS, parameters);\n\t}\n\t@Test\n\tpublic void shouldNotIncludeFlashParametersWhenThereIsNoIncludedParameter() throws Exception {\n\t\tMap<String, Object> parameters = Collections.emptyMap();\n\n\t\twhen(result.included()).thenReturn(parameters);\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tverify(session, never()).setAttribute(anyString(), anyObject());\n\t}\n\t\n\t@Test\n\tpublic void shouldNotCrashWhenSessionIsInvalid() throws Exception {\n\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\twhen(result.included()).thenReturn(parameters);\n\t\tdoThrow(new IllegalStateException()).when(session).setAttribute(FLASH_INCLUDED_PARAMETERS, parameters);\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tresponse.sendRedirect(\"Anything\");\n\t}\n}\n","lineNo":86}
{"Smelly Sample":"package br.com.caelum.vraptor.interceptor;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.http.VRaptorResponse;\n\n/**\n * Tests FlashInterceptor\n *\n * @author Lucas Cavalcanti\n * @author Adriano Almeida\n * @author Caires Vinicius\n */\npublic class FlashInterceptorTest {\n\n\n\tprivate Mockery mockery;\n\tprivate HttpSession session;\n\tprivate Result result;\n\tprivate MutableResponse response;\n\tprivate FlashInterceptor interceptor;\n\tprivate InterceptorStack stack;\n\tprivate HttpServletResponse mockResponse;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tmockery = new Mockery();\n\t\tsession = mockery.mock(HttpSession.class);\n\t\tresult = mockery.mock(Result.class);\n\t\tstack = mockery.mock(InterceptorStack.class);\n\n\t\tmockResponse = mockery.mock(HttpServletResponse.class);\n\t\tresponse = new VRaptorResponse(mockResponse);\n\n\t\tinterceptor = new FlashInterceptor(session, result, response);\n\t}\n\n    @Test\n    public void shouldAcceptAlways() {\n    \tassertTrue(interceptor.accepts(null));\n    }\n    \n\t@Test\n\tpublic void shouldDoNothingWhenThereIsNoFlashParameters() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tnever(result);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldAddAllFlashParametersToResult() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(Collections.singletonMap(\"Abc\", 1002)));\n\n\t\t\t\tone(result).include(\"Abc\", 1002);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRemoveFlashIncludedParameters() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(Collections.singletonMap(\"Abc\", 1002)));\n\n\t\t\t\tone(session).removeAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void shouldIncludeFlashParametersWhenARedirectHappens() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\t\t\tone(result).included();\n\t\t\t\twill(returnValue(parameters));\n\n\t\t\t\tone(session).setAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS, parameters);\n\n\t\t\t\tallowing(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void shouldNotIncludeFlashParametersWhenThereIsNoIncludedParameter() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tMap<String, Object> parameters = Collections.emptyMap();\n\n\t\t\t\tone(result).included();\n\t\t\t\twill(returnValue(parameters));\n\n\t\t\t\tnever(session).setAttribute(with(any(String.class)), with(any(Object.class)));\n\n\t\t\t\tallowing(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(stack);\n\t\t\t\tignoring(mockResponse);\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void shouldNotCrashWhenSessionIsInvalid() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\t\t\tone(result).included();\n\t\t\t\twill(returnValue(parameters));\n\n\t\t\t\tone(session).setAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS, parameters);\n\t\t\t\twill(throwException(new IllegalStateException()));\n\n\t\t\t\tallowing(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tmockery.assertIsSatisfied();\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.interceptor;\n\nimport static br.com.caelum.vraptor.interceptor.FlashInterceptor.FLASH_INCLUDED_PARAMETERS;\nimport static java.util.Collections.singletonMap;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.anyObject;\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.http.VRaptorResponse;\n\n/**\n * Tests FlashInterceptor\n *\n * @author Lucas Cavalcanti\n * @author Adriano Almeida\n * @author Caires Vinicius\n */\npublic class FlashInterceptorTest {\n\n\n\tprivate @Mock HttpSession session;\n\tprivate @Mock Result result;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock HttpServletResponse mockResponse;\n\tprivate MutableResponse response;\n\tprivate FlashInterceptor interceptor;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\t\n\t\tresponse = new VRaptorResponse(mockResponse);\n\t\tinterceptor = new FlashInterceptor(session, result, response);\n\t}\n\n    @Test\n    public void shouldAcceptAlways() {\n    \tassertTrue(interceptor.accepts(null));\n    }\n    \n\t@Test\n\tpublic void shouldDoNothingWhenThereIsNoFlashParameters() throws Exception {\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tverifyZeroInteractions(result);\n\t}\n\n\t@Test\n\tpublic void shouldAddAllFlashParametersToResult() throws Exception {\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(singletonMap(\"Abc\", 1002));\n\t\t\n\t\tinterceptor.intercept(stack, null, null);\n\t\tverify(result).include(\"Abc\", 1002);\n\t}\n\n\t@Test\n\tpublic void shouldRemoveFlashIncludedParameters() throws Exception {\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(singletonMap(\"Abc\", 1002));\n\t\t\n\t\tinterceptor.intercept(stack, null, null);\n\t\tverify(session).removeAttribute(FLASH_INCLUDED_PARAMETERS);\n\t}\n\t\n\t@Test\n\tpublic void shouldIncludeFlashParametersWhenARedirectHappens() throws Exception {\n\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\twhen(result.included()).thenReturn(parameters);\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tresponse.sendRedirect(\"Anything\");\n\t\t\n\t\tverify(session).setAttribute(FLASH_INCLUDED_PARAMETERS, parameters);\n\t}\n\t@Test\n\tpublic void shouldNotIncludeFlashParametersWhenThereIsNoIncludedParameter() throws Exception {\n\t\tMap<String, Object> parameters = Collections.emptyMap();\n\n\t\twhen(result.included()).thenReturn(parameters);\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tverify(session, never()).setAttribute(anyString(), anyObject());\n\t}\n\t\n\t@Test\n\tpublic void shouldNotCrashWhenSessionIsInvalid() throws Exception {\n\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\twhen(result.included()).thenReturn(parameters);\n\t\tdoThrow(new IllegalStateException()).when(session).setAttribute(FLASH_INCLUDED_PARAMETERS, parameters);\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tresponse.sendRedirect(\"Anything\");\n\t}\n}\n","lineNo":98}
{"Smelly Sample":"package br.com.caelum.vraptor.interceptor;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.http.VRaptorResponse;\n\n/**\n * Tests FlashInterceptor\n *\n * @author Lucas Cavalcanti\n * @author Adriano Almeida\n * @author Caires Vinicius\n */\npublic class FlashInterceptorTest {\n\n\n\tprivate Mockery mockery;\n\tprivate HttpSession session;\n\tprivate Result result;\n\tprivate MutableResponse response;\n\tprivate FlashInterceptor interceptor;\n\tprivate InterceptorStack stack;\n\tprivate HttpServletResponse mockResponse;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tmockery = new Mockery();\n\t\tsession = mockery.mock(HttpSession.class);\n\t\tresult = mockery.mock(Result.class);\n\t\tstack = mockery.mock(InterceptorStack.class);\n\n\t\tmockResponse = mockery.mock(HttpServletResponse.class);\n\t\tresponse = new VRaptorResponse(mockResponse);\n\n\t\tinterceptor = new FlashInterceptor(session, result, response);\n\t}\n\n    @Test\n    public void shouldAcceptAlways() {\n    \tassertTrue(interceptor.accepts(null));\n    }\n    \n\t@Test\n\tpublic void shouldDoNothingWhenThereIsNoFlashParameters() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tnever(result);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldAddAllFlashParametersToResult() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(Collections.singletonMap(\"Abc\", 1002)));\n\n\t\t\t\tone(result).include(\"Abc\", 1002);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRemoveFlashIncludedParameters() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(Collections.singletonMap(\"Abc\", 1002)));\n\n\t\t\t\tone(session).removeAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void shouldIncludeFlashParametersWhenARedirectHappens() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\t\t\tone(result).included();\n\t\t\t\twill(returnValue(parameters));\n\n\t\t\t\tone(session).setAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS, parameters);\n\n\t\t\t\tallowing(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void shouldNotIncludeFlashParametersWhenThereIsNoIncludedParameter() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tMap<String, Object> parameters = Collections.emptyMap();\n\n\t\t\t\tone(result).included();\n\t\t\t\twill(returnValue(parameters));\n\n\t\t\t\tnever(session).setAttribute(with(any(String.class)), with(any(Object.class)));\n\n\t\t\t\tallowing(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(stack);\n\t\t\t\tignoring(mockResponse);\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void shouldNotCrashWhenSessionIsInvalid() throws Exception {\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\t\t\tone(result).included();\n\t\t\t\twill(returnValue(parameters));\n\n\t\t\t\tone(session).setAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS, parameters);\n\t\t\t\twill(throwException(new IllegalStateException()));\n\n\t\t\t\tallowing(session).getAttribute(FlashInterceptor.FLASH_INCLUDED_PARAMETERS);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(anything());\n\t\t\t}\n\t\t});\n\n\t\tinterceptor.intercept(stack, null, null);\n\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tmockery.assertIsSatisfied();\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.interceptor;\n\nimport static br.com.caelum.vraptor.interceptor.FlashInterceptor.FLASH_INCLUDED_PARAMETERS;\nimport static java.util.Collections.singletonMap;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Matchers.anyObject;\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.http.VRaptorResponse;\n\n/**\n * Tests FlashInterceptor\n *\n * @author Lucas Cavalcanti\n * @author Adriano Almeida\n * @author Caires Vinicius\n */\npublic class FlashInterceptorTest {\n\n\n\tprivate @Mock HttpSession session;\n\tprivate @Mock Result result;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock HttpServletResponse mockResponse;\n\tprivate MutableResponse response;\n\tprivate FlashInterceptor interceptor;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\t\n\t\tresponse = new VRaptorResponse(mockResponse);\n\t\tinterceptor = new FlashInterceptor(session, result, response);\n\t}\n\n    @Test\n    public void shouldAcceptAlways() {\n    \tassertTrue(interceptor.accepts(null));\n    }\n    \n\t@Test\n\tpublic void shouldDoNothingWhenThereIsNoFlashParameters() throws Exception {\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tverifyZeroInteractions(result);\n\t}\n\n\t@Test\n\tpublic void shouldAddAllFlashParametersToResult() throws Exception {\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(singletonMap(\"Abc\", 1002));\n\t\t\n\t\tinterceptor.intercept(stack, null, null);\n\t\tverify(result).include(\"Abc\", 1002);\n\t}\n\n\t@Test\n\tpublic void shouldRemoveFlashIncludedParameters() throws Exception {\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(singletonMap(\"Abc\", 1002));\n\t\t\n\t\tinterceptor.intercept(stack, null, null);\n\t\tverify(session).removeAttribute(FLASH_INCLUDED_PARAMETERS);\n\t}\n\t\n\t@Test\n\tpublic void shouldIncludeFlashParametersWhenARedirectHappens() throws Exception {\n\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\twhen(result.included()).thenReturn(parameters);\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tresponse.sendRedirect(\"Anything\");\n\t\t\n\t\tverify(session).setAttribute(FLASH_INCLUDED_PARAMETERS, parameters);\n\t}\n\t@Test\n\tpublic void shouldNotIncludeFlashParametersWhenThereIsNoIncludedParameter() throws Exception {\n\t\tMap<String, Object> parameters = Collections.emptyMap();\n\n\t\twhen(result.included()).thenReturn(parameters);\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tresponse.sendRedirect(\"Anything\");\n\n\t\tverify(session, never()).setAttribute(anyString(), anyObject());\n\t}\n\t\n\t@Test\n\tpublic void shouldNotCrashWhenSessionIsInvalid() throws Exception {\n\t\tMap<String, Object> parameters = Collections.<String, Object>singletonMap(\"Abc\", 1002);\n\n\t\twhen(result.included()).thenReturn(parameters);\n\t\tdoThrow(new IllegalStateException()).when(session).setAttribute(FLASH_INCLUDED_PARAMETERS, parameters);\n\t\twhen(session.getAttribute(FLASH_INCLUDED_PARAMETERS)).thenReturn(null);\n\n\t\tinterceptor.intercept(stack, null, null);\n\t\tresponse.sendRedirect(\"Anything\");\n\t}\n}\n","lineNo":111}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.IOException;\nimport java.util.EnumSet;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.http.route.MethodNotAllowedException;\nimport br.com.caelum.vraptor.http.route.ResourceNotFoundException;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.MethodNotAllowedHandler;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceNotFoundHandler;\n\npublic class ResourceLookupInterceptorTest {\n\n    private Mockery mockery;\n    private UrlToResourceTranslator translator;\n    private RequestInfo info;\n    private ResourceLookupInterceptor lookup;\n    private MutableRequest webRequest;\n    private MutableResponse webResponse;\n    private MethodInfo methodInfo;\n\tprivate ResourceNotFoundHandler notFoundHandler;\n\tprivate MethodNotAllowedHandler methodNotAllowedHandler;\n\n    @Before\n    public void config() {\n        this.mockery = new Mockery();\n        this.translator = mockery.mock(UrlToResourceTranslator.class);\n        this.webRequest = mockery.mock(MutableRequest.class);\n        this.webResponse = mockery.mock(MutableResponse.class);\n        this.info = new RequestInfo(null, null, webRequest, webResponse);\n        this.methodInfo = mockery.mock(MethodInfo.class);\n        this.notFoundHandler = mockery.mock(ResourceNotFoundHandler.class);\n        this.methodNotAllowedHandler = mockery.mock(MethodNotAllowedHandler.class);\n        this.lookup = new ResourceLookupInterceptor(translator, methodInfo, notFoundHandler, methodNotAllowedHandler, info);\n    }\n    \n    @Test\n    public void shouldAcceptAlways() {\n    \tassertTrue(lookup.accepts(null));\n    }\n\n    @Test\n    public void shouldHandle404() throws IOException, InterceptionException {\n        mockery.checking(new Expectations() {\n            {\n                one(translator).translate(info);\n                will(throwException(new ResourceNotFoundException()));\n                one(notFoundHandler).couldntFind(info);\n            }\n        });\n        lookup.intercept(null, null, null);\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void shouldHandle405() throws IOException, InterceptionException {\n        mockery.checking(new Expectations() {\n            {\n            \tEnumSet<HttpMethod> allowedMethods = EnumSet.of(HttpMethod.GET);\n\n                one(translator).translate(info);\n\t\t\t\twill(throwException(new MethodNotAllowedException(allowedMethods, HttpMethod.POST.toString())));\n                one(methodNotAllowedHandler).deny(info, allowedMethods);\n            }\n        });\n        lookup.intercept(null, null, null);\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void shouldUseResourceMethodFoundWithNextInterceptor() throws IOException, InterceptionException {\n        final ResourceMethod method = mockery.mock(ResourceMethod.class);\n        final InterceptorStack stack = mockery.mock(InterceptorStack.class);\n        mockery.checking(new Expectations() {\n            {\n                one(translator).translate(info);\n                will(returnValue(method));\n                one(stack).next(method, null);\n                one(methodInfo).setResourceMethod(method);\n            }\n        });\n        lookup.intercept(stack, null, null);\n        mockery.assertIsSatisfied();\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.io.IOException;\nimport java.util.EnumSet;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.http.route.MethodNotAllowedException;\nimport br.com.caelum.vraptor.http.route.ResourceNotFoundException;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.MethodNotAllowedHandler;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceNotFoundHandler;\n\npublic class ResourceLookupInterceptorTest {\n\n    private @Mock UrlToResourceTranslator translator;\n    private @Mock MutableRequest webRequest;\n    private @Mock MutableResponse webResponse;\n    private @Mock RequestInfo info;\n    private ResourceLookupInterceptor lookup;\n    private @Mock MethodInfo methodInfo;\n\tprivate @Mock ResourceNotFoundHandler notFoundHandler;\n\tprivate @Mock MethodNotAllowedHandler methodNotAllowedHandler;\n\n    @Before\n    public void config() {\n    \tMockitoAnnotations.initMocks(this);\n        info = new RequestInfo(null, null, webRequest, webResponse);\n        lookup = new ResourceLookupInterceptor(translator, methodInfo, notFoundHandler, methodNotAllowedHandler, info);\n    }\n    \n    @Test\n    public void shouldAcceptAlways() {\n    \tassertTrue(lookup.accepts(null));\n    }\n\n    @Test\n    public void shouldHandle404() throws IOException, InterceptionException {\n        when(translator.translate(info)).thenThrow(new ResourceNotFoundException());\n        verify(notFoundHandler, never()).couldntFind(info);\n                \n        lookup.intercept(null, null, null);\n    }\n\n    @Test\n    public void shouldHandle405() throws IOException, InterceptionException {\n    \tEnumSet<HttpMethod> allowedMethods = EnumSet.of(HttpMethod.GET);\n    \t\n        when(translator.translate(info)).thenThrow(new MethodNotAllowedException(allowedMethods, HttpMethod.POST.toString()));\n        verify(methodNotAllowedHandler, never()).deny(info, allowedMethods);\n                \n        lookup.intercept(null, null, null);\n    }\n\n    @Test\n    public void shouldUseResourceMethodFoundWithNextInterceptor() throws IOException, InterceptionException {\n        final ResourceMethod method = mock(ResourceMethod.class);\n        final InterceptorStack stack = mock(InterceptorStack.class);\n        \n        when(translator.translate(info)).thenReturn(method);\n        verify(stack, never()).next(method, null);\n        verify(methodInfo, never()).setResourceMethod(method);\n        \n        lookup.intercept(stack, null, null);\n    }\n}\n","lineNo":80}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.argThat;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\n\nimport junit.framework.Assert;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.interceptor.download.Download;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DownloadInterceptorTest {\n\n    private DownloadInterceptor interceptor;\n\n    @Mock private MethodInfo info;\n\t@Mock private HttpServletResponse response;\n\t@Mock private ResourceMethod resourceMethod;\n\t@Mock private InterceptorStack stack;\n\t@Mock private ServletOutputStream outputStream;\n\t@Mock private Result result;\n\n    @Before\n    public void setup() throws Exception {\n    \tMockitoAnnotations.initMocks(this);\n\n\t\twhen(response.getOutputStream()).thenReturn(outputStream);\n\n        interceptor = new DownloadInterceptor(response, info, result);\n    }\n\n\t@Test\n\tpublic void whenResultIsADownloadShouldUseIt() throws Exception {\n\t\tDownload download = mock(Download.class);\n\n\t\twhen(info.getResult()).thenReturn(download);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(download).write(response);\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAInputStreamDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(new ByteArrayInputStream(bytes));\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAByteArrayDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(bytes);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAFileShouldCreateAFileDownload() throws Exception {\n\t\tFile tmp = File.createTempFile(\"test\", \"test\");\n\t\tnew PrintWriter(tmp).append(\"abc\").close();\n\n\t\twhen(info.getResult()).thenReturn(tmp);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(\"abc\".getBytes()))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasUsedShouldDoNothing() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(true);\n\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(stack).next(resourceMethod, null);\n\t\tverifyZeroInteractions(response);\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasNotUsedShouldThrowNPE() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(false);\n\n\t\ttry {\n\t\t\tinterceptor.intercept(stack, resourceMethod, null);\n\t\t\tfail(\"expected NullPointerException\");\n\t\t} catch (NullPointerException e) {\n\t\t\tverifyZeroInteractions(response);\n\t\t}\n\t}\n\t\n    @Test\n    public void shouldThrowsInterceptionExceptionIfIOExceptionOccurs() throws Exception {\n        Download download = mock(Download.class);\n        \n        when(info.getResult()).thenReturn(download);\n        when(result.used()).thenReturn(false);\n        doThrow(new IOException()).when(download).write(any(HttpServletResponse.class));\n\n        try {\n            interceptor.intercept(stack, resourceMethod, null);\n            fail(\"expected InterceptionException\");\n        } catch (InterceptionException e) {\n            \n        }\n    }\n    \n    @Test\n    public void shouldNotAcceptStringReturn() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"string\"));\n        Assert.assertFalse(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n\t@Test\n\tpublic void shouldAcceptFile() throws Exception {\n\t    ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"file\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n\t}\n\n    @Test\n    public void shouldAcceptInput() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"input\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptDownload() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"download\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptByte() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"asByte\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n\tprivate Matcher<byte[]> arrayStartingWith(final byte[] array) {\n\t\treturn new TypeSafeMatcher<byte[]>() {\n\t\t\t@Override\n\t\t\tprotected void describeMismatchSafely(byte[] item, Description mismatchDescription) {\n\t\t\t}\n\t\t\t@Override\n\t\t\tprotected boolean matchesSafely(byte[] item) {\n\t\t\t\tif (item.length < array.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\t\tif (array[i] != item[i]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"a byte array starting with \" + Arrays.toString(array));\n\t\t\t}\n\t\t};\n\t}\n\tstatic class FakeResource {\n\t\tpublic String string() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic File file() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic InputStream input() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic Download download() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic byte[] asByte() {\n\t\t    return null;\n\t\t}\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.not;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.argThat;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.interceptor.download.Download;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DownloadInterceptorTest {\n\n    private DownloadInterceptor interceptor;\n\n    @Mock private MethodInfo info;\n\t@Mock private HttpServletResponse response;\n\t@Mock private ResourceMethod resourceMethod;\n\t@Mock private InterceptorStack stack;\n\t@Mock private ServletOutputStream outputStream;\n\t@Mock private Result result;\n\n    @Before\n    public void setup() throws Exception {\n    \tMockitoAnnotations.initMocks(this);\n\n\t\twhen(response.getOutputStream()).thenReturn(outputStream);\n\n        interceptor = new DownloadInterceptor(response, info, result);\n    }\n\n\t@Test\n\tpublic void whenResultIsADownloadShouldUseIt() throws Exception {\n\t\tDownload download = mock(Download.class);\n\n\t\twhen(info.getResult()).thenReturn(download);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(download).write(response);\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAInputStreamDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(new ByteArrayInputStream(bytes));\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAByteArrayDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(bytes);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAFileShouldCreateAFileDownload() throws Exception {\n\t\tFile tmp = File.createTempFile(\"test\", \"test\");\n\t\tnew PrintWriter(tmp).append(\"abc\").close();\n\n\t\twhen(info.getResult()).thenReturn(tmp);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(\"abc\".getBytes()))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasUsedShouldDoNothing() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(true);\n\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(stack).next(resourceMethod, null);\n\t\tverifyZeroInteractions(response);\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasNotUsedShouldThrowNPE() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(false);\n\n\t\ttry {\n\t\t\tinterceptor.intercept(stack, resourceMethod, null);\n\t\t\tfail(\"expected NullPointerException\");\n\t\t} catch (NullPointerException e) {\n\t\t\tverifyZeroInteractions(response);\n\t\t}\n\t}\n\t\n    @Test\n    public void shouldThrowInterceptionExceptionIfIOExceptionOccurs() throws Exception {\n        Download download = mock(Download.class);\n        \n        when(info.getResult()).thenReturn(download);\n        when(result.used()).thenReturn(false);\n        doThrow(new IOException()).when(download).write(any(HttpServletResponse.class));\n\n        try {\n            interceptor.intercept(stack, resourceMethod, null);\n            fail(\"expected InterceptionException\");\n        } catch (InterceptionException e) {\n            \n        }\n    }\n    \n    @Test\n    public void shouldNotAcceptStringReturn() throws Exception {\n        Method method = FakeResource.class.getMethod(\"string\");\n        assertThat(interceptor, not(accepts(method)));\n    }\n    \n\t@Test\n\tpublic void shouldAcceptFile() throws Exception {\n\t    Method method = FakeResource.class.getMethod(\"file\");\n        assertThat(interceptor, accepts(method));\n\t}\n\n    @Test\n    public void shouldAcceptInput() throws Exception {\n        Method method = FakeResource.class.getMethod(\"input\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptDownload() throws Exception {\n        Method method = FakeResource.class.getMethod(\"download\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptByte() throws Exception {\n        Method method = FakeResource.class.getMethod(\"asByte\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    private Matcher<Interceptor> accepts(final Method method) {\n    \treturn new TypeSafeMatcher<Interceptor>() {\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"the method \").appendValue(method);\n\t\t\t}\n\n\t\t\tprotected boolean matchesSafely(Interceptor item) {\n\t\t\t\tResourceMethod m = DefaultResourceMethod.instanceFor(method.getDeclaringClass(), method);\n\t\t\t\treturn interceptor.accepts(m);\n\t\t\t}\n\n\t\t\tprotected void describeMismatchSafely(Interceptor item, Description mismatchDescription) {\n\t\t\t}\n\t\t};\n    }\n    \n\tprivate Matcher<byte[]> arrayStartingWith(final byte[] array) {\n\t\treturn new TypeSafeMatcher<byte[]>() {\n\t\t\tprotected void describeMismatchSafely(byte[] item, Description mismatchDescription) {\n\t\t\t}\n\t\t\t\n\t\t\tprotected boolean matchesSafely(byte[] item) {\n\t\t\t\tif (item.length < array.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\t\tif (array[i] != item[i]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"a byte array starting with \" + Arrays.toString(array));\n\t\t\t}\n\t\t};\n\t}\n\tstatic class FakeResource {\n\t\tpublic String string() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic File file() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic InputStream input() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic Download download() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic byte[] asByte() {\n\t\t    return null;\n\t\t}\n\t}\n}\n","lineNo":169}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.argThat;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\n\nimport junit.framework.Assert;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.interceptor.download.Download;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DownloadInterceptorTest {\n\n    private DownloadInterceptor interceptor;\n\n    @Mock private MethodInfo info;\n\t@Mock private HttpServletResponse response;\n\t@Mock private ResourceMethod resourceMethod;\n\t@Mock private InterceptorStack stack;\n\t@Mock private ServletOutputStream outputStream;\n\t@Mock private Result result;\n\n    @Before\n    public void setup() throws Exception {\n    \tMockitoAnnotations.initMocks(this);\n\n\t\twhen(response.getOutputStream()).thenReturn(outputStream);\n\n        interceptor = new DownloadInterceptor(response, info, result);\n    }\n\n\t@Test\n\tpublic void whenResultIsADownloadShouldUseIt() throws Exception {\n\t\tDownload download = mock(Download.class);\n\n\t\twhen(info.getResult()).thenReturn(download);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(download).write(response);\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAInputStreamDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(new ByteArrayInputStream(bytes));\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAByteArrayDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(bytes);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAFileShouldCreateAFileDownload() throws Exception {\n\t\tFile tmp = File.createTempFile(\"test\", \"test\");\n\t\tnew PrintWriter(tmp).append(\"abc\").close();\n\n\t\twhen(info.getResult()).thenReturn(tmp);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(\"abc\".getBytes()))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasUsedShouldDoNothing() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(true);\n\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(stack).next(resourceMethod, null);\n\t\tverifyZeroInteractions(response);\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasNotUsedShouldThrowNPE() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(false);\n\n\t\ttry {\n\t\t\tinterceptor.intercept(stack, resourceMethod, null);\n\t\t\tfail(\"expected NullPointerException\");\n\t\t} catch (NullPointerException e) {\n\t\t\tverifyZeroInteractions(response);\n\t\t}\n\t}\n\t\n    @Test\n    public void shouldThrowsInterceptionExceptionIfIOExceptionOccurs() throws Exception {\n        Download download = mock(Download.class);\n        \n        when(info.getResult()).thenReturn(download);\n        when(result.used()).thenReturn(false);\n        doThrow(new IOException()).when(download).write(any(HttpServletResponse.class));\n\n        try {\n            interceptor.intercept(stack, resourceMethod, null);\n            fail(\"expected InterceptionException\");\n        } catch (InterceptionException e) {\n            \n        }\n    }\n    \n    @Test\n    public void shouldNotAcceptStringReturn() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"string\"));\n        Assert.assertFalse(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n\t@Test\n\tpublic void shouldAcceptFile() throws Exception {\n\t    ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"file\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n\t}\n\n    @Test\n    public void shouldAcceptInput() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"input\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptDownload() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"download\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptByte() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"asByte\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n\tprivate Matcher<byte[]> arrayStartingWith(final byte[] array) {\n\t\treturn new TypeSafeMatcher<byte[]>() {\n\t\t\t@Override\n\t\t\tprotected void describeMismatchSafely(byte[] item, Description mismatchDescription) {\n\t\t\t}\n\t\t\t@Override\n\t\t\tprotected boolean matchesSafely(byte[] item) {\n\t\t\t\tif (item.length < array.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\t\tif (array[i] != item[i]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"a byte array starting with \" + Arrays.toString(array));\n\t\t\t}\n\t\t};\n\t}\n\tstatic class FakeResource {\n\t\tpublic String string() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic File file() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic InputStream input() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic Download download() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic byte[] asByte() {\n\t\t    return null;\n\t\t}\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.not;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.argThat;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.interceptor.download.Download;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DownloadInterceptorTest {\n\n    private DownloadInterceptor interceptor;\n\n    @Mock private MethodInfo info;\n\t@Mock private HttpServletResponse response;\n\t@Mock private ResourceMethod resourceMethod;\n\t@Mock private InterceptorStack stack;\n\t@Mock private ServletOutputStream outputStream;\n\t@Mock private Result result;\n\n    @Before\n    public void setup() throws Exception {\n    \tMockitoAnnotations.initMocks(this);\n\n\t\twhen(response.getOutputStream()).thenReturn(outputStream);\n\n        interceptor = new DownloadInterceptor(response, info, result);\n    }\n\n\t@Test\n\tpublic void whenResultIsADownloadShouldUseIt() throws Exception {\n\t\tDownload download = mock(Download.class);\n\n\t\twhen(info.getResult()).thenReturn(download);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(download).write(response);\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAInputStreamDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(new ByteArrayInputStream(bytes));\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAByteArrayDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(bytes);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAFileShouldCreateAFileDownload() throws Exception {\n\t\tFile tmp = File.createTempFile(\"test\", \"test\");\n\t\tnew PrintWriter(tmp).append(\"abc\").close();\n\n\t\twhen(info.getResult()).thenReturn(tmp);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(\"abc\".getBytes()))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasUsedShouldDoNothing() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(true);\n\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(stack).next(resourceMethod, null);\n\t\tverifyZeroInteractions(response);\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasNotUsedShouldThrowNPE() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(false);\n\n\t\ttry {\n\t\t\tinterceptor.intercept(stack, resourceMethod, null);\n\t\t\tfail(\"expected NullPointerException\");\n\t\t} catch (NullPointerException e) {\n\t\t\tverifyZeroInteractions(response);\n\t\t}\n\t}\n\t\n    @Test\n    public void shouldThrowInterceptionExceptionIfIOExceptionOccurs() throws Exception {\n        Download download = mock(Download.class);\n        \n        when(info.getResult()).thenReturn(download);\n        when(result.used()).thenReturn(false);\n        doThrow(new IOException()).when(download).write(any(HttpServletResponse.class));\n\n        try {\n            interceptor.intercept(stack, resourceMethod, null);\n            fail(\"expected InterceptionException\");\n        } catch (InterceptionException e) {\n            \n        }\n    }\n    \n    @Test\n    public void shouldNotAcceptStringReturn() throws Exception {\n        Method method = FakeResource.class.getMethod(\"string\");\n        assertThat(interceptor, not(accepts(method)));\n    }\n    \n\t@Test\n\tpublic void shouldAcceptFile() throws Exception {\n\t    Method method = FakeResource.class.getMethod(\"file\");\n        assertThat(interceptor, accepts(method));\n\t}\n\n    @Test\n    public void shouldAcceptInput() throws Exception {\n        Method method = FakeResource.class.getMethod(\"input\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptDownload() throws Exception {\n        Method method = FakeResource.class.getMethod(\"download\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptByte() throws Exception {\n        Method method = FakeResource.class.getMethod(\"asByte\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    private Matcher<Interceptor> accepts(final Method method) {\n    \treturn new TypeSafeMatcher<Interceptor>() {\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"the method \").appendValue(method);\n\t\t\t}\n\n\t\t\tprotected boolean matchesSafely(Interceptor item) {\n\t\t\t\tResourceMethod m = DefaultResourceMethod.instanceFor(method.getDeclaringClass(), method);\n\t\t\t\treturn interceptor.accepts(m);\n\t\t\t}\n\n\t\t\tprotected void describeMismatchSafely(Interceptor item, Description mismatchDescription) {\n\t\t\t}\n\t\t};\n    }\n    \n\tprivate Matcher<byte[]> arrayStartingWith(final byte[] array) {\n\t\treturn new TypeSafeMatcher<byte[]>() {\n\t\t\tprotected void describeMismatchSafely(byte[] item, Description mismatchDescription) {\n\t\t\t}\n\t\t\t\n\t\t\tprotected boolean matchesSafely(byte[] item) {\n\t\t\t\tif (item.length < array.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\t\tif (array[i] != item[i]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"a byte array starting with \" + Arrays.toString(array));\n\t\t\t}\n\t\t};\n\t}\n\tstatic class FakeResource {\n\t\tpublic String string() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic File file() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic InputStream input() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic Download download() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic byte[] asByte() {\n\t\t    return null;\n\t\t}\n\t}\n}\n","lineNo":175}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.argThat;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\n\nimport junit.framework.Assert;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.interceptor.download.Download;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DownloadInterceptorTest {\n\n    private DownloadInterceptor interceptor;\n\n    @Mock private MethodInfo info;\n\t@Mock private HttpServletResponse response;\n\t@Mock private ResourceMethod resourceMethod;\n\t@Mock private InterceptorStack stack;\n\t@Mock private ServletOutputStream outputStream;\n\t@Mock private Result result;\n\n    @Before\n    public void setup() throws Exception {\n    \tMockitoAnnotations.initMocks(this);\n\n\t\twhen(response.getOutputStream()).thenReturn(outputStream);\n\n        interceptor = new DownloadInterceptor(response, info, result);\n    }\n\n\t@Test\n\tpublic void whenResultIsADownloadShouldUseIt() throws Exception {\n\t\tDownload download = mock(Download.class);\n\n\t\twhen(info.getResult()).thenReturn(download);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(download).write(response);\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAInputStreamDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(new ByteArrayInputStream(bytes));\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAByteArrayDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(bytes);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAFileShouldCreateAFileDownload() throws Exception {\n\t\tFile tmp = File.createTempFile(\"test\", \"test\");\n\t\tnew PrintWriter(tmp).append(\"abc\").close();\n\n\t\twhen(info.getResult()).thenReturn(tmp);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(\"abc\".getBytes()))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasUsedShouldDoNothing() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(true);\n\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(stack).next(resourceMethod, null);\n\t\tverifyZeroInteractions(response);\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasNotUsedShouldThrowNPE() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(false);\n\n\t\ttry {\n\t\t\tinterceptor.intercept(stack, resourceMethod, null);\n\t\t\tfail(\"expected NullPointerException\");\n\t\t} catch (NullPointerException e) {\n\t\t\tverifyZeroInteractions(response);\n\t\t}\n\t}\n\t\n    @Test\n    public void shouldThrowsInterceptionExceptionIfIOExceptionOccurs() throws Exception {\n        Download download = mock(Download.class);\n        \n        when(info.getResult()).thenReturn(download);\n        when(result.used()).thenReturn(false);\n        doThrow(new IOException()).when(download).write(any(HttpServletResponse.class));\n\n        try {\n            interceptor.intercept(stack, resourceMethod, null);\n            fail(\"expected InterceptionException\");\n        } catch (InterceptionException e) {\n            \n        }\n    }\n    \n    @Test\n    public void shouldNotAcceptStringReturn() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"string\"));\n        Assert.assertFalse(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n\t@Test\n\tpublic void shouldAcceptFile() throws Exception {\n\t    ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"file\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n\t}\n\n    @Test\n    public void shouldAcceptInput() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"input\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptDownload() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"download\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptByte() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"asByte\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n\tprivate Matcher<byte[]> arrayStartingWith(final byte[] array) {\n\t\treturn new TypeSafeMatcher<byte[]>() {\n\t\t\t@Override\n\t\t\tprotected void describeMismatchSafely(byte[] item, Description mismatchDescription) {\n\t\t\t}\n\t\t\t@Override\n\t\t\tprotected boolean matchesSafely(byte[] item) {\n\t\t\t\tif (item.length < array.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\t\tif (array[i] != item[i]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"a byte array starting with \" + Arrays.toString(array));\n\t\t\t}\n\t\t};\n\t}\n\tstatic class FakeResource {\n\t\tpublic String string() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic File file() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic InputStream input() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic Download download() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic byte[] asByte() {\n\t\t    return null;\n\t\t}\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.not;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.argThat;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.interceptor.download.Download;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DownloadInterceptorTest {\n\n    private DownloadInterceptor interceptor;\n\n    @Mock private MethodInfo info;\n\t@Mock private HttpServletResponse response;\n\t@Mock private ResourceMethod resourceMethod;\n\t@Mock private InterceptorStack stack;\n\t@Mock private ServletOutputStream outputStream;\n\t@Mock private Result result;\n\n    @Before\n    public void setup() throws Exception {\n    \tMockitoAnnotations.initMocks(this);\n\n\t\twhen(response.getOutputStream()).thenReturn(outputStream);\n\n        interceptor = new DownloadInterceptor(response, info, result);\n    }\n\n\t@Test\n\tpublic void whenResultIsADownloadShouldUseIt() throws Exception {\n\t\tDownload download = mock(Download.class);\n\n\t\twhen(info.getResult()).thenReturn(download);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(download).write(response);\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAInputStreamDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(new ByteArrayInputStream(bytes));\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAByteArrayDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(bytes);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAFileShouldCreateAFileDownload() throws Exception {\n\t\tFile tmp = File.createTempFile(\"test\", \"test\");\n\t\tnew PrintWriter(tmp).append(\"abc\").close();\n\n\t\twhen(info.getResult()).thenReturn(tmp);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(\"abc\".getBytes()))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasUsedShouldDoNothing() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(true);\n\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(stack).next(resourceMethod, null);\n\t\tverifyZeroInteractions(response);\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasNotUsedShouldThrowNPE() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(false);\n\n\t\ttry {\n\t\t\tinterceptor.intercept(stack, resourceMethod, null);\n\t\t\tfail(\"expected NullPointerException\");\n\t\t} catch (NullPointerException e) {\n\t\t\tverifyZeroInteractions(response);\n\t\t}\n\t}\n\t\n    @Test\n    public void shouldThrowInterceptionExceptionIfIOExceptionOccurs() throws Exception {\n        Download download = mock(Download.class);\n        \n        when(info.getResult()).thenReturn(download);\n        when(result.used()).thenReturn(false);\n        doThrow(new IOException()).when(download).write(any(HttpServletResponse.class));\n\n        try {\n            interceptor.intercept(stack, resourceMethod, null);\n            fail(\"expected InterceptionException\");\n        } catch (InterceptionException e) {\n            \n        }\n    }\n    \n    @Test\n    public void shouldNotAcceptStringReturn() throws Exception {\n        Method method = FakeResource.class.getMethod(\"string\");\n        assertThat(interceptor, not(accepts(method)));\n    }\n    \n\t@Test\n\tpublic void shouldAcceptFile() throws Exception {\n\t    Method method = FakeResource.class.getMethod(\"file\");\n        assertThat(interceptor, accepts(method));\n\t}\n\n    @Test\n    public void shouldAcceptInput() throws Exception {\n        Method method = FakeResource.class.getMethod(\"input\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptDownload() throws Exception {\n        Method method = FakeResource.class.getMethod(\"download\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptByte() throws Exception {\n        Method method = FakeResource.class.getMethod(\"asByte\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    private Matcher<Interceptor> accepts(final Method method) {\n    \treturn new TypeSafeMatcher<Interceptor>() {\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"the method \").appendValue(method);\n\t\t\t}\n\n\t\t\tprotected boolean matchesSafely(Interceptor item) {\n\t\t\t\tResourceMethod m = DefaultResourceMethod.instanceFor(method.getDeclaringClass(), method);\n\t\t\t\treturn interceptor.accepts(m);\n\t\t\t}\n\n\t\t\tprotected void describeMismatchSafely(Interceptor item, Description mismatchDescription) {\n\t\t\t}\n\t\t};\n    }\n    \n\tprivate Matcher<byte[]> arrayStartingWith(final byte[] array) {\n\t\treturn new TypeSafeMatcher<byte[]>() {\n\t\t\tprotected void describeMismatchSafely(byte[] item, Description mismatchDescription) {\n\t\t\t}\n\t\t\t\n\t\t\tprotected boolean matchesSafely(byte[] item) {\n\t\t\t\tif (item.length < array.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\t\tif (array[i] != item[i]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"a byte array starting with \" + Arrays.toString(array));\n\t\t\t}\n\t\t};\n\t}\n\tstatic class FakeResource {\n\t\tpublic String string() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic File file() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic InputStream input() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic Download download() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic byte[] asByte() {\n\t\t    return null;\n\t\t}\n\t}\n}\n","lineNo":181}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.argThat;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\n\nimport junit.framework.Assert;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.interceptor.download.Download;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DownloadInterceptorTest {\n\n    private DownloadInterceptor interceptor;\n\n    @Mock private MethodInfo info;\n\t@Mock private HttpServletResponse response;\n\t@Mock private ResourceMethod resourceMethod;\n\t@Mock private InterceptorStack stack;\n\t@Mock private ServletOutputStream outputStream;\n\t@Mock private Result result;\n\n    @Before\n    public void setup() throws Exception {\n    \tMockitoAnnotations.initMocks(this);\n\n\t\twhen(response.getOutputStream()).thenReturn(outputStream);\n\n        interceptor = new DownloadInterceptor(response, info, result);\n    }\n\n\t@Test\n\tpublic void whenResultIsADownloadShouldUseIt() throws Exception {\n\t\tDownload download = mock(Download.class);\n\n\t\twhen(info.getResult()).thenReturn(download);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(download).write(response);\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAInputStreamDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(new ByteArrayInputStream(bytes));\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAByteArrayDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(bytes);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAFileShouldCreateAFileDownload() throws Exception {\n\t\tFile tmp = File.createTempFile(\"test\", \"test\");\n\t\tnew PrintWriter(tmp).append(\"abc\").close();\n\n\t\twhen(info.getResult()).thenReturn(tmp);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(\"abc\".getBytes()))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasUsedShouldDoNothing() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(true);\n\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(stack).next(resourceMethod, null);\n\t\tverifyZeroInteractions(response);\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasNotUsedShouldThrowNPE() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(false);\n\n\t\ttry {\n\t\t\tinterceptor.intercept(stack, resourceMethod, null);\n\t\t\tfail(\"expected NullPointerException\");\n\t\t} catch (NullPointerException e) {\n\t\t\tverifyZeroInteractions(response);\n\t\t}\n\t}\n\t\n    @Test\n    public void shouldThrowsInterceptionExceptionIfIOExceptionOccurs() throws Exception {\n        Download download = mock(Download.class);\n        \n        when(info.getResult()).thenReturn(download);\n        when(result.used()).thenReturn(false);\n        doThrow(new IOException()).when(download).write(any(HttpServletResponse.class));\n\n        try {\n            interceptor.intercept(stack, resourceMethod, null);\n            fail(\"expected InterceptionException\");\n        } catch (InterceptionException e) {\n            \n        }\n    }\n    \n    @Test\n    public void shouldNotAcceptStringReturn() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"string\"));\n        Assert.assertFalse(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n\t@Test\n\tpublic void shouldAcceptFile() throws Exception {\n\t    ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"file\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n\t}\n\n    @Test\n    public void shouldAcceptInput() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"input\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptDownload() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"download\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptByte() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"asByte\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n\tprivate Matcher<byte[]> arrayStartingWith(final byte[] array) {\n\t\treturn new TypeSafeMatcher<byte[]>() {\n\t\t\t@Override\n\t\t\tprotected void describeMismatchSafely(byte[] item, Description mismatchDescription) {\n\t\t\t}\n\t\t\t@Override\n\t\t\tprotected boolean matchesSafely(byte[] item) {\n\t\t\t\tif (item.length < array.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\t\tif (array[i] != item[i]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"a byte array starting with \" + Arrays.toString(array));\n\t\t\t}\n\t\t};\n\t}\n\tstatic class FakeResource {\n\t\tpublic String string() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic File file() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic InputStream input() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic Download download() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic byte[] asByte() {\n\t\t    return null;\n\t\t}\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.not;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.argThat;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.interceptor.download.Download;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DownloadInterceptorTest {\n\n    private DownloadInterceptor interceptor;\n\n    @Mock private MethodInfo info;\n\t@Mock private HttpServletResponse response;\n\t@Mock private ResourceMethod resourceMethod;\n\t@Mock private InterceptorStack stack;\n\t@Mock private ServletOutputStream outputStream;\n\t@Mock private Result result;\n\n    @Before\n    public void setup() throws Exception {\n    \tMockitoAnnotations.initMocks(this);\n\n\t\twhen(response.getOutputStream()).thenReturn(outputStream);\n\n        interceptor = new DownloadInterceptor(response, info, result);\n    }\n\n\t@Test\n\tpublic void whenResultIsADownloadShouldUseIt() throws Exception {\n\t\tDownload download = mock(Download.class);\n\n\t\twhen(info.getResult()).thenReturn(download);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(download).write(response);\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAInputStreamDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(new ByteArrayInputStream(bytes));\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAByteArrayDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(bytes);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAFileShouldCreateAFileDownload() throws Exception {\n\t\tFile tmp = File.createTempFile(\"test\", \"test\");\n\t\tnew PrintWriter(tmp).append(\"abc\").close();\n\n\t\twhen(info.getResult()).thenReturn(tmp);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(\"abc\".getBytes()))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasUsedShouldDoNothing() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(true);\n\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(stack).next(resourceMethod, null);\n\t\tverifyZeroInteractions(response);\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasNotUsedShouldThrowNPE() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(false);\n\n\t\ttry {\n\t\t\tinterceptor.intercept(stack, resourceMethod, null);\n\t\t\tfail(\"expected NullPointerException\");\n\t\t} catch (NullPointerException e) {\n\t\t\tverifyZeroInteractions(response);\n\t\t}\n\t}\n\t\n    @Test\n    public void shouldThrowInterceptionExceptionIfIOExceptionOccurs() throws Exception {\n        Download download = mock(Download.class);\n        \n        when(info.getResult()).thenReturn(download);\n        when(result.used()).thenReturn(false);\n        doThrow(new IOException()).when(download).write(any(HttpServletResponse.class));\n\n        try {\n            interceptor.intercept(stack, resourceMethod, null);\n            fail(\"expected InterceptionException\");\n        } catch (InterceptionException e) {\n            \n        }\n    }\n    \n    @Test\n    public void shouldNotAcceptStringReturn() throws Exception {\n        Method method = FakeResource.class.getMethod(\"string\");\n        assertThat(interceptor, not(accepts(method)));\n    }\n    \n\t@Test\n\tpublic void shouldAcceptFile() throws Exception {\n\t    Method method = FakeResource.class.getMethod(\"file\");\n        assertThat(interceptor, accepts(method));\n\t}\n\n    @Test\n    public void shouldAcceptInput() throws Exception {\n        Method method = FakeResource.class.getMethod(\"input\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptDownload() throws Exception {\n        Method method = FakeResource.class.getMethod(\"download\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptByte() throws Exception {\n        Method method = FakeResource.class.getMethod(\"asByte\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    private Matcher<Interceptor> accepts(final Method method) {\n    \treturn new TypeSafeMatcher<Interceptor>() {\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"the method \").appendValue(method);\n\t\t\t}\n\n\t\t\tprotected boolean matchesSafely(Interceptor item) {\n\t\t\t\tResourceMethod m = DefaultResourceMethod.instanceFor(method.getDeclaringClass(), method);\n\t\t\t\treturn interceptor.accepts(m);\n\t\t\t}\n\n\t\t\tprotected void describeMismatchSafely(Interceptor item, Description mismatchDescription) {\n\t\t\t}\n\t\t};\n    }\n    \n\tprivate Matcher<byte[]> arrayStartingWith(final byte[] array) {\n\t\treturn new TypeSafeMatcher<byte[]>() {\n\t\t\tprotected void describeMismatchSafely(byte[] item, Description mismatchDescription) {\n\t\t\t}\n\t\t\t\n\t\t\tprotected boolean matchesSafely(byte[] item) {\n\t\t\t\tif (item.length < array.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\t\tif (array[i] != item[i]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"a byte array starting with \" + Arrays.toString(array));\n\t\t\t}\n\t\t};\n\t}\n\tstatic class FakeResource {\n\t\tpublic String string() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic File file() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic InputStream input() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic Download download() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic byte[] asByte() {\n\t\t    return null;\n\t\t}\n\t}\n}\n","lineNo":187}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.argThat;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\n\nimport junit.framework.Assert;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.interceptor.download.Download;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DownloadInterceptorTest {\n\n    private DownloadInterceptor interceptor;\n\n    @Mock private MethodInfo info;\n\t@Mock private HttpServletResponse response;\n\t@Mock private ResourceMethod resourceMethod;\n\t@Mock private InterceptorStack stack;\n\t@Mock private ServletOutputStream outputStream;\n\t@Mock private Result result;\n\n    @Before\n    public void setup() throws Exception {\n    \tMockitoAnnotations.initMocks(this);\n\n\t\twhen(response.getOutputStream()).thenReturn(outputStream);\n\n        interceptor = new DownloadInterceptor(response, info, result);\n    }\n\n\t@Test\n\tpublic void whenResultIsADownloadShouldUseIt() throws Exception {\n\t\tDownload download = mock(Download.class);\n\n\t\twhen(info.getResult()).thenReturn(download);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(download).write(response);\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAInputStreamDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(new ByteArrayInputStream(bytes));\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAByteArrayDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(bytes);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAFileShouldCreateAFileDownload() throws Exception {\n\t\tFile tmp = File.createTempFile(\"test\", \"test\");\n\t\tnew PrintWriter(tmp).append(\"abc\").close();\n\n\t\twhen(info.getResult()).thenReturn(tmp);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(\"abc\".getBytes()))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasUsedShouldDoNothing() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(true);\n\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(stack).next(resourceMethod, null);\n\t\tverifyZeroInteractions(response);\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasNotUsedShouldThrowNPE() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(false);\n\n\t\ttry {\n\t\t\tinterceptor.intercept(stack, resourceMethod, null);\n\t\t\tfail(\"expected NullPointerException\");\n\t\t} catch (NullPointerException e) {\n\t\t\tverifyZeroInteractions(response);\n\t\t}\n\t}\n\t\n    @Test\n    public void shouldThrowsInterceptionExceptionIfIOExceptionOccurs() throws Exception {\n        Download download = mock(Download.class);\n        \n        when(info.getResult()).thenReturn(download);\n        when(result.used()).thenReturn(false);\n        doThrow(new IOException()).when(download).write(any(HttpServletResponse.class));\n\n        try {\n            interceptor.intercept(stack, resourceMethod, null);\n            fail(\"expected InterceptionException\");\n        } catch (InterceptionException e) {\n            \n        }\n    }\n    \n    @Test\n    public void shouldNotAcceptStringReturn() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"string\"));\n        Assert.assertFalse(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n\t@Test\n\tpublic void shouldAcceptFile() throws Exception {\n\t    ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"file\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n\t}\n\n    @Test\n    public void shouldAcceptInput() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"input\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptDownload() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"download\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptByte() throws Exception {\n        ResourceMethod method = DefaultResourceMethod.instanceFor(FakeResource.class, FakeResource.class.getMethod(\"asByte\"));\n        Assert.assertTrue(new DownloadInterceptor(null, null, null).accepts(method));\n    }\n    \n\tprivate Matcher<byte[]> arrayStartingWith(final byte[] array) {\n\t\treturn new TypeSafeMatcher<byte[]>() {\n\t\t\t@Override\n\t\t\tprotected void describeMismatchSafely(byte[] item, Description mismatchDescription) {\n\t\t\t}\n\t\t\t@Override\n\t\t\tprotected boolean matchesSafely(byte[] item) {\n\t\t\t\tif (item.length < array.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\t\tif (array[i] != item[i]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"a byte array starting with \" + Arrays.toString(array));\n\t\t\t}\n\t\t};\n\t}\n\tstatic class FakeResource {\n\t\tpublic String string() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic File file() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic InputStream input() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic Download download() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic byte[] asByte() {\n\t\t    return null;\n\t\t}\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.not;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.fail;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.argThat;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.verifyZeroInteractions;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\n\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.interceptor.download.Download;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class DownloadInterceptorTest {\n\n    private DownloadInterceptor interceptor;\n\n    @Mock private MethodInfo info;\n\t@Mock private HttpServletResponse response;\n\t@Mock private ResourceMethod resourceMethod;\n\t@Mock private InterceptorStack stack;\n\t@Mock private ServletOutputStream outputStream;\n\t@Mock private Result result;\n\n    @Before\n    public void setup() throws Exception {\n    \tMockitoAnnotations.initMocks(this);\n\n\t\twhen(response.getOutputStream()).thenReturn(outputStream);\n\n        interceptor = new DownloadInterceptor(response, info, result);\n    }\n\n\t@Test\n\tpublic void whenResultIsADownloadShouldUseIt() throws Exception {\n\t\tDownload download = mock(Download.class);\n\n\t\twhen(info.getResult()).thenReturn(download);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(download).write(response);\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAInputStreamDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(new ByteArrayInputStream(bytes));\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsAnInputStreamShouldCreateAByteArrayDownload() throws Exception {\n\t\tbyte[] bytes = \"abc\".getBytes();\n\t\twhen(info.getResult()).thenReturn(bytes);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(bytes))), eq(0), eq(3));\n\n\t}\n\n\t@Test\n\tpublic void whenResultIsAFileShouldCreateAFileDownload() throws Exception {\n\t\tFile tmp = File.createTempFile(\"test\", \"test\");\n\t\tnew PrintWriter(tmp).append(\"abc\").close();\n\n\t\twhen(info.getResult()).thenReturn(tmp);\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(outputStream).write(argThat(is(arrayStartingWith(\"abc\".getBytes()))), eq(0), eq(3));\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasUsedShouldDoNothing() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(true);\n\n\n\t\tinterceptor.intercept(stack, resourceMethod, null);\n\n\t\tverify(stack).next(resourceMethod, null);\n\t\tverifyZeroInteractions(response);\n\n\t}\n\t@Test\n\tpublic void whenResultIsNullAndResultWasNotUsedShouldThrowNPE() throws Exception {\n\t\twhen(info.getResult()).thenReturn(null);\n\t\twhen(result.used()).thenReturn(false);\n\n\t\ttry {\n\t\t\tinterceptor.intercept(stack, resourceMethod, null);\n\t\t\tfail(\"expected NullPointerException\");\n\t\t} catch (NullPointerException e) {\n\t\t\tverifyZeroInteractions(response);\n\t\t}\n\t}\n\t\n    @Test\n    public void shouldThrowInterceptionExceptionIfIOExceptionOccurs() throws Exception {\n        Download download = mock(Download.class);\n        \n        when(info.getResult()).thenReturn(download);\n        when(result.used()).thenReturn(false);\n        doThrow(new IOException()).when(download).write(any(HttpServletResponse.class));\n\n        try {\n            interceptor.intercept(stack, resourceMethod, null);\n            fail(\"expected InterceptionException\");\n        } catch (InterceptionException e) {\n            \n        }\n    }\n    \n    @Test\n    public void shouldNotAcceptStringReturn() throws Exception {\n        Method method = FakeResource.class.getMethod(\"string\");\n        assertThat(interceptor, not(accepts(method)));\n    }\n    \n\t@Test\n\tpublic void shouldAcceptFile() throws Exception {\n\t    Method method = FakeResource.class.getMethod(\"file\");\n        assertThat(interceptor, accepts(method));\n\t}\n\n    @Test\n    public void shouldAcceptInput() throws Exception {\n        Method method = FakeResource.class.getMethod(\"input\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptDownload() throws Exception {\n        Method method = FakeResource.class.getMethod(\"download\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    @Test\n    public void shouldAcceptByte() throws Exception {\n        Method method = FakeResource.class.getMethod(\"asByte\");\n        assertThat(interceptor, accepts(method));\n    }\n    \n    private Matcher<Interceptor> accepts(final Method method) {\n    \treturn new TypeSafeMatcher<Interceptor>() {\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"the method \").appendValue(method);\n\t\t\t}\n\n\t\t\tprotected boolean matchesSafely(Interceptor item) {\n\t\t\t\tResourceMethod m = DefaultResourceMethod.instanceFor(method.getDeclaringClass(), method);\n\t\t\t\treturn interceptor.accepts(m);\n\t\t\t}\n\n\t\t\tprotected void describeMismatchSafely(Interceptor item, Description mismatchDescription) {\n\t\t\t}\n\t\t};\n    }\n    \n\tprivate Matcher<byte[]> arrayStartingWith(final byte[] array) {\n\t\treturn new TypeSafeMatcher<byte[]>() {\n\t\t\tprotected void describeMismatchSafely(byte[] item, Description mismatchDescription) {\n\t\t\t}\n\t\t\t\n\t\t\tprotected boolean matchesSafely(byte[] item) {\n\t\t\t\tif (item.length < array.length) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < array.length; i++) {\n\t\t\t\t\tif (array[i] != item[i]) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tpublic void describeTo(Description description) {\n\t\t\t\tdescription.appendText(\"a byte array starting with \" + Arrays.toString(array));\n\t\t\t}\n\t\t};\n\t}\n\tstatic class FakeResource {\n\t\tpublic String string() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic File file() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic InputStream input() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic Download download() {\n\t\t\treturn null;\n\t\t}\n\t\tpublic byte[] asByte() {\n\t\t    return null;\n\t\t}\n\t}\n}\n","lineNo":193}
{"Smelly Sample":"package br.com.caelum.vraptor.interceptor.multipart;\n\nimport static com.google.common.collect.Lists.newArrayList;\nimport static com.google.common.io.ByteStreams.toByteArray;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.FileItemFactory;\nimport org.apache.commons.fileupload.FileUploadBase;\nimport org.apache.commons.fileupload.FileUploadException;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.InvalidParameterException;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Validations;\n\n/**\n * Test class for uploading features using commons-fileupload.\n * \n * @author Otávio Scherer Garcia\n */\npublic class CommonsUploadMultipartInterceptorTest {\n\n    private Object instance;\n    @Mock private InterceptorStack stack;\n    @Mock private ResourceMethod method;\n    @Mock private HttpServletRequest request;\n    @Mock private MutableRequest parameters;\n    @Mock private Validator validator;\n    private MultipartConfig config;\n    private CommonsUploadMultipartInterceptor interceptor;\n    private ServletFileUpload mockUpload;\n    private ServletFileUploadCreator mockCreator;\n\n    @Before\n    public void setup() {\n        config = new DefaultMultipartConfig();\n\n        MockitoAnnotations.initMocks(this);\n\n        mockCreator = mock(ServletFileUploadCreator.class);\n        mockUpload = mock(ServletFileUpload.class);\n        when(mockCreator.create(Mockito.any(FileItemFactory.class))).thenReturn(mockUpload);\n    }\n\n    @Test\n    public void shouldNotAcceptFormURLEncoded() {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, null);\n\n        when(request.getContentType()).thenReturn(\"application/x-www-form-urlencoded\");\n        when(request.getMethod()).thenReturn(\"POST\");\n\n        assertThat(interceptor.accepts(method), equalTo(false));\n    }\n\n    @Test\n    public void shouldAcceptMultipart() {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, null);\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n\n        assertThat(interceptor.accepts(method), equalTo(true));\n    }\n\n    @Test\n    public void withFieldsOnly() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"foo\", \"blah\"));\n        elements.add(new MockFileItem(\"bar\", \"blah blah\"));\n\n        when(request.getCharacterEncoding()).thenReturn(\"utf-8\");\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n\n        verify(parameters).setParameter(\"foo\", \"blah\");\n        verify(parameters).setParameter(\"bar\", \"blah blah\");\n    }\n\n    @Test\n    public void withFieldsOnlyWithInvalidCharset() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"foo\", \"blah\"));\n        elements.add(new MockFileItem(\"bar\", \"blah blah\"));\n\n        when(request.getCharacterEncoding()).thenReturn(\"www\");\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n\n        verify(parameters).setParameter(\"foo\", \"blah\");\n        verify(parameters).setParameter(\"bar\", \"blah blah\");\n    }\n    \n    @Test\n    public void withFilesAndFields() throws Exception {\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"foo\", \"blah\"));\n        elements.add(new MockFileItem(\"bar\", \"blah blah\"));\n        elements.add(new MockFileItem(\"thefile0\", \"foo.txt\", \"foo\".getBytes()));\n        elements.add(new MockFileItem(\"thefile1\", \"bar.txt\", \"bar\".getBytes()));\n\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n\n        verify(parameters).setParameter(\"foo\", \"blah\");\n        verify(parameters).setParameter(\"bar\", \"blah blah\");\n        \n        verify(parameters).setParameter(\"thefile0\", \"thefile0\");\n        verify(parameters).setParameter(\"thefile1\", \"thefile1\");\n        \n        verify(request).setAttribute(eq(\"thefile0\"), any(UploadedFile.class));\n        verify(request).setAttribute(eq(\"thefile1\"), any(UploadedFile.class));\n    }\n    \n    @Test\n    public void emptyFiles() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n    \t\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"thefile0\", \"\", new byte[0]));\n        \n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n        \n        interceptor.intercept(stack, method, instance);\n    }\n    \n\t@Test(expected = InvalidParameterException.class)\n    public void throwsInvalidParameterExceptionIfIOExceptionOccurs() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n    \t\n        MockFileItem item = new MockFileItem(\"thefile0\", \"file.txt\", new byte[0]);\n        item = spy(item);\n        \n        doThrow(new IOException()).when(item).getInputStream();\n        \n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(newArrayList(item));\n        \n        interceptor.intercept(stack, method, instance);\n    }\n\t\n    @Test\n    public void fieldsWithSameName() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"myfile0\", \"foo.txt\", \"foo\".getBytes()));\n        elements.add(new MockFileItem(\"myfile1\", \"foo.txt\", \"bar\".getBytes()));\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n\n        verify(parameters).setParameter(\"myfile0\", \"myfile0\");\n        verify(parameters).setParameter(\"myfile1\", \"myfile1\");\n        \n        verify(request).setAttribute(eq(\"myfile0\"), any(UploadedFile.class));\n        verify(request).setAttribute(eq(\"myfile1\"), any(UploadedFile.class));\n    }\n    \n    @Test\n    public void multipleUpload() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"myfile0[]\", \"foo.txt\", \"foo\".getBytes()));\n        elements.add(new MockFileItem(\"myfile0[]\", \"foo.txt\", \"bar\".getBytes()));\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n        \n        verify(parameters).setParameter(\"myfile0[0]\", \"myfile0[0]\");\n        verify(parameters).setParameter(\"myfile0[1]\", \"myfile0[1]\");\n        \n        verify(request).setAttribute(eq(\"myfile0[0]\"), any(UploadedFile.class));\n        verify(request).setAttribute(eq(\"myfile0[1]\"), any(UploadedFile.class));\n    }\n    \n    @Test\n    public void doNothingWhenFileUploadExceptionOccurs() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n        \n        when(mockUpload.parseRequest(request)).thenThrow(new FileUploadException());\n    \t\n        interceptor.intercept(stack, method, instance);\n    }\n\n    @Test\n    public void shouldValidateWhenSizeLimitExceededExceptionOccurs() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n        \n        when(mockUpload.parseRequest(request)).thenThrow(new FileUploadBase.SizeLimitExceededException(\"\", 0L, 0L));\n    \t\n        interceptor.intercept(stack, method, instance);\n        \n        verify(validator).checking(any(Validations.class));\n    }\n    \n    @Test\n    public void shouldCreateDirInsideAppIfTempDirAreNotAvailable() throws Exception {\n    \tDefaultMultipartConfig configSpy = (DefaultMultipartConfig) Mockito.spy(config);\n    \tMockito.doThrow(new IOException()).when(configSpy).createTempFile();\n    \t\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, configSpy, validator, mockCreator);\n\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"myfile\", \"foo.txt\", \"bar\".getBytes()));\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n        \n        verify(configSpy).createDirInsideApplication();\n    }\n\n    @Test\n    public void checkUploadedFile() throws Exception {\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"thefile0\", \"text/plain\", \"foo.txt\", \"foo\".getBytes()));\n        \n        final Map<String, Object> attributes = new LinkedHashMap<String, Object>();\n\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        \n        Mockito.doAnswer(new Answer<Object>() {\n        \tpublic Object answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n        \t\tattributes.put((String) args[0], args[1]);\n        \t\treturn null;\n        \t}\n\t\t}).when(request).setAttribute(Mockito.anyString(), Mockito.anyString());\n        \n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n        \n        UploadedFile file = (UploadedFile) attributes.get(\"thefile0\");\n\n\t\tassertEquals(\"foo.txt\", file.getFileName());\n\t\tassertEquals(\"text/plain\", file.getContentType());\n\t\tassertEquals(\"foo\", new String(toByteArray(file.getFile())));\n    }\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.interceptor.multipart;\n\nimport static com.google.common.collect.Lists.newArrayList;\nimport static com.google.common.io.ByteStreams.toByteArray;\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.junit.Assert.assertEquals;\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doThrow;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.spy;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.FileItemFactory;\nimport org.apache.commons.fileupload.FileUploadBase;\nimport org.apache.commons.fileupload.FileUploadException;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.InvalidParameterException;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Validations;\n\n/**\n * Test class for uploading features using commons-fileupload.\n * \n * @author Otávio Scherer Garcia\n */\npublic class CommonsUploadMultipartInterceptorTest {\n\n    private Object instance;\n    @Mock private InterceptorStack stack;\n    @Mock private ResourceMethod method;\n    @Mock private HttpServletRequest request;\n    @Mock private MutableRequest parameters;\n    @Mock private Validator validator;\n    private MultipartConfig config;\n    private CommonsUploadMultipartInterceptor interceptor;\n    private ServletFileUpload mockUpload;\n    private ServletFileUploadCreator mockCreator;\n\n    @Before\n    public void setup() {\n        config = new DefaultMultipartConfig();\n\n        MockitoAnnotations.initMocks(this);\n\n        mockCreator = mock(ServletFileUploadCreator.class);\n        mockUpload = mock(ServletFileUpload.class);\n        when(mockCreator.create(any(FileItemFactory.class))).thenReturn(mockUpload);\n    }\n\n    @Test\n    public void shouldNotAcceptFormURLEncoded() {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, null);\n\n        when(request.getContentType()).thenReturn(\"application/x-www-form-urlencoded\");\n        when(request.getMethod()).thenReturn(\"POST\");\n\n        assertThat(interceptor.accepts(method), equalTo(false));\n    }\n\n    @Test\n    public void shouldAcceptMultipart() {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, null);\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n\n        assertThat(interceptor.accepts(method), equalTo(true));\n    }\n\n    @Test\n    public void withFieldsOnly() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"foo\", \"blah\"));\n        elements.add(new MockFileItem(\"bar\", \"blah blah\"));\n\n        when(request.getCharacterEncoding()).thenReturn(\"utf-8\");\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n\n        verify(parameters).setParameter(\"foo\", \"blah\");\n        verify(parameters).setParameter(\"bar\", \"blah blah\");\n    }\n\n    @Test\n    public void withFieldsOnlyWithInvalidCharset() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"foo\", \"blah\"));\n        elements.add(new MockFileItem(\"bar\", \"blah blah\"));\n\n        when(request.getCharacterEncoding()).thenReturn(\"www\");\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n\n        verify(parameters).setParameter(\"foo\", \"blah\");\n        verify(parameters).setParameter(\"bar\", \"blah blah\");\n    }\n    \n    @Test\n    public void withFilesAndFields() throws Exception {\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"foo\", \"blah\"));\n        elements.add(new MockFileItem(\"bar\", \"blah blah\"));\n        elements.add(new MockFileItem(\"thefile0\", \"foo.txt\", \"foo\".getBytes()));\n        elements.add(new MockFileItem(\"thefile1\", \"bar.txt\", \"bar\".getBytes()));\n\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n\n        verify(parameters).setParameter(\"foo\", \"blah\");\n        verify(parameters).setParameter(\"bar\", \"blah blah\");\n        \n        verify(parameters).setParameter(\"thefile0\", \"thefile0\");\n        verify(parameters).setParameter(\"thefile1\", \"thefile1\");\n        \n        verify(request).setAttribute(eq(\"thefile0\"), any(UploadedFile.class));\n        verify(request).setAttribute(eq(\"thefile1\"), any(UploadedFile.class));\n    }\n    \n    @Test\n    public void emptyFiles() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n    \t\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"thefile0\", \"\", new byte[0]));\n        \n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n        \n        interceptor.intercept(stack, method, instance);\n    }\n    \n\t@Test(expected = InvalidParameterException.class)\n    public void throwsInvalidParameterExceptionIfIOExceptionOccurs() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n    \t\n        MockFileItem item = new MockFileItem(\"thefile0\", \"file.txt\", new byte[0]);\n        item = spy(item);\n        \n        doThrow(new IOException()).when(item).getInputStream();\n        \n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(newArrayList(item));\n        \n        interceptor.intercept(stack, method, instance);\n    }\n\t\n    @Test\n    public void fieldsWithSameName() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"myfile0\", \"foo.txt\", \"foo\".getBytes()));\n        elements.add(new MockFileItem(\"myfile1\", \"foo.txt\", \"bar\".getBytes()));\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n\n        verify(parameters).setParameter(\"myfile0\", \"myfile0\");\n        verify(parameters).setParameter(\"myfile1\", \"myfile1\");\n        \n        verify(request).setAttribute(eq(\"myfile0\"), any(UploadedFile.class));\n        verify(request).setAttribute(eq(\"myfile1\"), any(UploadedFile.class));\n    }\n    \n    @Test\n    public void multipleUpload() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"myfile0[]\", \"foo.txt\", \"foo\".getBytes()));\n        elements.add(new MockFileItem(\"myfile0[]\", \"foo.txt\", \"bar\".getBytes()));\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n        \n        verify(parameters).setParameter(\"myfile0[0]\", \"myfile0[0]\");\n        verify(parameters).setParameter(\"myfile0[1]\", \"myfile0[1]\");\n        \n        verify(request).setAttribute(eq(\"myfile0[0]\"), any(UploadedFile.class));\n        verify(request).setAttribute(eq(\"myfile0[1]\"), any(UploadedFile.class));\n    }\n    \n    @Test\n    public void doNothingWhenFileUploadExceptionOccurs() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n        \n        when(mockUpload.parseRequest(request)).thenThrow(new FileUploadException());\n    \t\n        interceptor.intercept(stack, method, instance);\n    }\n\n    @Test\n    public void shouldValidateWhenSizeLimitExceededExceptionOccurs() throws Exception {\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n        \n        when(mockUpload.parseRequest(request)).thenThrow(new FileUploadBase.SizeLimitExceededException(\"\", 0L, 0L));\n    \t\n        interceptor.intercept(stack, method, instance);\n        \n        verify(validator).checking(any(Validations.class));\n    }\n    \n    @Test\n    public void shouldCreateDirInsideAppIfTempDirAreNotAvailable() throws Exception {\n    \tDefaultMultipartConfig configSpy = (DefaultMultipartConfig) spy(config);\n    \tdoThrow(new IOException()).when(configSpy).createTempFile();\n    \t\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, configSpy, validator, mockCreator);\n\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"myfile\", \"foo.txt\", \"bar\".getBytes()));\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n        \n        verify(configSpy).createDirInsideApplication();\n    }\n\n    @Test\n    public void checkUploadedFile() throws Exception {\n        final List<FileItem> elements = new ArrayList<FileItem>();\n        elements.add(new MockFileItem(\"thefile0\", \"text/plain\", \"foo.txt\", \"foo\".getBytes()));\n        \n        final Map<String, Object> attributes = new LinkedHashMap<String, Object>();\n\n        interceptor = new CommonsUploadMultipartInterceptor(request, parameters, config, validator, mockCreator);\n\n        when(request.getContentType()).thenReturn(\"multipart/form-data\");\n        when(request.getMethod()).thenReturn(\"POST\");\n        \n        Answer<Object> answer = new Answer<Object>() {\n        \tpublic Object answer(InvocationOnMock invocation) throws Throwable {\n                Object[] args = invocation.getArguments();\n        \t\tattributes.put((String) args[0], args[1]);\n        \t\treturn null;\n        \t}\n\t\t};\n\t\t\n\t\tdoAnswer(answer).when(request).setAttribute(anyString(), anyString());\n        when(mockUpload.parseRequest(request)).thenReturn(elements);\n\n        interceptor.intercept(stack, method, instance);\n        \n        UploadedFile file = (UploadedFile) attributes.get(\"thefile0\");\n\n\t\tassertEquals(\"foo.txt\", file.getFileName());\n\t\tassertEquals(\"text/plain\", file.getContentType());\n\t\tassertEquals(\"foo\", new String(toByteArray(file.getFile())));\n    }\n}\n","lineNo":281}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - wwyhiw.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\nimport br.com.caelum.vraptor.HeaderParam;\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.view.FlashScope;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private @Mock MethodInfo params;\n    private @Mock ParametersProvider parametersProvider;\n\tprivate @Mock Validator validator;\n\tprivate @Mock Localization localization;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock ResourceBundle bundle;\n\tprivate @Mock MutableRequest request;\n\tprivate @Mock FlashScope flash;\n\n\tprivate List<Message> errors ;\n\tprivate ParametersInstantiatorInterceptor instantiator;\n\n\tprivate ResourceMethod method;\n\tprivate ResourceMethod otherMethod;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\twhen(localization.getBundle()).thenReturn(bundle);\n\t\twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Collections.EMPTY_LIST));\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, params, validator, localization, request, flash);\n\n        this.errors = (List<Message>) new Mirror().on(instantiator).get().field(\"errors\");\n        this.method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n        this.otherMethod = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"otherMethod\", int.class));\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n    }\n    \n    class HeaderParamComponent{\n    \tvoid method(@HeaderParam(\"password\") String password) {}\n    \tvoid otherMethod(@HeaderParam(\"user\") String user,@HeaderParam(\"password\") String password, @HeaderParam(\"token\") String token) {}\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\n    \tObject[] values = new Object[] { new Object() };\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n    }\n\n    @Test\n    public void shouldConvertArrayParametersToIndexParameters() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam[].id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam[].id\")).thenReturn(new String[] {\"one\", \"two\", \"three\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(request).setParameter(\"someParam[0].id\", \"one\");\n    \tverify(request).setParameter(\"someParam[1].id\", \"two\");\n    \tverify(request).setParameter(\"someParam[2].id\", \"three\");\n    }\n\n    /**\n     * Bug related\n     */\n    @Test(expected=IllegalArgumentException.class)\n    public void shouldThrowExceptionWhenThereIsAParameterContainingDotClass() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam.class.id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam.class.id\")).thenReturn(new String[] {\"whatever\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    }\n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\t\tObject[] values = new Object[] { new Object() };\n\n\t\twhen(flash.consumeParameters(method)).thenReturn(values);\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(params).setParameters(values);\n    \tverify(stack).next(method, null);\n    \tverify(validator).addAll(Collections.<Message>emptyList());\n    \tverify(parametersProvider, never()).getParametersFor(method, errors, bundle);\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n    \tObject[] values = new Object[]{0};\n\n    \twhen(parametersProvider.getParametersFor(otherMethod, errors, bundle)).thenAnswer(addErrorsToListAndReturn(values, \"error1\"));\n\n        instantiator.intercept(stack, otherMethod, null);\n\n        verify(validator).addAll(errors);\n        verify(stack).next(otherMethod, null);\n        verify(params).setParameters(values);\n    }\n\n\t@Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenThrow(new RuntimeException());\n\n        instantiator.intercept(stack, method, null);\n    }\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, HeaderParamComponent.class.getDeclaredMethod(\"method\", String.class));\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n        \n        verify(request).setAttribute(\"password\", \"123\");\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsNotPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n        \n        verify(request, never()).setAttribute(\"password\", \"123\");\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddVariousHeaderInformationsToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, HeaderParamComponent.class.getDeclaredMethod(\"otherMethod\", String.class, String.class, String.class));\n\t\t\n\t\twhen(request.getHeader(\"user\")).thenReturn(\"user\");\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n\t\twhen(request.getHeader(\"token\")).thenReturn(\"daek2321\");\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n        \n        verify(request).setAttribute(\"user\", \"user\");\n        verify(request).setAttribute(\"password\", \"123\");\n        verify(request).setAttribute(\"token\", \"daek2321\");\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\n    private <T> Answer<T> addErrorsToListAndReturn(final T value, final String... messages) {\n    \treturn new Answer<T>() {\n\n\t\t\tpublic T answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t};\n\n    }\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - wwyhiw.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.anyString;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\nimport br.com.caelum.vraptor.HeaderParam;\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.view.FlashScope;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private @Mock MethodInfo params;\n    private @Mock ParametersProvider parametersProvider;\n    private @Mock ParameterNameProvider parameterNameProvider;\n\tprivate @Mock Validator validator;\n\tprivate @Mock Localization localization;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock ResourceBundle bundle;\n\tprivate @Mock MutableRequest request;\n\tprivate @Mock FlashScope flash;\n\n\tprivate List<Message> errors ;\n\tprivate ParametersInstantiatorInterceptor instantiator;\n\n\tprivate ResourceMethod method;\n\tprivate ResourceMethod otherMethod;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\twhen(localization.getBundle()).thenReturn(bundle);\n\t\twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Collections.EMPTY_LIST));\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, parameterNameProvider, params, validator, localization, request, flash);\n\n        this.errors = (List<Message>) new Mirror().on(instantiator).get().field(\"errors\");\n        this.method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n        this.otherMethod = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"otherMethod\", int.class));\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n    }\n    \n    class HeaderParamComponent{\n    \tvoid method(@HeaderParam(\"password\") String password) {}\n    \tvoid otherMethod(@HeaderParam(\"user\") String user,@HeaderParam(\"password\") String password, @HeaderParam(\"token\") String token) {}\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\n    \tObject[] values = new Object[] { new Object() };\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n    }\n\n    @Test\n    public void shouldConvertArrayParametersToIndexParameters() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam[].id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam[].id\")).thenReturn(new String[] {\"one\", \"two\", \"three\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(request).setParameter(\"someParam[0].id\", \"one\");\n    \tverify(request).setParameter(\"someParam[1].id\", \"two\");\n    \tverify(request).setParameter(\"someParam[2].id\", \"three\");\n    }\n\n    /**\n     * Bug related\n     */\n    @Test(expected=IllegalArgumentException.class)\n    public void shouldThrowExceptionWhenThereIsAParameterContainingDotClass() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam.class.id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam.class.id\")).thenReturn(new String[] {\"whatever\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    }\n    \n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\t\tObject[] values = new Object[] { new Object() };\n\n\t\twhen(flash.consumeParameters(method)).thenReturn(values);\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(params).setParameters(values);\n    \tverify(stack).next(method, null);\n    \tverify(validator).addAll(Collections.<Message>emptyList());\n    \tverify(parametersProvider, never()).getParametersFor(method, errors, bundle);\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n    \tObject[] values = new Object[]{0};\n\n    \twhen(parametersProvider.getParametersFor(otherMethod, errors, bundle)).thenAnswer(addErrorsToListAndReturn(values, \"error1\"));\n\n        instantiator.intercept(stack, otherMethod, null);\n\n        verify(validator).addAll(errors);\n        verify(stack).next(otherMethod, null);\n        verify(params).setParameters(values);\n    }\n\n\t@Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenThrow(new RuntimeException());\n\n        instantiator.intercept(stack, method, null);\n    }\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tMethod method = HeaderParamComponent.class.getDeclaredMethod(\"method\", String.class);\n\t\tResourceMethod resourceMethod = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, method);\n\t\t\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n    \twhen(parametersProvider.getParametersFor(resourceMethod, errors, bundle)).thenReturn(values);\n    \twhen(parameterNameProvider.parameterNamesFor(method)).thenReturn(new String[]{\"passwordParam\"});\n\n        instantiator.intercept(stack, resourceMethod, null);\n        \n\t\tverify(request).setParameter(\"passwordParam\", \"123\");\n        verify(params).setParameters(values);\n        verify(stack).next(resourceMethod, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsNotPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tMethod method = Component.class.getDeclaredMethod(\"method\");\n\t\tResourceMethod resourceMethod = DefaultResourceMethod.instanceFor(Component.class, method);\n\t\t\n    \twhen(parametersProvider.getParametersFor(resourceMethod, errors, bundle)).thenReturn(values);\n    \twhen(parameterNameProvider.parameterNamesFor(method)).thenReturn(new String[]{\"passwordParam\"});\n\n        instantiator.intercept(stack, resourceMethod, null);\n        \n        verify(request, never()).setParameter(anyString(), anyString());\n        verify(params).setParameters(values);\n        verify(stack).next(resourceMethod, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddVariousHeaderInformationsToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tMethod method = HeaderParamComponent.class.getDeclaredMethod(\"otherMethod\", String.class, String.class, String.class);\n\t\tResourceMethod resouceMethod = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, method);\n\t\t\n\t\twhen(request.getHeader(\"user\")).thenReturn(\"user\");\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n\t\twhen(request.getHeader(\"token\")).thenReturn(\"daek2321\");\n    \twhen(parametersProvider.getParametersFor(resouceMethod, errors, bundle)).thenReturn(values);\n    \twhen(parameterNameProvider.parameterNamesFor(method)).thenReturn(new String[]{\"UserParam\", \"PasswordParam\", \"TokenParam\"});\n\n        instantiator.intercept(stack, resouceMethod, null);\n        \n        verify(request).setParameter(\"UserParam\", \"user\");\n        verify(request).setParameter(\"PasswordParam\", \"123\");\n        verify(request).setParameter(\"TokenParam\", \"daek2321\");\n        verify(params).setParameters(values);\n        verify(stack).next(resouceMethod, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\n    private <T> Answer<T> addErrorsToListAndReturn(final T value, final String... messages) {\n    \treturn new Answer<T>() {\n\n\t\t\tpublic T answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t};\n\n    }\n}\n","lineNo":178}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - wwyhiw.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\nimport br.com.caelum.vraptor.HeaderParam;\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.view.FlashScope;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private @Mock MethodInfo params;\n    private @Mock ParametersProvider parametersProvider;\n\tprivate @Mock Validator validator;\n\tprivate @Mock Localization localization;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock ResourceBundle bundle;\n\tprivate @Mock MutableRequest request;\n\tprivate @Mock FlashScope flash;\n\n\tprivate List<Message> errors ;\n\tprivate ParametersInstantiatorInterceptor instantiator;\n\n\tprivate ResourceMethod method;\n\tprivate ResourceMethod otherMethod;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\twhen(localization.getBundle()).thenReturn(bundle);\n\t\twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Collections.EMPTY_LIST));\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, params, validator, localization, request, flash);\n\n        this.errors = (List<Message>) new Mirror().on(instantiator).get().field(\"errors\");\n        this.method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n        this.otherMethod = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"otherMethod\", int.class));\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n    }\n    \n    class HeaderParamComponent{\n    \tvoid method(@HeaderParam(\"password\") String password) {}\n    \tvoid otherMethod(@HeaderParam(\"user\") String user,@HeaderParam(\"password\") String password, @HeaderParam(\"token\") String token) {}\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\n    \tObject[] values = new Object[] { new Object() };\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n    }\n\n    @Test\n    public void shouldConvertArrayParametersToIndexParameters() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam[].id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam[].id\")).thenReturn(new String[] {\"one\", \"two\", \"three\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(request).setParameter(\"someParam[0].id\", \"one\");\n    \tverify(request).setParameter(\"someParam[1].id\", \"two\");\n    \tverify(request).setParameter(\"someParam[2].id\", \"three\");\n    }\n\n    /**\n     * Bug related\n     */\n    @Test(expected=IllegalArgumentException.class)\n    public void shouldThrowExceptionWhenThereIsAParameterContainingDotClass() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam.class.id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam.class.id\")).thenReturn(new String[] {\"whatever\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    }\n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\t\tObject[] values = new Object[] { new Object() };\n\n\t\twhen(flash.consumeParameters(method)).thenReturn(values);\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(params).setParameters(values);\n    \tverify(stack).next(method, null);\n    \tverify(validator).addAll(Collections.<Message>emptyList());\n    \tverify(parametersProvider, never()).getParametersFor(method, errors, bundle);\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n    \tObject[] values = new Object[]{0};\n\n    \twhen(parametersProvider.getParametersFor(otherMethod, errors, bundle)).thenAnswer(addErrorsToListAndReturn(values, \"error1\"));\n\n        instantiator.intercept(stack, otherMethod, null);\n\n        verify(validator).addAll(errors);\n        verify(stack).next(otherMethod, null);\n        verify(params).setParameters(values);\n    }\n\n\t@Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenThrow(new RuntimeException());\n\n        instantiator.intercept(stack, method, null);\n    }\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, HeaderParamComponent.class.getDeclaredMethod(\"method\", String.class));\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n        \n        verify(request).setAttribute(\"password\", \"123\");\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsNotPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n        \n        verify(request, never()).setAttribute(\"password\", \"123\");\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddVariousHeaderInformationsToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, HeaderParamComponent.class.getDeclaredMethod(\"otherMethod\", String.class, String.class, String.class));\n\t\t\n\t\twhen(request.getHeader(\"user\")).thenReturn(\"user\");\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n\t\twhen(request.getHeader(\"token\")).thenReturn(\"daek2321\");\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n        \n        verify(request).setAttribute(\"user\", \"user\");\n        verify(request).setAttribute(\"password\", \"123\");\n        verify(request).setAttribute(\"token\", \"daek2321\");\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\n    private <T> Answer<T> addErrorsToListAndReturn(final T value, final String... messages) {\n    \treturn new Answer<T>() {\n\n\t\t\tpublic T answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t};\n\n    }\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - wwyhiw.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.anyString;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\nimport br.com.caelum.vraptor.HeaderParam;\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.view.FlashScope;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private @Mock MethodInfo params;\n    private @Mock ParametersProvider parametersProvider;\n    private @Mock ParameterNameProvider parameterNameProvider;\n\tprivate @Mock Validator validator;\n\tprivate @Mock Localization localization;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock ResourceBundle bundle;\n\tprivate @Mock MutableRequest request;\n\tprivate @Mock FlashScope flash;\n\n\tprivate List<Message> errors ;\n\tprivate ParametersInstantiatorInterceptor instantiator;\n\n\tprivate ResourceMethod method;\n\tprivate ResourceMethod otherMethod;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\twhen(localization.getBundle()).thenReturn(bundle);\n\t\twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Collections.EMPTY_LIST));\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, parameterNameProvider, params, validator, localization, request, flash);\n\n        this.errors = (List<Message>) new Mirror().on(instantiator).get().field(\"errors\");\n        this.method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n        this.otherMethod = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"otherMethod\", int.class));\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n    }\n    \n    class HeaderParamComponent{\n    \tvoid method(@HeaderParam(\"password\") String password) {}\n    \tvoid otherMethod(@HeaderParam(\"user\") String user,@HeaderParam(\"password\") String password, @HeaderParam(\"token\") String token) {}\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\n    \tObject[] values = new Object[] { new Object() };\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n    }\n\n    @Test\n    public void shouldConvertArrayParametersToIndexParameters() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam[].id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam[].id\")).thenReturn(new String[] {\"one\", \"two\", \"three\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(request).setParameter(\"someParam[0].id\", \"one\");\n    \tverify(request).setParameter(\"someParam[1].id\", \"two\");\n    \tverify(request).setParameter(\"someParam[2].id\", \"three\");\n    }\n\n    /**\n     * Bug related\n     */\n    @Test(expected=IllegalArgumentException.class)\n    public void shouldThrowExceptionWhenThereIsAParameterContainingDotClass() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam.class.id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam.class.id\")).thenReturn(new String[] {\"whatever\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    }\n    \n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\t\tObject[] values = new Object[] { new Object() };\n\n\t\twhen(flash.consumeParameters(method)).thenReturn(values);\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(params).setParameters(values);\n    \tverify(stack).next(method, null);\n    \tverify(validator).addAll(Collections.<Message>emptyList());\n    \tverify(parametersProvider, never()).getParametersFor(method, errors, bundle);\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n    \tObject[] values = new Object[]{0};\n\n    \twhen(parametersProvider.getParametersFor(otherMethod, errors, bundle)).thenAnswer(addErrorsToListAndReturn(values, \"error1\"));\n\n        instantiator.intercept(stack, otherMethod, null);\n\n        verify(validator).addAll(errors);\n        verify(stack).next(otherMethod, null);\n        verify(params).setParameters(values);\n    }\n\n\t@Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenThrow(new RuntimeException());\n\n        instantiator.intercept(stack, method, null);\n    }\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tMethod method = HeaderParamComponent.class.getDeclaredMethod(\"method\", String.class);\n\t\tResourceMethod resourceMethod = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, method);\n\t\t\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n    \twhen(parametersProvider.getParametersFor(resourceMethod, errors, bundle)).thenReturn(values);\n    \twhen(parameterNameProvider.parameterNamesFor(method)).thenReturn(new String[]{\"passwordParam\"});\n\n        instantiator.intercept(stack, resourceMethod, null);\n        \n\t\tverify(request).setParameter(\"passwordParam\", \"123\");\n        verify(params).setParameters(values);\n        verify(stack).next(resourceMethod, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsNotPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tMethod method = Component.class.getDeclaredMethod(\"method\");\n\t\tResourceMethod resourceMethod = DefaultResourceMethod.instanceFor(Component.class, method);\n\t\t\n    \twhen(parametersProvider.getParametersFor(resourceMethod, errors, bundle)).thenReturn(values);\n    \twhen(parameterNameProvider.parameterNamesFor(method)).thenReturn(new String[]{\"passwordParam\"});\n\n        instantiator.intercept(stack, resourceMethod, null);\n        \n        verify(request, never()).setParameter(anyString(), anyString());\n        verify(params).setParameters(values);\n        verify(stack).next(resourceMethod, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddVariousHeaderInformationsToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tMethod method = HeaderParamComponent.class.getDeclaredMethod(\"otherMethod\", String.class, String.class, String.class);\n\t\tResourceMethod resouceMethod = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, method);\n\t\t\n\t\twhen(request.getHeader(\"user\")).thenReturn(\"user\");\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n\t\twhen(request.getHeader(\"token\")).thenReturn(\"daek2321\");\n    \twhen(parametersProvider.getParametersFor(resouceMethod, errors, bundle)).thenReturn(values);\n    \twhen(parameterNameProvider.parameterNamesFor(method)).thenReturn(new String[]{\"UserParam\", \"PasswordParam\", \"TokenParam\"});\n\n        instantiator.intercept(stack, resouceMethod, null);\n        \n        verify(request).setParameter(\"UserParam\", \"user\");\n        verify(request).setParameter(\"PasswordParam\", \"123\");\n        verify(request).setParameter(\"TokenParam\", \"daek2321\");\n        verify(params).setParameters(values);\n        verify(stack).next(resouceMethod, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\n    private <T> Answer<T> addErrorsToListAndReturn(final T value, final String... messages) {\n    \treturn new Answer<T>() {\n\n\t\t\tpublic T answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t};\n\n    }\n}\n","lineNo":196}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - wwyhiw.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\nimport br.com.caelum.vraptor.HeaderParam;\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.view.FlashScope;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private @Mock MethodInfo params;\n    private @Mock ParametersProvider parametersProvider;\n\tprivate @Mock Validator validator;\n\tprivate @Mock Localization localization;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock ResourceBundle bundle;\n\tprivate @Mock MutableRequest request;\n\tprivate @Mock FlashScope flash;\n\n\tprivate List<Message> errors ;\n\tprivate ParametersInstantiatorInterceptor instantiator;\n\n\tprivate ResourceMethod method;\n\tprivate ResourceMethod otherMethod;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\twhen(localization.getBundle()).thenReturn(bundle);\n\t\twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Collections.EMPTY_LIST));\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, params, validator, localization, request, flash);\n\n        this.errors = (List<Message>) new Mirror().on(instantiator).get().field(\"errors\");\n        this.method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n        this.otherMethod = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"otherMethod\", int.class));\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n    }\n    \n    class HeaderParamComponent{\n    \tvoid method(@HeaderParam(\"password\") String password) {}\n    \tvoid otherMethod(@HeaderParam(\"user\") String user,@HeaderParam(\"password\") String password, @HeaderParam(\"token\") String token) {}\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\n    \tObject[] values = new Object[] { new Object() };\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n    }\n\n    @Test\n    public void shouldConvertArrayParametersToIndexParameters() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam[].id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam[].id\")).thenReturn(new String[] {\"one\", \"two\", \"three\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(request).setParameter(\"someParam[0].id\", \"one\");\n    \tverify(request).setParameter(\"someParam[1].id\", \"two\");\n    \tverify(request).setParameter(\"someParam[2].id\", \"three\");\n    }\n\n    /**\n     * Bug related\n     */\n    @Test(expected=IllegalArgumentException.class)\n    public void shouldThrowExceptionWhenThereIsAParameterContainingDotClass() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam.class.id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam.class.id\")).thenReturn(new String[] {\"whatever\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    }\n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\t\tObject[] values = new Object[] { new Object() };\n\n\t\twhen(flash.consumeParameters(method)).thenReturn(values);\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(params).setParameters(values);\n    \tverify(stack).next(method, null);\n    \tverify(validator).addAll(Collections.<Message>emptyList());\n    \tverify(parametersProvider, never()).getParametersFor(method, errors, bundle);\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n    \tObject[] values = new Object[]{0};\n\n    \twhen(parametersProvider.getParametersFor(otherMethod, errors, bundle)).thenAnswer(addErrorsToListAndReturn(values, \"error1\"));\n\n        instantiator.intercept(stack, otherMethod, null);\n\n        verify(validator).addAll(errors);\n        verify(stack).next(otherMethod, null);\n        verify(params).setParameters(values);\n    }\n\n\t@Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenThrow(new RuntimeException());\n\n        instantiator.intercept(stack, method, null);\n    }\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, HeaderParamComponent.class.getDeclaredMethod(\"method\", String.class));\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n        \n        verify(request).setAttribute(\"password\", \"123\");\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsNotPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n        \n        verify(request, never()).setAttribute(\"password\", \"123\");\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddVariousHeaderInformationsToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tResourceMethod method = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, HeaderParamComponent.class.getDeclaredMethod(\"otherMethod\", String.class, String.class, String.class));\n\t\t\n\t\twhen(request.getHeader(\"user\")).thenReturn(\"user\");\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n\t\twhen(request.getHeader(\"token\")).thenReturn(\"daek2321\");\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n        \n        verify(request).setAttribute(\"user\", \"user\");\n        verify(request).setAttribute(\"password\", \"123\");\n        verify(request).setAttribute(\"token\", \"daek2321\");\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\n    private <T> Answer<T> addErrorsToListAndReturn(final T value, final String... messages) {\n    \treturn new Answer<T>() {\n\n\t\t\tpublic T answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t};\n\n    }\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - wwyhiw.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.anyString;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\nimport br.com.caelum.vraptor.HeaderParam;\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.view.FlashScope;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private @Mock MethodInfo params;\n    private @Mock ParametersProvider parametersProvider;\n    private @Mock ParameterNameProvider parameterNameProvider;\n\tprivate @Mock Validator validator;\n\tprivate @Mock Localization localization;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock ResourceBundle bundle;\n\tprivate @Mock MutableRequest request;\n\tprivate @Mock FlashScope flash;\n\n\tprivate List<Message> errors ;\n\tprivate ParametersInstantiatorInterceptor instantiator;\n\n\tprivate ResourceMethod method;\n\tprivate ResourceMethod otherMethod;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\twhen(localization.getBundle()).thenReturn(bundle);\n\t\twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Collections.EMPTY_LIST));\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, parameterNameProvider, params, validator, localization, request, flash);\n\n        this.errors = (List<Message>) new Mirror().on(instantiator).get().field(\"errors\");\n        this.method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n        this.otherMethod = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"otherMethod\", int.class));\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n    }\n    \n    class HeaderParamComponent{\n    \tvoid method(@HeaderParam(\"password\") String password) {}\n    \tvoid otherMethod(@HeaderParam(\"user\") String user,@HeaderParam(\"password\") String password, @HeaderParam(\"token\") String token) {}\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\n    \tObject[] values = new Object[] { new Object() };\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n    }\n\n    @Test\n    public void shouldConvertArrayParametersToIndexParameters() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam[].id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam[].id\")).thenReturn(new String[] {\"one\", \"two\", \"three\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(request).setParameter(\"someParam[0].id\", \"one\");\n    \tverify(request).setParameter(\"someParam[1].id\", \"two\");\n    \tverify(request).setParameter(\"someParam[2].id\", \"three\");\n    }\n\n    /**\n     * Bug related\n     */\n    @Test(expected=IllegalArgumentException.class)\n    public void shouldThrowExceptionWhenThereIsAParameterContainingDotClass() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam.class.id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam.class.id\")).thenReturn(new String[] {\"whatever\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    }\n    \n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\t\tObject[] values = new Object[] { new Object() };\n\n\t\twhen(flash.consumeParameters(method)).thenReturn(values);\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(params).setParameters(values);\n    \tverify(stack).next(method, null);\n    \tverify(validator).addAll(Collections.<Message>emptyList());\n    \tverify(parametersProvider, never()).getParametersFor(method, errors, bundle);\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n    \tObject[] values = new Object[]{0};\n\n    \twhen(parametersProvider.getParametersFor(otherMethod, errors, bundle)).thenAnswer(addErrorsToListAndReturn(values, \"error1\"));\n\n        instantiator.intercept(stack, otherMethod, null);\n\n        verify(validator).addAll(errors);\n        verify(stack).next(otherMethod, null);\n        verify(params).setParameters(values);\n    }\n\n\t@Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenThrow(new RuntimeException());\n\n        instantiator.intercept(stack, method, null);\n    }\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tMethod method = HeaderParamComponent.class.getDeclaredMethod(\"method\", String.class);\n\t\tResourceMethod resourceMethod = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, method);\n\t\t\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n    \twhen(parametersProvider.getParametersFor(resourceMethod, errors, bundle)).thenReturn(values);\n    \twhen(parameterNameProvider.parameterNamesFor(method)).thenReturn(new String[]{\"passwordParam\"});\n\n        instantiator.intercept(stack, resourceMethod, null);\n        \n\t\tverify(request).setParameter(\"passwordParam\", \"123\");\n        verify(params).setParameters(values);\n        verify(stack).next(resourceMethod, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddHeaderInformationToRequestWhenHeaderParamAnnotationIsNotPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tMethod method = Component.class.getDeclaredMethod(\"method\");\n\t\tResourceMethod resourceMethod = DefaultResourceMethod.instanceFor(Component.class, method);\n\t\t\n    \twhen(parametersProvider.getParametersFor(resourceMethod, errors, bundle)).thenReturn(values);\n    \twhen(parameterNameProvider.parameterNamesFor(method)).thenReturn(new String[]{\"passwordParam\"});\n\n        instantiator.intercept(stack, resourceMethod, null);\n        \n        verify(request, never()).setParameter(anyString(), anyString());\n        verify(params).setParameters(values);\n        verify(stack).next(resourceMethod, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\t\n\t@Test\n\tpublic void shouldAddVariousHeaderInformationsToRequestWhenHeaderParamAnnotationIsPresent() throws Exception {\n\t\tObject[] values = new Object[] { new Object() };\n\t\tMethod method = HeaderParamComponent.class.getDeclaredMethod(\"otherMethod\", String.class, String.class, String.class);\n\t\tResourceMethod resouceMethod = DefaultResourceMethod.instanceFor(HeaderParamComponent.class, method);\n\t\t\n\t\twhen(request.getHeader(\"user\")).thenReturn(\"user\");\n\t\twhen(request.getHeader(\"password\")).thenReturn(\"123\");\n\t\twhen(request.getHeader(\"token\")).thenReturn(\"daek2321\");\n    \twhen(parametersProvider.getParametersFor(resouceMethod, errors, bundle)).thenReturn(values);\n    \twhen(parameterNameProvider.parameterNamesFor(method)).thenReturn(new String[]{\"UserParam\", \"PasswordParam\", \"TokenParam\"});\n\n        instantiator.intercept(stack, resouceMethod, null);\n        \n        verify(request).setParameter(\"UserParam\", \"user\");\n        verify(request).setParameter(\"PasswordParam\", \"123\");\n        verify(request).setParameter(\"TokenParam\", \"daek2321\");\n        verify(params).setParameters(values);\n        verify(stack).next(resouceMethod, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n\t}\n\n    private <T> Answer<T> addErrorsToListAndReturn(final T value, final String... messages) {\n    \treturn new Answer<T>() {\n\n\t\t\tpublic T answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t};\n\n    }\n}\n","lineNo":213}
{}
{"Smelly Sample":"package br.com.caelum.vraptor.serialization.xstream;\n\nimport java.util.List;\nimport java.util.Set;\n\nimport com.google.common.collect.Lists;\n\npublic class Serializee {\n\tprivate Object root;\n\tprivate Class<?> rootClass;\n\tprivate List<String> includes = Lists.newArrayList();\n\tprivate List<String> excludes = Lists.newArrayList();\n\tprivate Set<Class<?>> elementTypes;\n\tprivate boolean recursive;\n\t\n\tpublic Object getRoot() {\n\t\treturn root;\n\t}\n\tpublic void setRoot(Object root) {\n\t\tthis.root = root;\n\t}\n\tpublic Class<?> getRootClass() {\n\t\treturn rootClass;\n\t}\n\tpublic void setRootClass(Class<?> rootClass) {\n\t\tthis.rootClass = rootClass;\n\t}\n\tpublic List<String> getIncludes() {\n\t\treturn includes;\n\t}\n\tpublic List<String> getExcludes() {\n\t\treturn excludes;\n\t}\n\tpublic Set<Class<?>> getElementTypes() {\n\t\treturn elementTypes;\n\t}\n\tpublic void setElementTypes(Set<Class<?>> elementTypes) {\n\t\tthis.elementTypes = elementTypes;\n\t}\n\tpublic boolean isRecursive() {\n\t\treturn recursive;\n\t}\n\tpublic void setRecursive(boolean recursive) {\n\t\tthis.recursive = recursive;\n\t}\n\tpublic void excludeAll(List<String> names) {\n\t\tcheckPresenceOf(names);\n\t\texcludes.addAll(names);\n\t}\n\tpublic void includeAll(List<String> names) {\n\t\tcheckPresenceOf(names);\n\t\tincludes.addAll(names);\n\t}\n\n\tprivate void checkPresenceOf(List<String> names) {\n\t\t\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.serialization.xstream;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport com.google.common.collect.LinkedListMultimap;\nimport com.google.common.collect.Multimap;\nimport com.google.common.collect.Sets;\n\npublic class Serializee {\n\tprivate Object root;\n\tprivate Class<?> rootClass;\n\tprivate Multimap<String, Class<?>> includes = LinkedListMultimap.create();\n\tprivate Multimap<String, Class<?>> excludes = LinkedListMultimap.create();\n\tprivate Set<Class<?>> elementTypes;\n\tprivate boolean recursive;\n\n\tpublic Object getRoot() {\n\t\treturn root;\n\t}\n\n\tpublic void setRoot(Object root) {\n\t\tthis.root = root;\n\t}\n\n\tpublic Class<?> getRootClass() {\n\t\treturn rootClass;\n\t}\n\n\tpublic void setRootClass(Class<?> rootClass) {\n\t\tthis.rootClass = rootClass;\n\t}\n\n\tpublic Multimap<String, Class<?>> getIncludes() {\n\t\treturn includes;\n\t}\n\n\tpublic Multimap<String, Class<?>> getExcludes() {\n\t\treturn excludes;\n\t}\n\n\tpublic Set<Class<?>> getElementTypes() {\n\t\treturn elementTypes;\n\t}\n\n\tpublic void setElementTypes(Set<Class<?>> elementTypes) {\n\t\tthis.elementTypes = elementTypes;\n\t}\n\n\tpublic boolean isRecursive() {\n\t\treturn recursive;\n\t}\n\n\tpublic void setRecursive(boolean recursive) {\n\t\tthis.recursive = recursive;\n\t}\n\n\tpublic void excludeAll(String... names) {\n\t\tfor (String name : names) {\n\t\t\texcludes.putAll(name, getParentTypesFor(name));\n\t\t}\n\t}\n\n\tpublic void includeAll(String... names) {\n\t\tfor (String name : names) {\n\t\t\tincludes.putAll(name, getParentTypesFor(name));\n\t\t}\n\t}\n\n\tprivate Set<Class<?>> getParentTypesFor(String name) {\n\t\tif (getElementTypes() == null) {\n\t\t\tClass<?> type = getRootClass();\n\t\t\treturn getParentTypes(name, type);\n\t\t} else {\n\t\t\tSet<Class<?>> result = new HashSet<Class<?>>();\n\t\t\tfor (Class<?> type : getElementTypes()) {\n\t\t\t\tresult.addAll(getParentTypes(name, type));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tprivate Set<Class<?>> getParentTypes(String name, Class<?> type) {\n\t\tString[] path = name.split(\"\\\\.\");\n\t\t\n\t\ttry {\n\t\t\tfor (int i = 0; i < path.length - 1; i++) {\n\t\t\t\tField field = checkNotNull(new Mirror().on(type).reflect().field(path[i]));\n\t\t\t\ttype = getActualType(field.getGenericType());\n\t\t\t}\n\t\t\tcheckNotNull(new Mirror().on(type).reflect().field(path[path.length -1]));\n\t\t} catch (NullPointerException e) {\n\t\t\tthrow new IllegalArgumentException(\"Field path '\" + name + \"' doesn't exists in \" + type, e);\n\t\t}\n\t\t\n\t\tSet<Class<?>> types = Sets.newHashSet();\n\t\twhile (type != Object.class) {\n\t\t\ttypes.add(type);\n\t\t\ttype = type.getSuperclass();\n\t\t}\n\t\treturn types;\n\t}\n\n\tstatic Class<?> getActualType(Type genericType) {\n\t\tif (genericType instanceof ParameterizedType) {\n\t\t\tParameterizedType type = (ParameterizedType) genericType;\n\n\t\t\tif (isCollection(type)) {\n\t\t\t\tType actualType = type.getActualTypeArguments()[0];\n\n\t\t\t\tif (actualType instanceof TypeVariable<?>) {\n\t\t\t\t\treturn (Class<?>) type.getRawType();\n\t\t\t\t}\n\n\t\t\t\treturn (Class<?>) actualType;\n\t\t\t}\n\t\t}\n\n\t\treturn (Class<?>) genericType;\n\t}\n\n\tprivate static boolean isCollection(Type type) {\n\t\tif (type instanceof ParameterizedType) {\n\t\t\tParameterizedType ptype = (ParameterizedType) type;\n\t\t\treturn Collection.class.isAssignableFrom((Class<?>) ptype.getRawType())\n\t\t\t\t\t|| Map.class.isAssignableFrom((Class<?>) ptype.getRawType());\n\t\t}\n\t\treturn Collection.class.isAssignableFrom((Class<?>) type);\n\t}\n\n}\n","lineNo":98}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.validator;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.ResourceBundleDescription;\n\nimport br.com.caelum.vraptor.core.SafeResourceBundle;\nimport br.com.caelum.vraptor.util.FallbackResourceBundle;\n\n/**\n * Hamcrest based validation support.\n *\n * Uses:\n * validator.checking(new Validations() {{\n * \t\tif (that(user, is(notNullValue())) { // that will return if the match was successful\n *\t \t\tthat(user.getAge() > 17, \"user.age\", \"user.is.underage\"); // boolean assertions\n * \t\t\tthat(user.getRoles(), hasItem(\"ADMIN\"), \"user.roles\", \"user.is.not.admin\"); // hamcrest assertions\n * \t\t}\n * }});\n *\n * You can use any hamcrest Matcher. Some helpful matchers can be found on org.hamcrest.Matchers.\n *\n * @author Guilherme Silveira\n * @author Lucas Cavalcanti\n */\npublic class Validations {\n\n    private final List<Message> errors = new ArrayList<Message>();\n\tprivate ResourceBundle bundle;\n\n    public Validations(ResourceBundle bundle) {\n\t\tthis.bundle = bundle;\n\t}\n\n    public Validations() {\n    \tthis.bundle = new SafeResourceBundle(ResourceBundle.getBundle(\"messages\"), true);\n    }\n\n    public <T> boolean that(T id, Matcher<? super T> matcher) {\n        return that(id, matcher, \"\", null);\n    }\n\n    public <T> boolean that(T id, Matcher<? super T> matcher, String category) {\n        return that(id, matcher, category, null);\n    }\n\n    public <T> boolean that(T id, Matcher<? super T> matcher, I18nParam category) {\n\t\treturn that(id, matcher, category, null);\n\t}\n\n    public <T> boolean that(T actual, Matcher<? super T> matcher, String category, String reason, Object... messageParameters) {\n        return genericThat(actual, matcher, category, reason, messageParameters);\n    }\n\n    public <T> boolean that(T actual, Matcher<? super T> matcher, I18nParam category, String reason, Object... messageParameters) {\n    \treturn genericThat(actual, matcher, category, reason, messageParameters);\n\t}\n\n    public boolean that(boolean assertion, String category, String reason, Object... messageParameters) {\n        return genericThat(assertion, category, reason, messageParameters);\n    }\n\n    public boolean that(boolean assertion, I18nParam category, String reason, Object... messageParameters) {\n    \treturn genericThat(assertion, category, reason, messageParameters);\n\t}\n\n    protected I18nParam i18n(String key) {\n    \treturn new I18nParam(key);\n    }\n\n    /**\n     * Returns the list of errors.\n     */\n    public List<Message> getErrors() {\n    \tfor (Message message : errors) {\n\t\t\tif (message instanceof I18nMessage) {\n\t\t\t\t((I18nMessage) message).setBundle(bundle);\n\t\t\t}\n\t\t}\n        return errors;\n    }\n\n    /**\n     * Returns the list of errors, using given resource bundle.\n     */\n    public List<Message> getErrors(ResourceBundle bundle) {\n    \tif (isDefaultBundle(this.bundle)) {\n    \t\tthis.bundle = new SafeResourceBundle(bundle);\n    \t} else {\n    \t\tthis.bundle = new FallbackResourceBundle(this.bundle, bundle);\n    \t}\n    \treturn getErrors();\n    }\n\n\tprivate boolean isDefaultBundle(ResourceBundle bundle) {\n\t\treturn bundle instanceof SafeResourceBundle && ((SafeResourceBundle) bundle).isDefault();\n\t}\n\n    /**\n     * Adds a list of errors to the error list.\n     * @return\n     */\n    public Validations and(List<Message> errors) {\n        this.errors.addAll(errors);\n        return this;\n    }\n\n    /**\n     * Adds a single error message to the error list.\n     */\n    public Validations and(Message error) {\n        this.errors.add(error);\n        return this;\n    }\n\n\tprivate <T> boolean genericThat(T actual, Matcher<? super T> matcher, Object category, String reason, Object... messageParameters) {\n\t\tif (!matcher.matches(actual)) {\n        \tif (reason != null) {\n        \t\terrors.add(i18nMessage(category, reason, messageParameters));\n            } else {\n                Description description = new ResourceBundleDescription();\n                description.appendDescriptionOf(matcher);\n                errors.add(i18nMessage(category, description.toString(), actual));\n            }\n            return false;\n        }\n        return true;\n\t}\n\n    private I18nMessage i18nMessage(Object category, String reason, Object... messageParameters) {\n\t\tif (category instanceof I18nParam) {\n\t\t\treturn new I18nMessage((I18nParam) category, reason, messageParameters);\n\t\t}\n\t\treturn new I18nMessage(category.toString(), reason, messageParameters);\n\t}\n\n\tprivate boolean genericThat(boolean assertion, Object category, String reason, Object... messageParameters) {\n\t\tif (!assertion) {\n        \terrors.add(i18nMessage(category, reason, messageParameters));\n        }\n        return assertion;\n\t}\n    \n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.validator;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport org.hamcrest.Description;\nimport org.hamcrest.Matcher;\nimport org.hamcrest.ResourceBundleDescription;\n\nimport br.com.caelum.vraptor.core.SafeResourceBundle;\nimport br.com.caelum.vraptor.util.FallbackResourceBundle;\n\nimport com.google.common.base.Supplier;\nimport com.google.common.base.Suppliers;\n\n/**\n * Hamcrest based validation support.\n *\n * Uses:\n * validator.checking(new Validations() {{\n * \t\tif (that(user, is(notNullValue())) { // that will return if the match was successful\n *\t \t\tthat(user.getAge() > 17, \"user.age\", \"user.is.underage\"); // boolean assertions\n * \t\t\tthat(user.getRoles(), hasItem(\"ADMIN\"), \"user.roles\", \"user.is.not.admin\"); // hamcrest assertions\n * \t\t}\n * }});\n *\n * You can use any hamcrest Matcher. Some helpful matchers can be found on org.hamcrest.Matchers.\n *\n * @author Guilherme Silveira\n * @author Lucas Cavalcanti\n */\npublic class Validations {\n\n    private final List<Message> errors = new ArrayList<Message>();\n\tprivate Supplier<ResourceBundle> bundle;\n\n    public Validations(ResourceBundle bundle) {\n\t\tthis.bundle = Suppliers.ofInstance(bundle);\n\t}\n\n    public Validations() {\n    \tthis(new SafeResourceBundle(ResourceBundle.getBundle(\"messages\"), true));\n    }\n\n    public <T> boolean that(T id, Matcher<? super T> matcher) {\n        return that(id, matcher, \"\", null);\n    }\n\n    public <T> boolean that(T id, Matcher<? super T> matcher, String category) {\n        return that(id, matcher, category, null);\n    }\n\n    public <T> boolean that(T id, Matcher<? super T> matcher, I18nParam category) {\n\t\treturn that(id, matcher, category, null);\n\t}\n\n    public <T> boolean that(T actual, Matcher<? super T> matcher, String category, String reason, Object... messageParameters) {\n        return genericThat(actual, matcher, category, reason, messageParameters);\n    }\n\n    public <T> boolean that(T actual, Matcher<? super T> matcher, I18nParam category, String reason, Object... messageParameters) {\n    \treturn genericThat(actual, matcher, category, reason, messageParameters);\n\t}\n\n    public boolean that(boolean assertion, String category, String reason, Object... messageParameters) {\n        return genericThat(assertion, category, reason, messageParameters);\n    }\n\n    public boolean that(boolean assertion, I18nParam category, String reason, Object... messageParameters) {\n    \treturn genericThat(assertion, category, reason, messageParameters);\n\t}\n\n    protected I18nParam i18n(String key) {\n    \treturn new I18nParam(key);\n    }\n\n    /**\n     * Returns the list of errors.\n     */\n    public List<Message> getErrors() {\n    \tfor (Message message : errors) {\n\t\t\tif (message instanceof I18nMessage) {\n\t\t\t\t((I18nMessage) message).setLazyBundle(bundle);\n\t\t\t}\n\t\t}\n        return errors;\n    }\n\n    /**\n     * Returns the list of errors, using given resource bundle.\n     */\n    public List<Message> getErrors(ResourceBundle bundle) {\n    \treturn getErrors(Suppliers.ofInstance(bundle));\n    }\n    /**\n     * Returns the list of errors, using given resource bundle.\n     */\n    public List<Message> getErrors(final Supplier<ResourceBundle> bundle) {\n    \tfinal Supplier<ResourceBundle> oldBundle = this.bundle;\n    \tthis.bundle = new Supplier<ResourceBundle>() {\n\t\t\tpublic ResourceBundle get() {\n\t\t\t\tif (isDefaultBundle(oldBundle)) {\n\t\t\t\t\treturn new SafeResourceBundle(bundle.get());\n\t\t\t\t} else {\n\t\t\t\t\treturn new FallbackResourceBundle(oldBundle.get(), bundle.get());\n\t\t\t\t}\n\t\t\t}\n\t\t};\n    \treturn getErrors();\n    }\n\n\tprivate boolean isDefaultBundle(Supplier<ResourceBundle> bundle) {\n\t\treturn bundle.get() instanceof SafeResourceBundle && ((SafeResourceBundle) bundle.get()).isDefault();\n\t}\n\n    /**\n     * Adds a list of errors to the error list.\n     * @return\n     */\n    public Validations and(List<Message> errors) {\n        this.errors.addAll(errors);\n        return this;\n    }\n\n    /**\n     * Adds a single error message to the error list.\n     */\n    public Validations and(Message error) {\n        this.errors.add(error);\n        return this;\n    }\n\n\tprivate <T> boolean genericThat(T actual, Matcher<? super T> matcher, Object category, String reason, Object... messageParameters) {\n\t\tif (!matcher.matches(actual)) {\n        \tif (reason != null) {\n        \t\terrors.add(i18nMessage(category, reason, messageParameters));\n            } else {\n                Description description = new ResourceBundleDescription();\n                description.appendDescriptionOf(matcher);\n                errors.add(i18nMessage(category, description.toString(), actual));\n            }\n            return false;\n        }\n        return true;\n\t}\n\n    private I18nMessage i18nMessage(Object category, String reason, Object... messageParameters) {\n\t\tif (category instanceof I18nParam) {\n\t\t\treturn new I18nMessage((I18nParam) category, reason, messageParameters);\n\t\t}\n\t\treturn new I18nMessage(category.toString(), reason, messageParameters);\n\t}\n\n\tprivate boolean genericThat(boolean assertion, Object category, String reason, Object... messageParameters) {\n\t\tif (!assertion) {\n        \terrors.add(i18nMessage(category, reason, messageParameters));\n        }\n        return assertion;\n\t}\n    \n}\n","lineNo":117}
{"Smelly Sample":"package br.com.caelum.vraptor.view;\n\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.util.EnumSet;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.config.Configuration;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.proxy.DefaultProxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\n\npublic class DefaultStatusTest {\n\n\tprivate @Mock HttpServletResponse response;\n\tprivate @Mock Result result;\n\tprivate @Mock Configuration config;\n\tprivate @Mock Router router;\n\n\tprivate Status status;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\tstatus = new DefaultStatus(response, result, config, new DefaultProxifier(), router);\n\t}\n\n\t@Test\n\tpublic void shouldSetNotFoundStatus() throws Exception {\n\t\tstatus.notFound();\n\n\t\tverify(response).sendError(404);\n\t}\n\n\t@Test\n\tpublic void shouldSetHeader() throws Exception {\n\t\tstatus.header(\"Content-type\", \"application/xml\");\n\n\t\tverify(response).addHeader(\"Content-type\", \"application/xml\");\n\t}\n\n\t@Test\n\tpublic void shouldSetCreatedStatus() throws Exception {\n\t\tstatus.created();\n\n\t\tverify(response).setStatus(201);\n\t}\n\n\t@Test\n\tpublic void shouldSetCreatedStatusAndLocationWithAppPath() throws Exception {\n\t\twhen(config.getApplicationPath()).thenReturn(\"http://myapp.com\");\n\t\tstatus.created(\"/newResource\");\n\n\t\tverify(response).setStatus(201);\n\t\tverify(response).addHeader(\"Location\", \"http://myapp.com/newResource\");\n\t}\n\n\t@Test\n\tpublic void shouldSetOkStatus() throws Exception {\n\t\tstatus.ok();\n\n\t\tverify(response).setStatus(200);\n\t}\n\n\t@Test\n\tpublic void shouldSetConflictStatus() throws Exception {\n\t\tstatus.conflict();\n\n\t\tverify(response).sendError(409);\n\t}\n\n\t@Test \n\tpublic void shouldSetAcceptedStatus() throws Exception {\n\t\tstatus.accepted();\n\t\t\n\t\tverify(response).setStatus(202);\n\t}\n\t\n\t@Test\n\tpublic void shouldSetMethodNotAllowedStatus() throws Exception {\n\t\tstatus.methodNotAllowed(EnumSet.of(HttpMethod.GET, HttpMethod.POST));\n\n\t\tverify(response).sendError(405);\n\t\tverify(response).addHeader(\"Allow\", \"GET, POST\");\n\t}\n\n\t@Test\n\tpublic void shouldSetMovedPermanentlyStatus() throws Exception {\n\t\twhen(config.getApplicationPath()).thenReturn(\"http://myapp.com\");\n\n\t\tstatus.movedPermanentlyTo(\"/newURL\");\n\n\t\tverify(response).setStatus(301);\n\t\tverify(response).addHeader(\"Location\", \"http://myapp.com/newURL\");\n\t}\n\t@Test\n\tpublic void shouldMoveToExactlyURIWhenItIsNotAbsolute() throws Exception {\n\n\t\tstatus.movedPermanentlyTo(\"http://www.caelum.com.br\");\n\n\t\tverify(response).addHeader(\"Location\", \"http://www.caelum.com.br\");\n\t\tverify(response).setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY);\n\t}\n\n\tstatic interface Resource {\n\t\tvoid method();\n\t}\n\n\t@Test\n\tpublic void shouldSetMovedPermanentlyStatusOfLogic() throws Exception {\n\t\twhen(config.getApplicationPath()).thenReturn(\"http://myapp.com\");\n\t\twhen(router.urlFor(eq(Resource.class), eq(Resource.class.getDeclaredMethod(\"method\")), any(Object[].class))).thenReturn(\"/resource/method\");\n\n\t\tstatus.movedPermanentlyTo(Resource.class).method();\n\n\t\tverify(response).setStatus(301);\n\t\tverify(response).addHeader(\"Location\", \"http://myapp.com/resource/method\");\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.view;\n\nimport static org.mockito.Matchers.any;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\nimport java.util.EnumSet;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.config.Configuration;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.proxy.JavassistProxifier;\nimport br.com.caelum.vraptor.proxy.ObjenesisInstanceCreator;\nimport br.com.caelum.vraptor.resource.HttpMethod;\n\npublic class DefaultStatusTest {\n\n\tprivate @Mock HttpServletResponse response;\n\tprivate @Mock Result result;\n\tprivate @Mock Configuration config;\n\tprivate @Mock Router router;\n\n\tprivate Status status;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\tstatus = new DefaultStatus(response, result, config, new JavassistProxifier(new ObjenesisInstanceCreator()), router);\n\t}\n\n\t@Test\n\tpublic void shouldSetNotFoundStatus() throws Exception {\n\t\tstatus.notFound();\n\n\t\tverify(response).sendError(404);\n\t}\n\n\t@Test\n\tpublic void shouldSetHeader() throws Exception {\n\t\tstatus.header(\"Content-type\", \"application/xml\");\n\n\t\tverify(response).addHeader(\"Content-type\", \"application/xml\");\n\t}\n\n\t@Test\n\tpublic void shouldSetCreatedStatus() throws Exception {\n\t\tstatus.created();\n\n\t\tverify(response).setStatus(201);\n\t}\n\n\t@Test\n\tpublic void shouldSetCreatedStatusAndLocationWithAppPath() throws Exception {\n\t\twhen(config.getApplicationPath()).thenReturn(\"http://myapp.com\");\n\t\tstatus.created(\"/newResource\");\n\n\t\tverify(response).setStatus(201);\n\t\tverify(response).addHeader(\"Location\", \"http://myapp.com/newResource\");\n\t}\n\n\t@Test\n\tpublic void shouldSetOkStatus() throws Exception {\n\t\tstatus.ok();\n\n\t\tverify(response).setStatus(200);\n\t}\n\n\t@Test\n\tpublic void shouldSetConflictStatus() throws Exception {\n\t\tstatus.conflict();\n\n\t\tverify(response).sendError(409);\n\t}\n\n\t@Test \n\tpublic void shouldSetAcceptedStatus() throws Exception {\n\t\tstatus.accepted();\n\t\t\n\t\tverify(response).setStatus(202);\n\t}\n\t\n\t@Test\n\tpublic void shouldSetMethodNotAllowedStatus() throws Exception {\n\t\tstatus.methodNotAllowed(EnumSet.of(HttpMethod.GET, HttpMethod.POST));\n\n\t\tverify(response).sendError(405);\n\t\tverify(response).addHeader(\"Allow\", \"GET, POST\");\n\t}\n\n\t@Test\n\tpublic void shouldSetMovedPermanentlyStatus() throws Exception {\n\t\twhen(config.getApplicationPath()).thenReturn(\"http://myapp.com\");\n\n\t\tstatus.movedPermanentlyTo(\"/newURL\");\n\n\t\tverify(response).setStatus(301);\n\t\tverify(response).addHeader(\"Location\", \"http://myapp.com/newURL\");\n\t}\n\t@Test\n\tpublic void shouldMoveToExactlyURIWhenItIsNotAbsolute() throws Exception {\n\n\t\tstatus.movedPermanentlyTo(\"http://www.caelum.com.br\");\n\n\t\tverify(response).addHeader(\"Location\", \"http://www.caelum.com.br\");\n\t\tverify(response).setStatus(HttpServletResponse.SC_MOVED_PERMANENTLY);\n\t}\n\n\tstatic interface Resource {\n\t\tvoid method();\n\t}\n\n\t@Test\n\tpublic void shouldSetMovedPermanentlyStatusOfLogic() throws Exception {\n\t\twhen(config.getApplicationPath()).thenReturn(\"http://myapp.com\");\n\t\tMethod method = Resource.class.getDeclaredMethod(\"method\");\n        when(router.urlFor(eq(Resource.class), eq(method), Mockito.anyVararg())).thenReturn(\"/resource/method\");\n\n\t\tstatus.movedPermanentlyTo(Resource.class).method();\n\n\t\tverify(response).setStatus(301);\n\t\tverify(response).addHeader(\"Location\", \"http://myapp.com/resource/method\");\n\t}\n\n}\n","lineNo":125}
{}
{}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.route;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.TwoWayConverter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.http.MutableRequest;\n\n/**\n * Default implementation of parameters control on uris.\n *\n * @author guilherme silveira\n */\npublic class DefaultParametersControl implements ParametersControl {\n\n\tprivate final Logger logger = LoggerFactory.getLogger(DefaultParametersControl.class);\n\tprivate final List<String> parameters = new ArrayList<String>();\n\tprivate final Pattern pattern;\n\tprivate final String originalPattern;\n\tprivate final Converters converters;\n    private final Evaluator evaluator;\n\n    public DefaultParametersControl(String originalPattern, Map<String, String> parameterPatterns, Converters converters, Evaluator evaluator) {\n\t\tthis.originalPattern = originalPattern;\n\t\tthis.converters = converters;\n\t\tthis.pattern = compilePattern(originalPattern, parameterPatterns);\n        this.evaluator = evaluator;\n\t}\n\n\tpublic DefaultParametersControl(String originalPattern, Converters converters, Evaluator evaluator) {\n\t\tthis(originalPattern, Collections.<String, String>emptyMap(), converters, evaluator);\n\t}\n\n\tprivate Pattern compilePattern(String originalPattern, Map<String, String> parameterPatterns) {\n\t\tMap<String, String> parameters = new HashMap<String, String>(parameterPatterns);\n\t\tMatcher matcher = Pattern.compile(\"\\\\{([^\\\\}]+?)\\\\}\").matcher(originalPattern);\n\t\twhile (matcher.find()) {\n\t\t\tString value = matcher.group(1);\n\t\t\tString defaultPattern = value.matches(\"^[^:]+\\\\*$\")? \".*\" : \"[^/]*\";\n\t\t\tif (!parameters.containsKey(value)) {\n\t\t\t\tparameters.put(value, defaultPattern);\n\t\t\t}\n\t\t\tthis.parameters.add(value.replaceAll(\"(\\\\:.*|\\\\*)$\", \"\"));\n\t\t}\n\t\tString patternUri = originalPattern;\n\t\tpatternUri = patternUri.replaceAll(\"/\\\\*\", \"/.*\");\n\t\tfor (Entry<String, String> parameter : parameters.entrySet()) {\n\t\t\tpatternUri = patternUri.replace(\"{\" + parameter.getKey() + \"}\", \"(\" + parameter.getValue() + \")\");\n\t\t}\n\t\tlogger.debug(\"For \" + originalPattern + \" retrieved \" + patternUri + \" with \" + parameters);\n\t\treturn Pattern.compile(patternUri);\n\t}\n\n\tpublic String fillUri(String[] paramNames, Object... paramValues) {\n\t\tif (paramNames.length != paramValues.length) {\n\t\t\tthrow new IllegalArgumentException(\"paramNames must have the same length as paramValues. Names: \" + Arrays.toString(paramNames) + \" Values: \" + Arrays.toString(paramValues));\n\t\t}\n\n\t\tString base = originalPattern.replaceAll(\"\\\\.\\\\*\", \"\");\n\t\tfor (String key : parameters) {\n\t\t\tObject param = selectParam(key, paramNames, paramValues);\n\t\t\tObject result = evaluator.get(param, key);\n\t\t\tif (result != null) {\n\t\t\t\tClass type = result.getClass();\n\t\t\t\tif (converters.existsTwoWayFor(type)) {\n\t\t\t\t\tTwoWayConverter converter = converters.twoWayConverterFor(type);\n\t\t\t\t\tresult = converter.convert(result);\n\t\t\t\t}\n\t\t\t}\n\t\t\tString regex = \"\\\\{\" + key + \"\\\\*?\\\\}|\\\\{\" + key + \"\\\\*?:(.*)\\\\}\";\n\t\t\tbase = base.replaceAll(regex, result == null ? \"\" : result.toString());\n\t\t}\n\t\treturn base;\n\t}\n\n\tprivate Object selectParam(String key, String[] paramNames, Object[] paramValues) {\n\t\tfor (int i = 0; i < paramNames.length; i++) {\n\t\t\tif (key.matches(\"^\" + paramNames[i] + \"(\\\\..*|$)\")) {\n\t\t\t\treturn paramValues[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic boolean matches(String uri) {\n\t\treturn pattern.matcher(uri).matches();\n\t}\n\n\tpublic void fillIntoRequest(String uri, MutableRequest request) {\n\t\tMatcher m = pattern.matcher(uri);\n\t\tm.matches();\n\t\tfor (int i = 1; i <= m.groupCount(); i++) {\n\t\t\tString name = parameters.get(i - 1);\n\t\t\ttry {\n\t\t\t\trequest.setParameter(name, URLDecoder.decode(m.group(i), \"UTF-8\"));\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\tlogger.error(\"Error when decoding url parameters\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic String apply(String[] values) {\n\t\tString regex = \"\\\\{.*?\\\\}\";\n\t\tString result = this.originalPattern;\n\t\tfor (int i = 0; i < values.length; i++) {\n\t\t\tresult = result.replaceFirst(regex, values[i].replaceAll(\"\\\\$\", \"\\\\\\\\\\\\$\"));\n\t\t}\n\t\treturn result.toString();\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.route;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.TwoWayConverter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.http.MutableRequest;\n\n/**\n * Default implementation of parameters control on uris.\n *\n * @author guilherme silveira\n */\npublic class DefaultParametersControl implements ParametersControl {\n\n\tprivate final Logger logger = LoggerFactory.getLogger(DefaultParametersControl.class);\n\tprivate final List<String> parameters = new ArrayList<String>();\n\tprivate final Pattern pattern;\n\tprivate final String originalPattern;\n\tprivate final Converters converters;\n    private final Evaluator evaluator;\n\n    public DefaultParametersControl(String originalPattern, Map<String, String> parameterPatterns, Converters converters, Evaluator evaluator) {\n\t\tthis.originalPattern = originalPattern;\n\t\tthis.converters = converters;\n\t\tthis.pattern = compilePattern(originalPattern, parameterPatterns);\n        this.evaluator = evaluator;\n\t}\n\n\tpublic DefaultParametersControl(String originalPattern, Converters converters, Evaluator evaluator) {\n\t\tthis(originalPattern, Collections.<String, String>emptyMap(), converters, evaluator);\n\t}\n\n\tprivate Pattern compilePattern(String originalPattern, Map<String, String> parameterPatterns) {\n\t\tMap<String, String> parameters = new HashMap<String, String>(parameterPatterns);\n\t\tMatcher matcher = Pattern.compile(\"\\\\{((?=[^\\\\{]+?[\\\\{])[^\\\\}]+?\\\\}|[^\\\\}]+?)\\\\}\").matcher(originalPattern);\n\t\twhile (matcher.find()) {\n\t\t\tString value = matcher.group(1);\n\t\t\tString defaultPattern = value.matches(\"^[^:]+\\\\*$\")? \".*\" : value.indexOf(\":\") >= 0 ? value.replaceAll(\"^[^\\\\:]+?:\", \"\") : \"[^/]*\";\n\t\t\tif (!parameters.containsKey(value)) {\n\t\t\t\tparameters.put(value, defaultPattern);\n\t\t\t}\n\t\t\tthis.parameters.add(value.replaceAll(\"(\\\\:.*|\\\\*)$\", \"\"));\n\t\t}\n\t\tString patternUri = originalPattern;\n\t\tpatternUri = patternUri.replaceAll(\"/\\\\*\", \"/.*\");\n\t\tfor (Entry<String, String> parameter : parameters.entrySet()) {\n\t\t\tpatternUri = patternUri.replace(\"{\" + parameter.getKey() + \"}\", \"(\" + parameter.getValue() + \")\");\n\t\t}\n\t\tlogger.debug(\"For \" + originalPattern + \" retrieved \" + patternUri + \" with \" + parameters);\n\t\treturn Pattern.compile(patternUri);\n\t}\n\n\tpublic String fillUri(String[] paramNames, Object... paramValues) {\n\t\tif (paramNames.length != paramValues.length) {\n\t\t\tthrow new IllegalArgumentException(\"paramNames must have the same length as paramValues. Names: \" + Arrays.toString(paramNames) + \" Values: \" + Arrays.toString(paramValues));\n\t\t}\n\t\n\t\tString[] splittedPatterns = splitUriRegexes(paramNames);\n\t\t\n\t\tString base = originalPattern;\n\t\tfor (int i=0; i<parameters.size(); i++) {\n\t\t\tString key = parameters.get(i);\n\t\t\tObject param = selectParam(key, paramNames, paramValues);\n\t\t\tObject result = evaluator.get(param, key);\n\t\t\tif (result != null) {\n\t\t\t\tClass<?> type = result.getClass();\n\t\t\t\tif (converters.existsTwoWayFor(type)) {\n\t\t\t\t\tTwoWayConverter converter = converters.twoWayConverterFor(type);\n\t\t\t\t\tresult = converter.convert(result);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbase = base.replace(splittedPatterns[i], result == null ? \"\" : result.toString());\n\t\t}\n\t\t\n\t\treturn base.replaceAll(\"\\\\.\\\\*\", \"\");\n\t}\n\n\tprivate String[] splitUriRegexes(String[] paramNames) {\n\t\tMatcher uriMatcher = Pattern.compile(\"\\\\{((?=[^\\\\{]+?[\\\\{])[^\\\\}]+?\\\\}|[^\\\\}]+?)\\\\}\").matcher(originalPattern);\n\t\tString[] splittedPatterns = new String[paramNames.length];\n\t\t\n\t\tfor(int i=0; i<paramNames.length && uriMatcher.find(); i++) {\n\t\t\tsplittedPatterns[i] = \"{\" + uriMatcher.group(1) + \"}\";\n\t\t}\n\t\treturn splittedPatterns;\n\t}\n\n\tprivate Object selectParam(String key, String[] paramNames, Object[] paramValues) {\n\t\tfor (int i = 0; i < paramNames.length; i++) {\n\t\t\tif (key.matches(\"^\" + paramNames[i] + \"(\\\\..*|$)\")) {\n\t\t\t\treturn paramValues[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic boolean matches(String uri) {\n\t\treturn pattern.matcher(uri).matches();\n\t}\n\n\tpublic void fillIntoRequest(String uri, MutableRequest request) {\n\t\tMatcher m = pattern.matcher(uri);\n\t\tm.matches();\n\t\tfor (int i = 1; i <= m.groupCount(); i++) {\n\t\t\tString name = parameters.get(i - 1);\n\t\t\ttry {\n\t\t\t\trequest.setParameter(name, URLDecoder.decode(m.group(i), \"UTF-8\"));\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\tlogger.error(\"Error when decoding url parameters\");\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic String apply(String[] values) {\n\t\tString regex = \"\\\\{.*?\\\\}\";\n\t\tString result = this.originalPattern;\n\t\tfor (int i = 0; i < values.length; i++) {\n\t\t\tresult = result.replaceFirst(regex, values[i].replaceAll(\"\\\\$\", \"\\\\\\\\\\\\$\"));\n\t\t}\n\t\treturn result.toString();\n\t}\n\n}\n","lineNo":91}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.iogi;\n\nimport java.lang.reflect.AccessibleObject;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport br.com.caelum.iogi.Instantiator;\nimport br.com.caelum.iogi.MultiInstantiator;\nimport br.com.caelum.iogi.ObjectInstantiator;\nimport br.com.caelum.iogi.collections.ArrayInstantiator;\nimport br.com.caelum.iogi.collections.ListInstantiator;\nimport br.com.caelum.iogi.conversion.FallbackConverter;\nimport br.com.caelum.iogi.conversion.StringConverter;\nimport br.com.caelum.iogi.parameters.Parameter;\nimport br.com.caelum.iogi.parameters.Parameters;\nimport br.com.caelum.iogi.reflection.Target;\nimport br.com.caelum.iogi.spi.DependencyProvider;\nimport br.com.caelum.iogi.spi.ParameterNamesProvider;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.converter.ConversionError;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.InvalidParameterException;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.validator.annotation.ValidationException;\n\nimport com.google.common.collect.ImmutableList;\n\n@Component\n@RequestScoped\npublic class VRaptorInstantiator implements Instantiator<Object> {\n\tprivate final Converters converters;\n\tprivate final Container container;\n\tprivate final Localization localization;\n\tprivate final MultiInstantiator multiInstantiator;\n\tprivate final ParameterNameProvider parameterNameProvider;\n\tprivate final Validator validator;\n\n\tpublic VRaptorInstantiator(Converters converters, Container container, Localization localization, ParameterNameProvider parameterNameProvider, Validator validator) {\n\t\tthis.converters = converters;\n\t\tthis.container = container;\n\t\tthis.localization = localization;\n\t\tthis.parameterNameProvider = parameterNameProvider;\n\t\tthis.validator = validator;\n\n\t\tDependencyProvider dependencyProvider = new VRaptorDependencyProvider();\n\t\tParameterNamesProvider parameterNamesProvider =\n\t\t\tnew VRaptorParameterNamesProvider();\n\n\t\tList<Instantiator<?>> instantiatorList = ImmutableList.of(\n\t\t\tnew VRaptorTypeConverter(),\n\t\t\tFallbackConverter.fallbackToNull(new StringConverter()),\n\t\t\tnew ArrayInstantiator(this),\n\t\t\tnew NullDecorator(new ListInstantiator(this)), //NOTE: NullDecorator is here to preserve existing behaviour. Don't know if it is the ideal one, though.\n\t\t\tnew ObjectInstantiator(this, dependencyProvider, parameterNamesProvider));\n\t\tmultiInstantiator = new MultiInstantiator(instantiatorList);\n\t}\n\n\tpublic boolean isAbleToInstantiate(Target<?> target) {\n\t\treturn true;\n\t}\n\n\tpublic Object instantiate(Target<?> target, Parameters parameters) {\n\t\treturn multiInstantiator.instantiate(target, parameters);\n\t}\n\n\tprivate final class VRaptorTypeConverter implements Instantiator<Object> {\n\t\tpublic boolean isAbleToInstantiate(Target<?> target) {\n\t\t\treturn !String.class.equals(target.getClassType()) && converters.existsFor(target.getClassType());\n\t\t}\n\n\t\tpublic Object instantiate(Target<?> target, Parameters parameters) {\n\t\t\ttry {\n\t\t\t\tParameter parameter = parameters.namedAfter(target);\n\t\t\t\treturn converterForTarget(target).convert(parameter.getValue(), target.getClassType(), localization.getBundle());\n\t\t\t}\n\t\t\tcatch (ConversionError ex) {\n\t\t\t\tvalidator.add(new ValidationMessage(ex.getMessage(), target.getName()));\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\tif (e.getClass().isAnnotationPresent(ValidationException.class)) {\n\t\t\t\t\tvalidator.add(new ValidationMessage(e.getLocalizedMessage(), target.getName()));\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InvalidParameterException(\"Exception when trying to instantiate \" + target, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tprivate Converter<Object> converterForTarget(Target<?> target) {\n\t\t\treturn (Converter<Object>) converters.to(target.getClassType());\n\t\t}\n\t}\n\n\tprivate final class VRaptorDependencyProvider implements DependencyProvider {\n\t\tpublic boolean canProvide(Target<?> target) {\n\t\t\treturn container.canProvide(target.getClassType());\n\t\t}\n\n\t\tpublic Object provide(Target<?> target) {\n\t\t\treturn container.instanceFor(target.getClassType());\n\t\t}\n\t}\n\n\tprivate final class VRaptorParameterNamesProvider implements ParameterNamesProvider {\n\t\tpublic List<String> lookupParameterNames(AccessibleObject methodOrConstructor) {\n\t\t\treturn Arrays.asList(parameterNameProvider.parameterNamesFor(methodOrConstructor));\n\t\t}\n\t}\n\n\tprivate final class NullDecorator implements Instantiator<Object> {\n\t\tprivate final Instantiator<?> delegateInstantiator;\n\n\t\tpublic NullDecorator(Instantiator<?> delegateInstantiator) {\n\t\t\tthis.delegateInstantiator = delegateInstantiator;\n\t\t}\n\n\t\tpublic boolean isAbleToInstantiate(Target<?> target) {\n\t\t\treturn delegateInstantiator.isAbleToInstantiate(target);\n\t\t}\n\n\t\tpublic Object instantiate(Target<?> target, Parameters parameters) {\n\t\t\tif (!parameters.hasRelatedTo(target)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn delegateInstantiator.instantiate(target, parameters);\n\t\t}\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.iogi;\n\nimport java.lang.reflect.AccessibleObject;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport br.com.caelum.iogi.Instantiator;\nimport br.com.caelum.iogi.MultiInstantiator;\nimport br.com.caelum.iogi.ObjectInstantiator;\nimport br.com.caelum.iogi.collections.ArrayInstantiator;\nimport br.com.caelum.iogi.collections.ListInstantiator;\nimport br.com.caelum.iogi.conversion.FallbackConverter;\nimport br.com.caelum.iogi.conversion.StringConverter;\nimport br.com.caelum.iogi.parameters.Parameter;\nimport br.com.caelum.iogi.parameters.Parameters;\nimport br.com.caelum.iogi.reflection.Target;\nimport br.com.caelum.iogi.spi.DependencyProvider;\nimport br.com.caelum.iogi.spi.ParameterNamesProvider;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\n\nimport com.google.common.collect.ImmutableList;\n\n@Component\n@RequestScoped\npublic class VRaptorInstantiator implements Instantiator<Object> {\n\tprivate final Converters converters;\n\tprivate final Container container;\n\tprivate final Localization localization;\n\tprivate final MultiInstantiator multiInstantiator;\n\tprivate final ParameterNameProvider parameterNameProvider;\n\tprivate final HttpServletRequest request;\n\n\tpublic VRaptorInstantiator(Converters converters, Container container, Localization localization, ParameterNameProvider parameterNameProvider, HttpServletRequest request) {\n\t\tthis.converters = converters;\n\t\tthis.container = container;\n\t\tthis.localization = localization;\n\t\tthis.parameterNameProvider = parameterNameProvider;\n\t\tthis.request = request;\n\n\t\tDependencyProvider dependencyProvider = new VRaptorDependencyProvider();\n\t\tParameterNamesProvider parameterNamesProvider = new VRaptorParameterNamesProvider();\n\n\t\tObjectInstantiator objectInstantiator = new ObjectInstantiator(this, dependencyProvider, parameterNamesProvider);\n\t\tList<Instantiator<?>> instantiatorList = ImmutableList.of(\n\t\t\tnew RequestAttributeInstantiator(),\n\t\t\tnew VRaptorTypeConverter(),\n\t\t\tFallbackConverter.fallbackToNull(new StringConverter()),\n\t\t\tnew ArrayInstantiator(this),\n\t\t\tnew NullDecorator(new ListInstantiator(this)), //NOTE: NullDecorator is here to preserve existing behaviour. Don't know if it is the ideal one, though.\n\t\t\tnew DependencyInstantiator(objectInstantiator),\n\t\t\tobjectInstantiator);\n\t\tmultiInstantiator = new MultiInstantiator(instantiatorList);\n\t}\n\n\tpublic boolean isAbleToInstantiate(Target<?> target) {\n\t\treturn true;\n\t}\n\n\tpublic Object instantiate(Target<?> target, Parameters parameters) {\n\t\treturn multiInstantiator.instantiate(target, parameters);\n\t}\n\n\tprivate final class RequestAttributeInstantiator implements Instantiator<Object> {\n\t\tpublic Object instantiate(Target<?> target, Parameters params) {\n\t\t\treturn request.getAttribute(target.getName());\n\t\t}\n\n\t\tpublic boolean isAbleToInstantiate(Target<?> target) {\n\t\t\treturn request.getAttribute(target.getName()) != null;\n\t\t}\n\n\t}\n\n\tprivate final class DependencyInstantiator implements Instantiator<Object> {\n\t\tprivate final Instantiator<Object> delegate;\n\n\t\tpublic DependencyInstantiator(Instantiator<Object> delegate) {\n\t\t\tthis.delegate = delegate;\n\t\t}\n\t\tpublic Object instantiate(Target<?> target, Parameters params) {\n\t\t\tif (params.hasRelatedTo(target)) {\n\t\t\t\treturn delegate.instantiate(target, params);\n\t\t\t}\n\t\t\treturn container.instanceFor(target.getClassType());\n\t\t}\n\n\t\tpublic boolean isAbleToInstantiate(Target<?> target) {\n\t\t\treturn container.canProvide(target.getClassType());\n\t\t}\n\n\t}\n\n\tprivate final class VRaptorTypeConverter implements Instantiator<Object> {\n\t\tpublic boolean isAbleToInstantiate(Target<?> target) {\n\t\t\treturn !String.class.equals(target.getClassType()) && converters.existsFor(target.getClassType());\n\t\t}\n\n\t\tpublic Object instantiate(Target<?> target, Parameters parameters) {\n\n\t\t\tParameter parameter = parameters.namedAfter(target);\n\t\t\treturn converterForTarget(target).convert(parameter.getValue(), target.getClassType(), localization.getBundle());\n\t\t}\n\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tprivate Converter<Object> converterForTarget(Target<?> target) {\n\t\t\treturn (Converter<Object>) converters.to(target.getClassType());\n\t\t}\n\t}\n\n\tprivate final class VRaptorDependencyProvider implements DependencyProvider {\n\t\tpublic boolean canProvide(Target<?> target) {\n\t\t\treturn container.canProvide(target.getClassType());\n\t\t}\n\n\t\tpublic Object provide(Target<?> target) {\n\t\t\treturn container.instanceFor(target.getClassType());\n\t\t}\n\t}\n\n\tprivate final class VRaptorParameterNamesProvider implements ParameterNamesProvider {\n\t\tpublic List<String> lookupParameterNames(AccessibleObject methodOrConstructor) {\n\t\t\treturn Arrays.asList(parameterNameProvider.parameterNamesFor(methodOrConstructor));\n\t\t}\n\t}\n\n\tprivate final class NullDecorator implements Instantiator<Object> {\n\t\tprivate final Instantiator<?> delegateInstantiator;\n\n\t\tpublic NullDecorator(Instantiator<?> delegateInstantiator) {\n\t\t\tthis.delegateInstantiator = delegateInstantiator;\n\t\t}\n\n\t\tpublic boolean isAbleToInstantiate(Target<?> target) {\n\t\t\treturn delegateInstantiator.isAbleToInstantiate(target);\n\t\t}\n\n\t\tpublic Object instantiate(Target<?> target, Parameters parameters) {\n\t\t\tif (!parameters.hasRelatedTo(target)) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn delegateInstantiator.instantiate(target, parameters);\n\t\t}\n\t}\n}\n","lineNo":68}
{}
{"Smelly Sample":"package br.com.caelum.vraptor.scan;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Arrays;\n\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class ScannotationComponentScannerTest {\n\n    private @Mock ClasspathResolver classPathResolver;\n    \n    @Test\n    public void shouldScanPackages() {\n        MockitoAnnotations.initMocks(this);\n        \n        this.classPathResolver = mock(ClasspathResolver.class);\n        when(classPathResolver.findBasePackages()).thenReturn(Arrays.asList(\"br.com.caelum.vraptor.restfulie\"));\n        when(classPathResolver.findWebInfClassesLocation()).thenReturn(Thread.currentThread().getContextClassLoader().getResource(\"br/com/caelum/vraptor/ioc/\"));\n        \n        ScannotationComponentScanner scanner = new ScannotationComponentScanner();\n        assertFalse(scanner.scan(this.classPathResolver).isEmpty());\n    }\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.scan;\n\nimport static org.hamcrest.Matchers.hasItem;\nimport static org.junit.Assert.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.Arrays;\nimport java.util.Collection;\n\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.ioc.fixture.ResourceInTheClasspath;\n\npublic class ScannotationComponentScannerTest {\n\n    private @Mock ClasspathResolver classPathResolver;\n\n    @Test\n    public void shouldScanWEBINFClasses() {\n        MockitoAnnotations.initMocks(this);\n\n        this.classPathResolver = mock(ClasspathResolver.class);\n        when(classPathResolver.findBasePackages()).thenReturn(Arrays.asList(\"\"));\n        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n        when(classPathResolver.getClassLoader()).thenReturn(classLoader);\n\t\twhen(classPathResolver.findWebInfClassesLocation()).thenReturn(classLoader.getResource(\"br/com/caelum/vraptor/ioc/\"));\n\n        ScannotationComponentScanner scanner = new ScannotationComponentScanner();\n        assertThat(scanner.scan(this.classPathResolver), hasItem(ResourceInTheClasspath.class.getName()));\n    }\n    @Test\n    public void shouldScanBasePackages() {\n    \tMockitoAnnotations.initMocks(this);\n\n    \tthis.classPathResolver = mock(ClasspathResolver.class);\n    \tClassLoader classLoader = new URLClassLoader(new URL[] {ScannotationComponentScannerTest.class.getResource(\"/test-fixture.jar\")});\n    \twhen(classPathResolver.findBasePackages()).thenReturn(Arrays.asList(\"br.com.caelum.vraptor.ioc\"));\n    \twhen(classPathResolver.getClassLoader()).thenReturn(classLoader);\n\t\twhen(classPathResolver.findWebInfClassesLocation()).thenReturn(classLoader.getResource(\"br/com/caelum/vraptor/test/\"));\n\n    \tScannotationComponentScanner scanner = new ScannotationComponentScanner();\n    \tCollection<String> classes = scanner.scan(this.classPathResolver);\n    \tassertThat(classes, hasItem(ResourceInTheClasspath.class.getName()));\n    }\n}\n","lineNo":29}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.ioc.guice;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Type;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Map.Entry;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.ioc.Cacheable;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.ComponentFactoryIntrospector;\n\nimport com.google.inject.Binder;\nimport com.google.inject.Scope;\nimport com.google.inject.ScopeAnnotation;\nimport com.google.inject.TypeLiteral;\nimport com.google.inject.binder.ScopedBindingBuilder;\nimport com.google.inject.util.Types;\n\n/**\n * ComponentRegistry for Guice\n *\n * @author Lucas Cavalcanti\n * @author Sergio Lopes\n * @since 3.2\n *\n */\npublic class GuiceComponentRegistry implements ComponentRegistry {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(GuiceComponentRegistry.class);\n\n\tprivate final Binder binder;\n\n\tprivate final Set<Class<?>> boundClasses = new HashSet<Class<?>>();\n\n\tpublic GuiceComponentRegistry(Binder binder) {\n\t\tthis.binder = binder;\n\t}\n\tpublic void register(Class requiredType, Class componentType) {\n\t\tboundClasses.add(requiredType);\n\t\tlogger.debug(\"Binding {} to {}\", requiredType, componentType);\n\t\tScopedBindingBuilder binding = bindToConstructor(requiredType, componentType);\n\t\tif (defaultScope(componentType)) {\n\t\t\tbinding.in(GuiceProvider.REQUEST);\n\t\t}\n\t\tregisterFactory(componentType);\n\t}\n\n\tprivate boolean defaultScope(Class componentType) {\n\t\tfor(Annotation annotation : componentType.getAnnotations()) {\n\t\t\tif (annotation.annotationType().isAnnotationPresent(ScopeAnnotation.class)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tpublic void deepRegister(Class componentType) {\n\t\tregister(componentType, componentType);\n\t\tdeepRegister(componentType, componentType);\n\t}\n\n\tprivate void deepRegister(Class required, Class component) {\n\t    if (required == null || required.equals(Object.class)) {\n\t\t\treturn;\n\t\t}\n\t    if (boundClasses.add(required)) {\n\t    \tlogger.debug(\"Binding {} to {}\", required, component);\n\t        binder.bind(required).to(component);\n\t    } else {\n\t    \tlogger.debug(\"Ignoring binding of {} to {}\", required, component);\n\t    }\n\n\t    for (Class<?> c : required.getInterfaces()) {\n\t        deepRegister(c, component);\n\t    }\n\n\t    deepRegister(required.getSuperclass(), component);\n\t}\n\n\tpublic void registerInScope(Map<Class, Class> classes, Scope scope) {\n\t\tfor (Entry<Class, Class> entry : classes.entrySet()) {\n\t\t\tbindToConstructor(entry.getKey(), entry.getValue()).in(scope);\n\t\t\tregisterFactory(entry.getValue());\n\t\t}\n\t}\n\tprivate ScopedBindingBuilder bindToConstructor(Class requiredType, Class componentType) {\n\t\tif (componentType.isAnnotationPresent(Cacheable.class)) {\n\t\t\treturn binder.bind(requiredType).annotatedWith(Cacheable.class).toConstructor(componentType.getDeclaredConstructors()[0]);\n\t\t}\n\t\treturn binder.bind(requiredType).toConstructor(componentType.getDeclaredConstructors()[0]);\n\t}\n\n\tprivate void registerFactory(Class componentType) {\n\t\tif (ComponentFactory.class.isAssignableFrom(componentType)) {\n\t\t\tfinal Class<?> target = new ComponentFactoryIntrospector().targetTypeForComponentFactory(componentType);\n\t\t\tType adapterType = Types.newParameterizedType(ComponentFactoryProviderAdapter.class, target);\n\t\t\tType factoryType = Types.newParameterizedType(ComponentFactory.class, target);\n//\t\t\tbinder.bind(TypeLiteral.get(adapterType));\n\t\t\tbinder.bind(TypeLiteral.get(factoryType)).to(componentType);\n\t\t\tbinder.bind(target).toProvider((TypeLiteral) TypeLiteral.get(adapterType));\n\t\t}\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.ioc.guice;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Map.Entry;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.ioc.Cacheable;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.ComponentFactoryIntrospector;\n\nimport com.google.inject.Binder;\nimport com.google.inject.Provider;\nimport com.google.inject.Scope;\nimport com.google.inject.ScopeAnnotation;\nimport com.google.inject.TypeLiteral;\nimport com.google.inject.binder.ScopedBindingBuilder;\nimport com.google.inject.matcher.Matchers;\nimport com.google.inject.spi.TypeEncounter;\nimport com.google.inject.spi.TypeListener;\nimport com.google.inject.util.Types;\n\n/**\n * ComponentRegistry for Guice\n *\n * @author Lucas Cavalcanti\n * @author Sergio Lopes\n * @since 3.2\n *\n */\npublic class GuiceComponentRegistry implements ComponentRegistry {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(GuiceComponentRegistry.class);\n\n\tprivate final Binder binder;\n\n\tprivate final Set<Class<?>> boundClasses = new HashSet<Class<?>>();\n\tprivate final Set<Class<?>> listTypes = new HashSet<Class<?>>();\n\n\tpublic GuiceComponentRegistry(Binder binder) {\n\t\tthis.binder = binder;\n\t}\n\tpublic void register(Class requiredType, Class componentType) {\n\t\tboundClasses.add(requiredType);\n\t\tlogger.debug(\"Binding {} to {}\", requiredType, componentType);\n\t\tScopedBindingBuilder binding = bindToConstructor(requiredType, componentType);\n\t\tif (defaultScope(componentType)) {\n\t\t\tbinding.in(GuiceProvider.REQUEST);\n\t\t}\n\t\tregisterFactory(componentType);\n\t}\n\n\tprivate boolean defaultScope(Class componentType) {\n\t\tfor(Annotation annotation : componentType.getAnnotations()) {\n\t\t\tif (annotation.annotationType().isAnnotationPresent(ScopeAnnotation.class)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tpublic void deepRegister(Class componentType) {\n\t\tregister(componentType, componentType);\n\t\tdeepRegister(componentType, componentType);\n\t}\n\n\tprivate void deepRegister(Class required, Class component) {\n\t    if (required == null || required.equals(Object.class)) {\n\t\t\treturn;\n\t\t}\n\t    if (boundClasses.add(required)) {\n\t    \tlogger.debug(\"Binding {} to {}\", required, component);\n\t        binder.bind(required).to(component);\n\t    } else {\n\t    \tlogger.debug(\"Ignoring binding of {} to {}\", required, component);\n\t    }\n\n\t    for (Class<?> c : required.getInterfaces()) {\n\t        deepRegister(c, component);\n\t    }\n\n\t    deepRegister(required.getSuperclass(), component);\n\t}\n\n\tpublic void registerInScope(Map<Class, Class> classes, Scope scope) {\n\t\tfor (Entry<Class, Class> entry : classes.entrySet()) {\n\t\t\tbindToConstructor(entry.getKey(), entry.getValue()).in(scope);\n\t\t\tregisterFactory(entry.getValue());\n\t\t}\n\t}\n\tprivate ScopedBindingBuilder bindToConstructor(Class requiredType, Class componentType) {\n\t\tif (componentType.isAnnotationPresent(Cacheable.class)) {\n\t\t\treturn binder.bind(requiredType).annotatedWith(Cacheable.class).toConstructor(componentType.getDeclaredConstructors()[0]);\n\t\t}\n\t\tConstructor constructor = componentType.getDeclaredConstructors()[0];\n\t\tfor (Type type : constructor.getGenericParameterTypes()) {\n\t\t\tif (type instanceof ParameterizedType) {\n\t\t\t\tParameterizedType ptype =((ParameterizedType) type);\n\t\t\t\tif (ptype.getRawType() instanceof Class<?> && List.class.isAssignableFrom((Class<?>) ptype.getRawType())\n\t\t\t\t\t\t&& ptype.getRawType() instanceof Class<?> && !listTypes.contains(ptype.getActualTypeArguments()[0])) {\n\t\t\t\t\tlistTypes.add((Class<?>) ptype.getActualTypeArguments()[0]);\n\t\t\t\t\tregisterListType((Class<?>) ptype.getActualTypeArguments()[0], binder);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn binder.bind(requiredType).toConstructor(constructor);\n\t}\n\n\tprivate void registerFactory(Class componentType) {\n\t\tif (ComponentFactory.class.isAssignableFrom(componentType)) {\n\t\t\tfinal Class<?> target = new ComponentFactoryIntrospector().targetTypeForComponentFactory(componentType);\n\t\t\tType adapterType = Types.newParameterizedType(ComponentFactoryProviderAdapter.class, target);\n\t\t\tType factoryType = Types.newParameterizedType(ComponentFactory.class, target);\n//\t\t\tbinder.bind(TypeLiteral.get(adapterType));\n\t\t\tbinder.bind(TypeLiteral.get(factoryType)).to(componentType);\n\t\t\tbinder.bind(target).toProvider((TypeLiteral) TypeLiteral.get(adapterType));\n\t\t}\n\t}\n\tprivate <T> void registerListType(Class<T> type, Binder binder) {\n\t\tfinal AllImplementationsProvider<T> provider = new AllImplementationsProvider<T>();\n\t\tbinder.bindListener(VRaptorAbstractModule.type(Matchers.subclassesOf(type)), new TypeListener() {\n\t\t\tpublic void hear(TypeLiteral literal, TypeEncounter encounter) {\n\t\t\t\tprovider.addType(literal.getRawType());\n\t\t\t}\n\t\t});\n\t\tbinder.bind(TypeLiteral.get(Types.listOf(type))).toProvider((Provider)provider);\n\t\tbinder.requestInjection(provider);\n\t}\n\n}\n","lineNo":118}
{"Smelly Sample":"package br.com.caelum.vraptor.util.hibernate.extra;\n\nimport static com.google.common.base.Predicates.instanceOf;\nimport static com.google.common.collect.Iterables.any;\nimport static com.google.common.collect.Iterables.isEmpty;\nimport static java.util.Arrays.asList;\n\nimport java.io.Serializable;\nimport java.lang.annotation.Annotation;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport org.hibernate.Session;\n\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Intercepts;\nimport br.com.caelum.vraptor.Lazy;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.interceptor.Interceptor;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\nimport com.google.common.base.Predicate;\nimport com.google.common.collect.Iterables;\n\n/**\n * Interceptor that loads given entity from the database.\n *\n * @author Lucas Cavalcanti\n * @author Cecilia Fernandes\n * @since 3.3.2\n *\n */\n@Intercepts(before=ParametersInstantiatorInterceptor.class)\n@Lazy\npublic class ParameterLoaderInterceptor implements Interceptor {\n\n\tprivate final Session session;\n\tprivate final HttpServletRequest request;\n\tprivate final ParameterNameProvider provider;\n\tprivate final Result result;\n\tprivate final Converters converters;\n\tprivate final Localization localization;\n\n\tpublic ParameterLoaderInterceptor(Session session, HttpServletRequest request, ParameterNameProvider provider,\n\t\t\tResult result, Converters converters, Localization localization) {\n\t\tthis.session = session;\n\t\tthis.request = request;\n\t\tthis.provider = provider;\n\t\tthis.result = result;\n\t\tthis.converters = converters;\n\t\tthis.localization = localization;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn any(asList(method.getMethod().getParameterAnnotations()), hasLoadAnnotation());\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tAnnotation[][] annotations = method.getMethod().getParameterAnnotations();\n\n\t\tString[] names = provider.parameterNamesFor(method.getMethod());\n\n\t\tClass<?>[] types = method.getMethod().getParameterTypes();\n\n\t\tfor (int i = 0; i < names.length; i++) {\n\t\t\tIterable<Load> loads = Iterables.filter(asList(annotations[i]), Load.class);\n\t\t\tif (!isEmpty(loads)) {\n\t\t\t\tObject loaded = load(names[i], types[i]);\n\t\t\t\tLoad load = loads.iterator().next();\n\t\t\t\tif (!load.managed()) {\n\t\t\t\t\tsession.evict(loaded);\n\t\t\t\t}\n\t\t\t\tif (loaded == null) { result.notFound(); return; }\n\n\t\t\t\trequest.setAttribute(names[i], loaded);\n\t\t\t}\n\t\t}\n\n\t\tstack.next(method, resourceInstance);\n\t}\n\n\tprivate Object load(String name, Class type) {\n\t\tString parameter = request.getParameter(name + \".id\");\n\t\tif (parameter == null) {\n\t\t\treturn null;\n\t\t}\n\t\tClass<?> idType = new Mirror().on(type).reflect().field(\"id\").getType();\n\t\tConverter<?> converter = converters.to(idType);\n\n\t\tSerializable id = (Serializable) converter.convert(parameter, type, localization.getBundle());\n\t\treturn session.get(type, id);\n\t}\n\n\tprivate Predicate<Annotation[]> hasLoadAnnotation() {\n\t\treturn new Predicate<Annotation[]>() {\n\t\t\tpublic boolean apply(Annotation[] param) {\n\t\t\t\treturn any(asList(param), instanceOf(Load.class));\n\t\t\t}\n\t\t};\n\t}\n\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.util.hibernate.extra;\n\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Predicates.instanceOf;\nimport static com.google.common.collect.Iterables.any;\nimport static com.google.common.collect.Iterables.isEmpty;\nimport static java.util.Arrays.asList;\n\nimport java.io.Serializable;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport org.hibernate.Session;\n\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Intercepts;\nimport br.com.caelum.vraptor.Lazy;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.interceptor.Interceptor;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\nimport com.google.common.base.Predicate;\nimport com.google.common.collect.Iterables;\n\n/**\n * Interceptor that loads given entity from the database.\n *\n * @author Lucas Cavalcanti\n * @author Cecilia Fernandes\n * @since 3.3.2\n *\n */\n@Intercepts(before=ParametersInstantiatorInterceptor.class)\n@Lazy\npublic class ParameterLoaderInterceptor implements Interceptor {\n\n\tprivate final Session session;\n\tprivate final HttpServletRequest request;\n\tprivate final ParameterNameProvider provider;\n\tprivate final Result result;\n\tprivate final Converters converters;\n\tprivate final Localization localization;\n\n\tpublic ParameterLoaderInterceptor(Session session, HttpServletRequest request, ParameterNameProvider provider,\n\t\t\tResult result, Converters converters, Localization localization) {\n\t\tthis.session = session;\n\t\tthis.request = request;\n\t\tthis.provider = provider;\n\t\tthis.result = result;\n\t\tthis.converters = converters;\n\t\tthis.localization = localization;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn any(asList(method.getMethod().getParameterAnnotations()), hasLoadAnnotation());\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tAnnotation[][] annotations = method.getMethod().getParameterAnnotations();\n\n\t\tString[] names = provider.parameterNamesFor(method.getMethod());\n\n\t\tClass<?>[] types = method.getMethod().getParameterTypes();\n\n\t\tfor (int i = 0; i < names.length; i++) {\n\t\t\tIterable<Load> loads = Iterables.filter(asList(annotations[i]), Load.class);\n\t\t\tif (!isEmpty(loads)) {\n\t\t\t\tObject loaded = load(names[i], types[i]);\n\t\t\t\tLoad load = loads.iterator().next();\n\t\t\t\tif (!load.managed()) {\n\t\t\t\t\tsession.evict(loaded);\n\t\t\t\t}\n\t\t\t\tif (loaded == null) { result.notFound(); return; }\n\n\t\t\t\trequest.setAttribute(names[i], loaded);\n\t\t\t}\n\t\t}\n\n\t\tstack.next(method, resourceInstance);\n\t}\n\n\tprivate Object load(String name, Class type) {\n\t\tString parameter = request.getParameter(name + \".id\");\n\t\tif (parameter == null) {\n\t\t\treturn null;\n\t\t}\n\t\tField field = new Mirror().on(type).reflect().field(\"id\");\n\t\tcheckArgument(field != null, \"Entity \" + type.getSimpleName() + \" must have an id property for @Load.\");\n\n\t\tClass<?> idType = field.getType();\n\t\tConverter<?> converter = converters.to(idType);\n\t\tcheckArgument(converter != null, \"Entity \" + type.getSimpleName() + \" id type \" + idType + \" must have a converter\");\n\n\t\tSerializable id = (Serializable) converter.convert(parameter, type, localization.getBundle());\n\t\treturn session.get(type, id);\n\t}\n\n\tprivate Predicate<Annotation[]> hasLoadAnnotation() {\n\t\treturn new Predicate<Annotation[]>() {\n\t\t\tpublic boolean apply(Annotation[] param) {\n\t\t\t\treturn any(asList(param), instanceOf(Load.class));\n\t\t\t}\n\t\t};\n\t}\n\n\n}\n","lineNo":98}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.serialization.xstream;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport java.io.Writer;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Map.Entry;\n\nimport net.vidageek.mirror.dsl.Mirror;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\nimport br.com.caelum.vraptor.serialization.ProxyInitializer;\nimport br.com.caelum.vraptor.serialization.Serializer;\nimport br.com.caelum.vraptor.serialization.SerializerBuilder;\n\nimport com.google.common.collect.LinkedListMultimap;\nimport com.google.common.collect.Multimap;\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.converters.Converter;\nimport com.thoughtworks.xstream.converters.MarshallingContext;\nimport com.thoughtworks.xstream.converters.UnmarshallingContext;\nimport com.thoughtworks.xstream.io.HierarchicalStreamReader;\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n\n/**\n * A SerializerBuilder based on XStream\n * @author Lucas Cavalcanti\n * @since 3.0.2\n */\npublic class XStreamSerializer implements SerializerBuilder {\n\n\tprivate final XStream xstream;\n\tprivate final Writer writer;\n\tprivate Object root;\n\tprivate Class<?> rootClass;\n\tprivate final Multimap<Class<?>, String> excludes = LinkedListMultimap.create();\n\tprivate Set<Class<?>> elementTypes;\n\tprivate final TypeNameExtractor extractor;\n\tprivate final ProxyInitializer initializer;\n\n\tpublic XStreamSerializer(XStream xstream, Writer writer, TypeNameExtractor extractor, ProxyInitializer initializer) {\n\t\tthis.xstream = xstream;\n\t\tthis.writer = writer;\n\t\tthis.extractor = extractor;\n\t\tthis.initializer = initializer;\n\t}\n\n\tprivate boolean isPrimitive(Class<?> type) {\n\t\treturn type.isPrimitive()\n\t\t\t|| type.isEnum()\n\t\t\t|| Number.class.isAssignableFrom(type)\n\t\t\t|| type.equals(String.class)\n\t\t\t|| Date.class.isAssignableFrom(type)\n\t\t\t|| Calendar.class.isAssignableFrom(type)\n\t\t\t|| Boolean.class.equals(type)\n\t\t\t|| Character.class.equals(type);\n\t}\n\n\tpublic Serializer exclude(String... names) {\n\t\tfor (String name : names) {\n\t\t\tSet<Class<?>> parentTypes = getParentTypesFor(name);\n\t\t\tfor (Class<?> type : parentTypes) {\n\t\t\t\txstream.omitField(type, getNameFor(name));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate String getNameFor(String name) {\n\t\tString[] path = name.split(\"\\\\.\");\n\t\treturn path[path.length-1];\n\t}\n\n\tprivate Set<Class<?>> getParentTypesFor(String name) {\n\t\tif (elementTypes == null) {\n\t\t\tClass<?> type = rootClass;\n\t\t\treturn Collections.<Class<?>>singleton(getParentType(name, type));\n\t\t} else {\n\t\t\tSet<Class<?>> result = new HashSet<Class<?>>();\n\t\t\tfor (Class<?> type : elementTypes) {\n\t\t\t\tresult.add(getParentType(name, type));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tprivate Class<?> getParentType(String name, Class<?> type) {\n\t\tString[] path = name.split(\"\\\\.\");\n\t\tfor (int i = 0; i < path.length - 1; i++) {\n\t\t\ttype = getActualType(new Mirror().on(type).reflect().field(path[i]).getGenericType());\n\t\t}\n\t\treturn type;\n\t}\n\n\tprivate void preConfigure(Object obj,String alias) {\n\t\tcheckNotNull(obj, \"You can't serialize null objects\");\n\n\t\txstream.processAnnotations(obj.getClass());\n\n\t\trootClass = initializer.getActualClass(obj);\n\t\tif (alias == null && initializer.isProxy(obj.getClass())) {\n\t\t\talias = extractor.nameFor(rootClass);\n\t\t}\n\n\t\tsetRoot(obj);\n\n\t\tsetAlias(obj, alias);\n\t}\n\n\tprivate void setRoot(Object obj) {\n\t\tif (Collection.class.isInstance(obj)) {\n\t\t\tthis.root = normalizeList(obj);\n\t\t} else {\n\t\t\tClass<?> type = rootClass;\n\t\t\texcludeNonPrimitiveFields(type);\n\t\t\tthis.root = obj;\n\t\t}\n\t}\n\n\tprivate Collection<Object> normalizeList(Object obj) {\n\t\tCollection<Object> list;\n\t\tif (hasDefaultConverter()) {\n\t\t\tlist = new ArrayList<Object>((Collection<?>)obj);\n\t\t} else {\n\t\t\tlist = (Collection<Object>) obj;\n\t\t}\n\t\telementTypes = findElementTypes(list);\n\t\tfor (Class<?> type : elementTypes) {\n\t\t\texcludeNonPrimitiveFields(type);\n\t\t}\n\t\treturn list;\n\t}\n\n\tprivate boolean hasDefaultConverter() {\n\t\treturn xstream.getConverterLookup().lookupConverterForType(rootClass).equals(xstream.getConverterLookup().lookupConverterForType(Object.class));\n\t}\n\n\tprivate void setAlias(Object obj, String alias) {\n\t\tif (alias != null) {\n\t\t\tif (Collection.class.isInstance(obj) && (List.class.isInstance(obj) || hasDefaultConverter())) {\n\t\t\t\txstream.alias(alias, List.class);\n\t\t\t}\n\t\t\txstream.alias(alias, obj.getClass());\n\t\t}\n\t}\n\n\tpublic <T> Serializer from(T object, String alias) {\n\t\tpreConfigure(object, alias);\n\t\treturn this;\n\t}\n\n\tpublic <T> Serializer from(T object) {\n\t\tpreConfigure(object, null);\n\t\treturn this;\n\t}\n\n\tprivate Set<Class<?>> findElementTypes(Collection<Object> list) {\n\t\tSet<Class<?>> set = new HashSet<Class<?>>();\n\t\tfor (Object element : list) {\n\t\t\tif (element != null && !isPrimitive(element.getClass())) {\n\t\t\t\tset.add(initializer.getActualClass(element));\n\t\t\t}\n\t\t}\n\t\treturn set;\n\t}\n\n\tprivate void excludeNonPrimitiveFields(Class<?> type) {\n\t\tfor (Field field : new Mirror().on(type).reflectAll().fields()) {\n\t\t\tif (!isPrimitive(field.getType())) {\n\t\t\t\texcludes.put(type, field.getName());\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic Serializer include(String... fields) {\n\t\tfor (String field : fields) {\n\t\t\ttry {\n\t\t\t\tSet<Class<?>> parentTypes = getParentTypesFor(field);\n\t\t\t\tString fieldName = getNameFor(field);\n\t\t\t\tfor (Class<?> parentType : parentTypes) {\n\t\t\t\t\tType genericType = new Mirror().on(parentType).reflect().field(fieldName).getGenericType();\n\t\t\t\t\tClass<?> fieldType = getActualType(genericType);\n\n\t\t\t\t\tif (!excludes.containsKey(fieldType)) {\n\t\t\t\t\t\texcludeNonPrimitiveFields(fieldType);\n\t\t\t\t\t}\n\t\t\t\t\texcludes.remove(parentType, fieldName);\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\tthrow new IllegalArgumentException(\"Field path \" + field + \" doesn't exist\");\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate Class<?> getActualType(Type genericType) {\n\t\tif (genericType instanceof ParameterizedType) {\n\t\t\tParameterizedType type = (ParameterizedType) genericType;\n\t\t\tif (isCollection(type)) {\n\t\t\t\treturn (Class<?>) type.getActualTypeArguments()[0];\n\t\t\t}\n\t\t}\n\t\treturn (Class<?>) genericType;\n\t}\n\n\tprivate boolean isCollection(Type type) {\n\t\tif (type instanceof ParameterizedType) {\n\t\t\tParameterizedType ptype = (ParameterizedType) type;\n\t\t\treturn Collection.class.isAssignableFrom((Class<?>) ptype.getRawType())\n\t\t\t  || Map.class.isAssignableFrom((Class<?>) ptype.getRawType());\n\t\t}\n\t\treturn Collection.class.isAssignableFrom((Class<?>) type);\n\t}\n\n\tpublic void serialize() {\n\t\tfor (Entry<Class<?>, String> exclude : excludes.entries()) {\n\t\t\txstream.omitField(exclude.getKey(), exclude.getValue());\n\t\t}\n\t\tregisterProxyInitializer();\n\t\txstream.toXML(root, writer);\n\t}\n\n\tpublic Serializer recursive() {\n\t\texcludes.clear();\n\t\treturn this;\n\t}\n\n\tprivate void registerProxyInitializer() {\n\t\txstream.registerConverter(new Converter() {\n\n\t\t\tpublic boolean canConvert(Class clazz) {\n\t\t\t\treturn initializer.isProxy(clazz);\n\t\t\t}\n\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader,\n\t\t\t\t\tUnmarshallingContext context) {\n\t\t\t\tthrow new AssertionError();\n\t\t\t}\n\n\t\t\tpublic void marshal(Object value, HierarchicalStreamWriter writer,\n\t\t\t\t\tMarshallingContext context) {\n\t\t\t\tConverter converter = xstream.getConverterLookup().lookupConverterForType(initializer.getActualClass(value));\n\t\t\t\tinitializer.initialize(value);\n\t\t\t\tconverter.marshal(value, writer, context);\n\t\t\t}\n\t\t});\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.serialization.xstream;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport java.io.Writer;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Map.Entry;\n\nimport net.vidageek.mirror.dsl.Mirror;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\nimport br.com.caelum.vraptor.serialization.ProxyInitializer;\nimport br.com.caelum.vraptor.serialization.Serializer;\nimport br.com.caelum.vraptor.serialization.SerializerBuilder;\n\nimport com.google.common.collect.LinkedListMultimap;\nimport com.google.common.collect.Multimap;\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.converters.Converter;\nimport com.thoughtworks.xstream.converters.MarshallingContext;\nimport com.thoughtworks.xstream.converters.UnmarshallingContext;\nimport com.thoughtworks.xstream.io.HierarchicalStreamReader;\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n\n/**\n * A SerializerBuilder based on XStream\n * @author Lucas Cavalcanti\n * @since 3.0.2\n */\npublic class XStreamSerializer implements SerializerBuilder {\n\n\tprivate final XStream xstream;\n\tprivate final Writer writer;\n\tprivate Object root;\n\tprivate Class<?> rootClass;\n\tprivate final Multimap<Class<?>, String> excludes = LinkedListMultimap.create();\n\tprivate Set<Class<?>> elementTypes;\n\tprivate final TypeNameExtractor extractor;\n\tprivate final ProxyInitializer initializer;\n\n\tpublic XStreamSerializer(XStream xstream, Writer writer, TypeNameExtractor extractor, ProxyInitializer initializer) {\n\t\tthis.xstream = xstream;\n\t\tthis.writer = writer;\n\t\tthis.extractor = extractor;\n\t\tthis.initializer = initializer;\n\t}\n\n\tprivate boolean isPrimitive(Class<?> type) {\n\t\treturn type.isPrimitive()\n\t\t\t|| type.isEnum()\n\t\t\t|| Number.class.isAssignableFrom(type)\n\t\t\t|| type.equals(String.class)\n\t\t\t|| Date.class.isAssignableFrom(type)\n\t\t\t|| Calendar.class.isAssignableFrom(type)\n\t\t\t|| Boolean.class.equals(type)\n\t\t\t|| Character.class.equals(type);\n\t}\n\n\tpublic Serializer exclude(String... names) {\n\t\tfor (String name : names) {\n\t\t\tSet<Class<?>> parentTypes = getParentTypesFor(name);\n\t\t\tfor (Class<?> type : parentTypes) {\n\t\t\t\txstream.omitField(type, getNameFor(name));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate String getNameFor(String name) {\n\t\tString[] path = name.split(\"\\\\.\");\n\t\treturn path[path.length-1];\n\t}\n\n\tprivate Set<Class<?>> getParentTypesFor(String name) {\n\t\tif (elementTypes == null) {\n\t\t\tClass<?> type = rootClass;\n\t\t\treturn Collections.<Class<?>>singleton(getParentType(name, type));\n\t\t} else {\n\t\t\tSet<Class<?>> result = new HashSet<Class<?>>();\n\t\t\tfor (Class<?> type : elementTypes) {\n\t\t\t\tresult.add(getParentType(name, type));\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tprivate Class<?> getParentType(String name, Class<?> type) {\n\t\tString[] path = name.split(\"\\\\.\");\n\t\tfor (int i = 0; i < path.length - 1; i++) {\n\t\t\ttype = getActualType(new Mirror().on(type).reflect().field(path[i]).getGenericType());\n\t\t}\n\t\treturn type;\n\t}\n\n\tprivate void preConfigure(Object obj,String alias) {\n\t\tcheckNotNull(obj, \"You can't serialize null objects\");\n\n\t\txstream.processAnnotations(obj.getClass());\n\n\t\trootClass = initializer.getActualClass(obj);\n\t\tif (alias == null && initializer.isProxy(obj.getClass())) {\n\t\t\talias = extractor.nameFor(rootClass);\n\t\t}\n\n\t\tsetRoot(obj);\n\n\t\tsetAlias(obj, alias);\n\t}\n\n\tprivate void setRoot(Object obj) {\n\t\tif (Collection.class.isInstance(obj)) {\n\t\t\tthis.root = normalizeList(obj);\n\t\t} else {\n\t\t\tClass<?> type = rootClass;\n\t\t\texcludeNonPrimitiveFields(type);\n\t\t\tthis.root = obj;\n\t\t}\n\t}\n\n\tprivate Collection<Object> normalizeList(Object obj) {\n\t\tCollection<Object> list;\n\t\tif (hasDefaultConverter()) {\n\t\t\tlist = new ArrayList<Object>((Collection<?>)obj);\n\t\t} else {\n\t\t\tlist = (Collection<Object>) obj;\n\t\t}\n\t\telementTypes = findElementTypes(list);\n\t\tfor (Class<?> type : elementTypes) {\n\t\t\texcludeNonPrimitiveFields(type);\n\t\t}\n\t\treturn list;\n\t}\n\n\tprivate boolean hasDefaultConverter() {\n\t\treturn xstream.getConverterLookup().lookupConverterForType(rootClass).equals(xstream.getConverterLookup().lookupConverterForType(Object.class));\n\t}\n\n\tprivate void setAlias(Object obj, String alias) {\n\t\tif (alias != null) {\n\t\t\tif (Collection.class.isInstance(obj) && (List.class.isInstance(obj) || hasDefaultConverter())) {\n\t\t\t\txstream.alias(alias, List.class);\n\t\t\t}\n\t\t\txstream.alias(alias, obj.getClass());\n\t\t}\n\t}\n\n\tpublic <T> Serializer from(T object, String alias) {\n\t\tpreConfigure(object, alias);\n\t\treturn this;\n\t}\n\n\tpublic <T> Serializer from(T object) {\n\t\tpreConfigure(object, null);\n\t\treturn this;\n\t}\n\n\tprivate Set<Class<?>> findElementTypes(Collection<Object> list) {\n\t\tSet<Class<?>> set = new HashSet<Class<?>>();\n\t\tfor (Object element : list) {\n\t\t\tif (element != null && !isPrimitive(element.getClass())) {\n\t\t\t\tset.add(initializer.getActualClass(element));\n\t\t\t}\n\t\t}\n\t\treturn set;\n\t}\n\n\tprivate void excludeNonPrimitiveFields(Class<?> type) {\n\t\tfor (Field field : new Mirror().on(type).reflectAll().fields()) {\n\t\t\tif (!isPrimitive(field.getType())) {\n\t\t\t\texcludes.put(type, field.getName());\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic Serializer include(String... fields) {\n\t\tfor (String field : fields) {\n\t\t\ttry {\n\t\t\t\tSet<Class<?>> parentTypes = getParentTypesFor(field);\n\t\t\t\tString fieldName = getNameFor(field);\n\t\t\t\tfor (Class<?> parentType : parentTypes) {\n\t\t\t\t\tType genericType = new Mirror().on(parentType).reflect().field(fieldName).getGenericType();\n\t\t\t\t\tClass<?> fieldType = getActualType(genericType);\n\n\t\t\t\t\tif (!excludes.containsKey(fieldType)) {\n\t\t\t\t\t\texcludeNonPrimitiveFields(fieldType);\n\t\t\t\t\t}\n\t\t\t\t\texcludes.remove(parentType, fieldName);\n\t\t\t\t}\n\t\t\t} catch (NullPointerException e) {\n\t\t\t\tthrow new IllegalArgumentException(\"Field path \" + field + \" doesn't exist\");\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate Class<?> getActualType(Type genericType) {\n\t\tif (genericType instanceof ParameterizedType) {\n\t\t\tParameterizedType type = (ParameterizedType) genericType;\n\n\t\t\tif (isCollection(type)) {\n\t\t\t\tType actualType = type.getActualTypeArguments()[0];\n\n\t\t\t\tif (actualType instanceof TypeVariable<?>) {\n\t\t\t\t\treturn (Class<?>) type.getRawType();\n\t\t\t\t}\n\n\t\t\t\treturn (Class<?>) actualType;\n\t\t\t}\n\t\t}\n\n\t\treturn (Class<?>) genericType;\n\t}\n\n\tprivate boolean isCollection(Type type) {\n\t\tif (type instanceof ParameterizedType) {\n\t\t\tParameterizedType ptype = (ParameterizedType) type;\n\t\t\treturn Collection.class.isAssignableFrom((Class<?>) ptype.getRawType())\n\t\t\t  || Map.class.isAssignableFrom((Class<?>) ptype.getRawType());\n\t\t}\n\t\treturn Collection.class.isAssignableFrom((Class<?>) type);\n\t}\n\n\tpublic void serialize() {\n\t\tfor (Entry<Class<?>, String> exclude : excludes.entries()) {\n\t\t\txstream.omitField(exclude.getKey(), exclude.getValue());\n\t\t}\n\t\tregisterProxyInitializer();\n\t\txstream.toXML(root, writer);\n\t}\n\n\tpublic Serializer recursive() {\n\t\texcludes.clear();\n\t\treturn this;\n\t}\n\n\tprivate void registerProxyInitializer() {\n\t\txstream.registerConverter(new Converter() {\n\n\t\t\tpublic boolean canConvert(Class clazz) {\n\t\t\t\treturn initializer.isProxy(clazz);\n\t\t\t}\n\n\t\t\tpublic Object unmarshal(HierarchicalStreamReader reader,\n\t\t\t\t\tUnmarshallingContext context) {\n\t\t\t\tthrow new AssertionError();\n\t\t\t}\n\n\t\t\tpublic void marshal(Object value, HierarchicalStreamWriter writer,\n\t\t\t\t\tMarshallingContext context) {\n\t\t\t\tConverter converter = xstream.getConverterLookup().lookupConverterForType(initializer.getActualClass(value));\n\t\t\t\tinitializer.initialize(value);\n\t\t\t\tconverter.marshal(value, writer, context);\n\t\t\t}\n\t\t});\n\t}\n}\n","lineNo":227}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.ognl;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport ognl.Ognl;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport ognl.OgnlRuntime;\nimport ognl.TypeConverter;\n\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport org.jmock.Expectations;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.converter.StringConverter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class ReflectionBasedNullHandlerTest {\n\n\tprivate ReflectionBasedNullHandler handler;\n\tprivate OgnlContext context;\n\tprivate VRaptorMockery mockery;\n\tprivate Container container;\n\tprivate EmptyElementsRemoval removal;\n\tprivate Converters converters;\n\n\t@Before\n\tpublic void setup() {\n\t\tthis.context = (OgnlContext) Ognl.createDefaultContext(null);\n\t\tcontext.setTraceEvaluations(true);\n\t\tthis.mockery = new VRaptorMockery(true);\n\t\tthis.container = mockery.mock(Container.class);\n\t\tthis.removal = mockery.mock(EmptyElementsRemoval.class);\n\t\tcontext.put(\"removal\", removal);\n\t\tthis.handler = new ReflectionBasedNullHandler();\n\t\tthis.converters = mockery.mock(Converters.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(container).instanceFor(Converters.class); will(returnValue(converters));\n\t\t\t\tallowing(converters).to(String.class); will(returnValue(new StringConverter()));\n\t\t\t}\n\t\t});\n\t\tOgnlRuntime.setPropertyAccessor(List.class, new ListAccessor(converters));\n\t\tOgnlRuntime.setPropertyAccessor(Object[].class, new ArrayAccessor());\n\t}\n\n\t@Test\n\tpublic void shouldInstantiateAnObjectIfRequiredToSetAProperty() throws OgnlException {\n\t\tOgnlRuntime.setNullHandler(House.class, handler);\n\t\tHouse house = new House();\n\t\tOgnl.setValue(\"mouse.name\", context, house, \"James\");\n\t\tMatcherAssert.assertThat(house.getMouse().getName(), Matchers.is(Matchers.equalTo(\"James\")));\n\t}\n\n\t@Test\n\tpublic void shouldInstantiateAListOfStrings() throws OgnlException {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(removal).add((Collection<?>)with(an(Collection.class)));\n\t\t\t}\n\t\t});\n\t\tOgnlRuntime.setNullHandler(House.class, handler);\n\t\tOgnlRuntime.setNullHandler(Mouse.class, handler);\n\t\tHouse house = new House();\n\t\tOgnl.setValue(\"mouse.eyeColors[0]\", context, house, \"Blue\");\n\t\tOgnl.setValue(\"mouse.eyeColors[1]\", context, house, \"Green\");\n\t\tMatcherAssert.assertThat(house.getMouse().getEyeColors().get(0), Matchers.is(Matchers.equalTo(\"Blue\")));\n\t\tMatcherAssert.assertThat(house.getMouse().getEyeColors().get(1), Matchers.is(Matchers.equalTo(\"Green\")));\n\t}\n\n\tpublic static class House {\n\t\tprivate Mouse mouse;\n\n\t\tpublic void setMouse(Mouse cat) {\n\t\t\tthis.mouse = cat;\n\t\t}\n\n\t\tpublic Mouse getMouse() {\n\t\t\treturn mouse;\n\t\t}\n\n\t}\n\n\t@Test\n\tpublic void shouldNotInstantiateIfLastTerm() throws OgnlException, NoSuchMethodException {\n\t\tOgnlRuntime.setNullHandler(House.class, handler);\n\t\tfinal TypeConverter typeConverter = mockery.mock(TypeConverter.class);\n\t\tfinal House house = new House();\n\t\tfinal Mouse tom = new Mouse();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(typeConverter).convertValue(context, house, House.class.getDeclaredMethod(\"setMouse\", Mouse.class),\n\t\t\t\t\t\t\"mouse\", \"22\", Mouse.class);\n\t\t\t\twill(returnValue(tom));\n\t\t\t}\n\t\t});\n\t\tOgnl.setTypeConverter(context, typeConverter);\n\t\tOgnl.setValue(\"mouse\", context, house, \"22\");\n\t\tMatcherAssert.assertThat(house.getMouse(), Matchers.is(Matchers.equalTo(tom)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.ognl;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\nimport static org.mockito.Matchers.anyCollection;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\n\nimport ognl.Ognl;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport ognl.TypeConverter;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.converter.LongConverter;\nimport br.com.caelum.vraptor.converter.StringConverter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.ioc.Container;\n\npublic class ReflectionBasedNullHandlerTest {\n\n\tprivate OgnlContext context;\n\tprivate @Mock Container container;\n\tprivate @Mock EmptyElementsRemoval removal;\n\tprivate @Mock Converters converters;\n\n\t@Before\n\tpublic void setup() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\n\t\tAbstractOgnlTestSupport.configOgnl(converters);\n\n\t\tthis.context = (OgnlContext) Ognl.createDefaultContext(null);\n\t\tcontext.setTraceEvaluations(true);\n\t\tcontext.put(\"removal\", removal);\n\t\twhen(container.instanceFor(Converters.class)).thenReturn(converters);\n\t\twhen(converters.to(String.class)).thenReturn((Converter) new StringConverter());\n\t\twhen(converters.to(Long.class)).thenReturn((Converter) new LongConverter());\n\t}\n\n\t@Test\n\tpublic void shouldInstantiateAnObjectIfRequiredToSetAProperty() throws OgnlException {\n\t\tHouse house = new House();\n\t\tOgnl.setValue(\"mouse.name\", context, house, \"James\");\n\t\tassertThat(house.getMouse().getName(), is(equalTo(\"James\")));\n\t}\n\n\t@Test\n\tpublic void shouldInstantiateAListOfStrings() throws OgnlException {\n\t\tHouse house = new House();\n\t\tOgnl.setValue(\"mouse.eyeColors[0]\", context, house, \"Blue\");\n\t\tOgnl.setValue(\"mouse.eyeColors[1]\", context, house, \"Green\");\n\t\tverify(removal).add(anyCollection());\n\t\tassertThat(house.getMouse().getEyeColors().get(0), is(equalTo(\"Blue\")));\n\t\tassertThat(house.getMouse().getEyeColors().get(1), is(equalTo(\"Green\")));\n\t}\n\n\tpublic static class House {\n\t\tprivate Mouse mouse;\n\n\t\tpublic void setMouse(Mouse cat) {\n\t\t\tthis.mouse = cat;\n\t\t}\n\n\t\tpublic Mouse getMouse() {\n\t\t\treturn mouse;\n\t\t}\n\n\t}\n\n\t@Test\n\tpublic void shouldNotInstantiateIfLastTerm() throws OgnlException, NoSuchMethodException {\n\t\tfinal TypeConverter typeConverter = mock(TypeConverter.class);\n\t\tfinal House house = new House();\n\t\tfinal Mouse tom = new Mouse();\n\t\tMethod method = House.class.getDeclaredMethod(\"setMouse\", Mouse.class);\n\t\twhen(typeConverter.convertValue(context, house, method,\t\"mouse\", \"22\", Mouse.class)).thenReturn(tom);\n\n\t\tOgnl.setTypeConverter(context, typeConverter);\n\t\tOgnl.setValue(\"mouse\", context, house, \"22\");\n\t\tassertThat(house.getMouse(), is(equalTo(tom)));\n\t}\n\n}\n","lineNo":102}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.text.MessageFormat;\nimport java.util.Locale;\nimport java.util.MissingResourceException;\nimport java.util.PropertyResourceBundle;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.jsp.jstl.core.Config;\nimport javax.servlet.jsp.jstl.fmt.LocalizationContext;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ioc.RequestScoped;\n\n/**\n * The default implementation of bundle provider uses jstl's api to access user\n * information on the bundle to be used.\n *\n * @author Guilherme Silveira\n */\n@RequestScoped\npublic class JstlLocalization implements Localization {\n\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(JstlLocalization.class);\n\n    private static final String DEFAULT_BUNDLE_NAME = \"messages\";\n\n    private final RequestInfo request;\n\n    private ResourceBundle bundle;\n\n    public JstlLocalization(RequestInfo request) {\n        this.request = request;\n    }\n\n    public ResourceBundle getBundle() {\n        if (this.bundle == null) {\n            Locale locale = getLocale();\n            Object bundle = get(Config.FMT_LOCALIZATION_CONTEXT);\n            if (bundle instanceof String || bundle == null) {\n\t\t\t\tString baseName = (String) bundle;\n\t            if (baseName == null) {\n\t                baseName = DEFAULT_BUNDLE_NAME;\n\t            }\n\t            try {\n\t\t\t\t\tthis.bundle = new SafeResourceBundle(ResourceBundle.getBundle(baseName, locale));\n\t\t\t\t} catch (MissingResourceException e) {\n\t\t\t\t\tlogger.debug(\"couldn't find message bundle, creating an empty one\");\n\t\t\t\t\tthis.bundle = new SafeResourceBundle(createEmptyBundle());\n\t\t\t\t}\n            } else if (bundle instanceof LocalizationContext) {\n            \tLocalizationContext context = (LocalizationContext) bundle;\n            \tthis.bundle = context.getResourceBundle();\n            } else {\n            \tlogger.warn(\"Can't handle bundle: \" + bundle + \". Please report this bug. Using an empty bundle\");\n            \tthis.bundle = new SafeResourceBundle(createEmptyBundle());\n            }\n        }\n        return this.bundle;\n    }\n    \n\n\n\tprivate ResourceBundle createEmptyBundle() {\n\t\ttry {\n\t\t\treturn new PropertyResourceBundle(new ByteArrayInputStream(new byte[0]));\n\t\t} catch (IOException e) {\n\t\t\tlogger.warn(\"It shouldn't happen. Please report this bug\", e);\n\t\t\treturn null;\n\t\t}\n\t}\n\n    public Locale getLocale() {\n        return localeFor(Config.FMT_LOCALE);\n    }\n\n    public Locale getFallbackLocale() {\n        return localeFor(Config.FMT_FALLBACK_LOCALE);\n    }\n\n    private Locale localeFor(String key) {\n        Object localeValue = get(key);\n        if (localeValue instanceof String) {\n            return stringToLocale((String) localeValue);\n        }\n        if (localeValue != null) {\n            return (Locale) localeValue;\n        }\n        return request.getRequest().getLocale();\n    }\n\n    /**\n     * Extracted from XStream project, copyright Joe Walnes\n     */\n    private Locale stringToLocale(String str) {\n        int[] underscorePositions = underscorePositions(str);\n        if (underscorePositions[0] == -1) {\n            return new Locale(str);\n        }\n        String language = str.substring(0, underscorePositions[0]);\n        if (underscorePositions[1] == -1) {\n            return new Locale(language, str.substring(underscorePositions[0] + 1));\n        }\n        return new Locale(language, str.substring(underscorePositions[0] + 1, underscorePositions[1]), str\n                .substring(underscorePositions[1] + 1));\n    }\n\n    private int[] underscorePositions(String str) {\n        int[] result = new int[2];\n        for (int i = 0; i < result.length; i++) {\n            int last = i == 0 ? 0 : result[i - 1];\n            result[i] = str.indexOf('_', last + 1);\n        }\n        return result;\n    }\n\n    private Object get(String key) {\n        Object value = Config.get(request.getRequest(), key);\n        if (value != null) {\n            return value;\n        }\n        value = Config.get(request.getRequest().getSession(), key);\n        if (value != null) {\n            return value;\n        }\n        value = Config.get(request.getServletContext(), key);\n        if (value != null) {\n            return value;\n        }\n        return request.getServletContext().getInitParameter(key);\n    }\n\n    public String getMessage(String key, String... parameters) {\n        try {\n            String content = getBundle().getString(key);\n            return MessageFormat.format(content, (Object[]) parameters);\n        } catch (MissingResourceException e) {\n            return \"???\" + key + \"???\";\n        }\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport java.text.MessageFormat;\nimport java.util.ListResourceBundle;\nimport java.util.Locale;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.jsp.jstl.core.Config;\nimport javax.servlet.jsp.jstl.fmt.LocalizationContext;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ioc.RequestScoped;\n\nimport com.google.common.base.Strings;\n\n/**\n * The default implementation of bundle provider uses JSTL's api to access user information on the bundle to be used.\n * \n * @author Guilherme Silveira\n * @author Otávio Scherer Garcia\n */\n@RequestScoped\npublic class JstlLocalization\n    implements Localization {\n\n    private static final Logger logger = LoggerFactory.getLogger(JstlLocalization.class);\n\n    private static final String DEFAULT_BUNDLE_NAME = \"messages\";\n\n    private final RequestInfo request;\n    private ResourceBundle bundle;\n\n    public JstlLocalization(RequestInfo request) {\n        this.request = request;\n    }\n\n    public ResourceBundle getBundle() {\n        if (bundle == null) {\n            initializeBundle();\n        }\n\n        return bundle;\n    }\n\n    /**\n     * Find the bundle. If the bundle is not found, return an empty for safety operations (avoid\n     * {@link MissingResourceException}.\n     */\n    private void initializeBundle() {\n        Object bundle = findByKey(Config.FMT_LOCALIZATION_CONTEXT);\n        ResourceBundle unsafe = null;\n\n        if (bundle instanceof String || bundle == null) {\n            String baseName = (bundle == null) ? DEFAULT_BUNDLE_NAME : bundle.toString();\n\n            try {\n                Locale locale = getLocale();\n                unsafe = ResourceBundle.getBundle(baseName, locale);\n            } catch (MissingResourceException e) {\n                logger.debug(\"couldn't find message bundle, creating an empty one\");\n                this.bundle = new SafeResourceBundle(createEmptyBundle());\n            }\n\n        } else if (bundle instanceof LocalizationContext) {\n            unsafe = ((LocalizationContext) bundle).getResourceBundle();\n\n        } else {\n            logger.warn(\"Can't handle bundle {}. Please report this bug. Using an empty bundle\", bundle);\n            unsafe = createEmptyBundle();\n        }\n\n        this.bundle = new SafeResourceBundle(unsafe);\n    }\n\n    /**\n     * Create a empty bundle.\n     * \n     * @return\n     */\n    private ResourceBundle createEmptyBundle() {\n        return new ListResourceBundle() {\n            protected Object[][] getContents() {\n                return new Object[0][0];\n            }\n        };\n    }\n\n    public Locale getLocale() {\n        return localeFor(Config.FMT_LOCALE);\n    }\n\n    public Locale getFallbackLocale() {\n        return localeFor(Config.FMT_FALLBACK_LOCALE);\n    }\n\n    private Locale localeFor(String key) {\n        Object localeValue = findByKey(key);\n\n        if (localeValue instanceof String) {\n            return findLocalefromString((String) localeValue);\n        } else if (localeValue instanceof Locale) {\n            return (Locale) localeValue;\n        }\n\n        return request.getRequest().getLocale();\n    }\n\n    /**\n     * Looks up a configuration variable in the request, session and application scopes. If none is found, return by\n     * {@link ServletContext#getInitParameter(String)} method.\n     * \n     * @param key\n     * @return\n     */\n    private Object findByKey(String key) {\n        Object value = Config.get(request.getRequest(), key);\n        if (value != null) {\n            return value;\n        }\n\n        value = Config.get(request.getRequest().getSession(), key);\n        if (value != null) {\n            return value;\n        }\n\n        value = Config.get(request.getServletContext(), key);\n        if (value != null) {\n            return value;\n        }\n\n        return request.getServletContext().getInitParameter(key);\n    }\n\n    public String getMessage(String key, Object... parameters) {\n        try {\n            String content = getBundle().getString(key);\n            return MessageFormat.format(content, parameters);\n        } catch (MissingResourceException e) {\n            return \"???\" + key + \"???\";\n        }\n    }\n\n    /**\n     * Converts a locale string to {@link Locale}. If the input string is null or empty, return an empty {@link Locale}.\n     * \n     * @param str\n     * @return\n     */\n    private Locale findLocalefromString(String str) {\n        if (!Strings.isNullOrEmpty(str)) {\n            String[] arr = str.split(\"_\");\n            if (arr.length == 1) {\n                return new Locale(arr[0]);\n            } else if (arr.length == 2) {\n                return new Locale(arr[0], arr[1]);\n\n            } else {\n                return new Locale(arr[0], arr[1], arr[2]);\n            }\n        }\n\n        return null;\n    }\n}\n","lineNo":71}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.ognl;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport ognl.Ognl;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport ognl.OgnlRuntime;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.converter.IntegerConverter;\nimport br.com.caelum.vraptor.converter.LocaleBasedCalendarConverter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\n\n/**\n * Unfortunately OGNL sucks so bad in its design that we had to create a \"unit\"\n * test which accesses more than a single class to test the ognl funcionality.\n * Even worse, OGNL sucks with its static configuration methods in such a way\n * that tests are not thread safe. Summing up: OGNL api sucks, OGNL idea rulez.\n * Tests written here are \"acceptance tests\" for the Ognl support on http\n * parameters.\n *\n * @author Guilherme Silveira\n */\npublic class MiscOgnlSupportTest {\n\n    private Mockery mockery;\n    private Converters converters;\n    private OgnlContext context;\n    private House house;\n    private ResourceBundle bundle;\n\n    @Before\n    public void setup() {\n        this.mockery = new Mockery();\n        this.converters = mockery.mock(Converters.class);\n        this.house = new House();\n        OgnlRuntime.setNullHandler(Object.class, new ReflectionBasedNullHandler());\n        OgnlRuntime.setPropertyAccessor(List.class, new ListAccessor());\n        OgnlRuntime.setPropertyAccessor(Object[].class, new ArrayAccessor());\n        this.context = (OgnlContext) Ognl.createDefaultContext(house);\n        context.setTraceEvaluations(true);\n        // OgnlRuntime.setPropertyAccessor(Set.class, new SetAccessor());\n        // OgnlRuntime.setPropertyAccessor(Map.class, new MapAccessor());\n        this.bundle = ResourceBundle.getBundle(\"messages\");\n        Ognl.setTypeConverter(context, new VRaptorConvertersAdapter(converters, bundle));\n    }\n\n    public static class Cat {\n        private Leg firstLeg;\n\n        public void setFirstLeg(Leg firstLeg) {\n            this.firstLeg = firstLeg;\n        }\n\n        public Leg getFirstLeg() {\n            return firstLeg;\n        }\n    }\n\n    public static class Leg {\n        private Integer id;\n        private Calendar birthDay; // weird leg birthday!!\n\n        public void setId(Integer id) {\n            this.id = id;\n        }\n\n        public Integer getId() {\n            return id;\n        }\n\n        public void setBirthDay(Calendar birthDay) {\n            this.birthDay = birthDay;\n        }\n\n        public Calendar getBirthDay() {\n            return birthDay;\n        }\n    }\n\n    public static class House {\n        private Cat cat;\n\n        public void setCat(Cat cat) {\n            this.cat = cat;\n        }\n\n        public Cat getCat() {\n            return cat;\n        }\n\n    }\n\n    @Test\n    public void isCapableOfDealingWithEmptyParameterForInternalWrapperValue() throws OgnlException {\n        mockery.checking(new Expectations() {{\n            one(converters).to(Integer.class);\n            will(returnValue(new IntegerConverter()));\n        }});\n        Ognl.setValue(\"cat.firstLeg.id\", context, house, \"\");\n        assertThat(house.cat.firstLeg.id, is(equalTo(null)));\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void isCapableOfDealingWithEmptyParameterForInternalValueWhichNeedsAConverter() throws OgnlException {\n        final MutableRequest request = mockery.mock(MutableRequest.class);\n        final RequestInfo webRequest = new RequestInfo(null, null, request, null);\n        mockery.checking(new Expectations() {{\n            exactly(2).of(request).getAttribute(\"javax.servlet.jsp.jstl.fmt.locale.request\");\n            will(returnValue(\"pt_br\"));\n            one(converters).to(Calendar.class);\n            will(returnValue(new LocaleBasedCalendarConverter(webRequest)));\n        }});\n        Ognl.setValue(\"cat.firstLeg.birthDay\", context, house, \"10/5/2010\");\n        assertThat(house.cat.firstLeg.birthDay, is(equalTo((Calendar) new GregorianCalendar(2010, 4, 10))));\n        mockery.assertIsSatisfied();\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.ognl;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport ognl.Ognl;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport ognl.OgnlRuntime;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.converter.IntegerConverter;\nimport br.com.caelum.vraptor.converter.LocaleBasedCalendarConverter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.JstlLocalization;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\n\n/**\n * Unfortunately OGNL sucks so bad in its design that we had to create a \"unit\"\n * test which accesses more than a single class to test the ognl funcionality.\n * Even worse, OGNL sucks with its static configuration methods in such a way\n * that tests are not thread safe. Summing up: OGNL api sucks, OGNL idea rulez.\n * Tests written here are \"acceptance tests\" for the Ognl support on http\n * parameters.\n *\n * @author Guilherme Silveira\n */\npublic class MiscOgnlSupportTest {\n\n    private Mockery mockery;\n    private Converters converters;\n    private OgnlContext context;\n    private House house;\n    private ResourceBundle bundle;\n\n    @Before\n    public void setup() {\n        this.mockery = new Mockery();\n        this.converters = mockery.mock(Converters.class);\n        this.house = new House();\n        OgnlRuntime.setNullHandler(Object.class, new ReflectionBasedNullHandler());\n        OgnlRuntime.setPropertyAccessor(List.class, new ListAccessor());\n        OgnlRuntime.setPropertyAccessor(Object[].class, new ArrayAccessor());\n        this.context = (OgnlContext) Ognl.createDefaultContext(house);\n        context.setTraceEvaluations(true);\n        // OgnlRuntime.setPropertyAccessor(Set.class, new SetAccessor());\n        // OgnlRuntime.setPropertyAccessor(Map.class, new MapAccessor());\n        this.bundle = ResourceBundle.getBundle(\"messages\");\n        Ognl.setTypeConverter(context, new VRaptorConvertersAdapter(converters, bundle));\n    }\n\n    public static class Cat {\n        private Leg firstLeg;\n\n        public void setFirstLeg(Leg firstLeg) {\n            this.firstLeg = firstLeg;\n        }\n\n        public Leg getFirstLeg() {\n            return firstLeg;\n        }\n    }\n\n    public static class Leg {\n        private Integer id;\n        private Calendar birthDay; // weird leg birthday!!\n\n        public void setId(Integer id) {\n            this.id = id;\n        }\n\n        public Integer getId() {\n            return id;\n        }\n\n        public void setBirthDay(Calendar birthDay) {\n            this.birthDay = birthDay;\n        }\n\n        public Calendar getBirthDay() {\n            return birthDay;\n        }\n    }\n\n    public static class House {\n        private Cat cat;\n\n        public void setCat(Cat cat) {\n            this.cat = cat;\n        }\n\n        public Cat getCat() {\n            return cat;\n        }\n\n    }\n\n    @Test\n    public void isCapableOfDealingWithEmptyParameterForInternalWrapperValue() throws OgnlException {\n        mockery.checking(new Expectations() {{\n            one(converters).to(Integer.class);\n            will(returnValue(new IntegerConverter()));\n        }});\n        Ognl.setValue(\"cat.firstLeg.id\", context, house, \"\");\n        assertThat(house.cat.firstLeg.id, is(equalTo(null)));\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void isCapableOfDealingWithEmptyParameterForInternalValueWhichNeedsAConverter() throws OgnlException {\n        final MutableRequest request = mockery.mock(MutableRequest.class);\n        final RequestInfo webRequest = new RequestInfo(null, null, request, null);\n        final JstlLocalization jstlLocalization = new JstlLocalization(webRequest);\n        \n        mockery.checking(new Expectations() {{\n            exactly(1).of(request).getAttribute(\"javax.servlet.jsp.jstl.fmt.locale.request\");\n            will(returnValue(\"pt_br\"));\n            one(converters).to(Calendar.class);\n            will(returnValue(new LocaleBasedCalendarConverter(jstlLocalization)));\n        }});\n        Ognl.setValue(\"cat.firstLeg.birthDay\", context, house, \"10/5/2010\");\n        assertThat(house.cat.firstLeg.birthDay, is(equalTo((Calendar) new GregorianCalendar(2010, 4, 10))));\n        mockery.assertIsSatisfied();\n    }\n\n}\n","lineNo":141}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n * \thttp://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */\npackage br.com.caelum.vraptor.interceptor.multipart;\n\n\nimport java.util.ResourceBundle;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport br.com.caelum.vraptor.Convert;\nimport br.com.caelum.vraptor.Converter;\n\n/**\n * A converter capable of setting UploadedFiles based on files parsed by the\n * multipart interceptor.\n *\n * @author Guilherme Silveira\n */\n@Convert(UploadedFile.class)\npublic class UploadedFileConverter implements Converter<UploadedFile> {\n\n    private final HttpServletRequest request;\n\n    public UploadedFileConverter(HttpServletRequest request) {\n        this.request = request;\n    }\n\n    public UploadedFile convert(String value, Class<? extends UploadedFile> type, ResourceBundle bundle) {\n        return type.cast(request.getAttribute(value));\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.interceptor.multipart;\n\n\nimport java.util.ResourceBundle;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.Convert;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.converter.ConversionError;\n\n/**\n * A converter capable of setting UploadedFiles based on files parsed by the\n * multipart interceptor.\n *\n * @author Guilherme Silveira\n */\n@Convert(UploadedFile.class)\npublic class UploadedFileConverter implements Converter<UploadedFile> {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(UploadedFileConverter.class);\n\n    private final HttpServletRequest request;\n\n    public UploadedFileConverter(HttpServletRequest request) {\n        this.request = request;\n    }\n\n    public UploadedFile convert(String value, Class<? extends UploadedFile> type, ResourceBundle bundle) {\n        Object upload = request.getAttribute(value);\n        if (upload == null) {\n        \tlogger.warn(\"There was an error when uploading the file {}. \" +\n        \t\t\t\"Please verify if commons-fileupload jars are in your classpath or you are using a Servlet 3 Container.\");\n        \tthrow new ConversionError(\"Invalid upload\");\n        }\n\t\treturn type.cast(upload);\n    }\n\n}\n","lineNo":49}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n * \thttp://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */\npackage br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Map;\n\nimport ognl.ArrayPropertyAccessor;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * Deals with acessing values within an array.<br>\n * Re-instantiates and invokes setter methods on arrays as soon as they are not\n * big enough for all required parameters.\n * \n * @author Guilherme Silveira\n */\npublic class ArrayAccessor extends ArrayPropertyAccessor {\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object getProperty(Map context, Object target, Object object) throws OgnlException {\n        try {\n            return super.getProperty(context, target, object);\n        } catch (IndexOutOfBoundsException ex) {\n            return null;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void setProperty(Map context, Object array, Object key, Object value) throws OgnlException {\n\n        int index = (Integer) key;\n        int length = Array.getLength(array);\n        if (length <= index) {\n            array = copyOf(array, index, length);\n            OgnlContext ctx = (OgnlContext) context;\n            String fieldName = ctx.getCurrentEvaluation().getPrevious().getNode().toString();\n            Object origin = ctx.getCurrentEvaluation().getPrevious().getSource();\n            Method setter = ReflectionBasedNullHandler.findMethod(origin.getClass(),\n                    \"set\" + Info.capitalize(fieldName), origin.getClass(), null);\n            Container container = (Container) context.get(Container.class);\n            EmptyElementsRemoval removal = container.instanceFor(EmptyElementsRemoval.class);\n            removal.add(array, setter, origin);\n            try {\n                setter.invoke(origin, array);\n            } catch (IllegalArgumentException e) {\n                // TODO better\n                throw new IllegalArgumentException(e);\n            } catch (IllegalAccessException e) {\n                // TODO better\n                throw new IllegalArgumentException(e);\n            } catch (InvocationTargetException e) {\n                // TODO better\n                throw new IllegalArgumentException(e);\n            }\n        }\n        super.setProperty(context, array, key, value);\n    }\n\n    private Object copyOf(Object array, int desiredLength, int currentLength) {\n        Object newArray = Array.newInstance(array.getClass().getComponentType(), desiredLength + 1);\n        for (int i = 0; i < currentLength; i++) {\n            Array.set(newArray, i, Array.get(array, i));\n        }\n        for (int i = currentLength; i < desiredLength; i++) {\n            Array.set(newArray, i, null);\n        }\n        array = newArray;\n        return array;\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Map;\n\nimport ognl.ArrayPropertyAccessor;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * Deals with acessing values within an array.<br>\n * Re-instantiates and invokes setter methods on arrays as soon as they are not\n * big enough for all required parameters.\n *\n * @author Guilherme Silveira\n */\npublic class ArrayAccessor extends ArrayPropertyAccessor {\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Object getProperty(Map context, Object target, Object object) throws OgnlException {\n        try {\n            return super.getProperty(context, target, object);\n        } catch (IndexOutOfBoundsException ex) {\n            return null;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void setProperty(Map context, Object array, Object key, Object value) throws OgnlException {\n\n        int index = (Integer) key;\n        int length = Array.getLength(array);\n        if (length <= index) {\n            Object newArray = copyOf(array, index, length);\n            OgnlContext ctx = (OgnlContext) context;\n            if (array == ctx.getRoot()) {\n            \tctx.setRoot(newArray);\n            } else {\n\t            String fieldName = ctx.getCurrentEvaluation().getPrevious().getNode().toString();\n\t            Object origin = ctx.getCurrentEvaluation().getPrevious().getSource();\n\t            Method setter = ReflectionBasedNullHandler.findMethod(origin.getClass(),\n\t                    \"set\" + Info.capitalize(fieldName), origin.getClass(), null);\n\t            Container container = (Container) context.get(Container.class);\n\t            EmptyElementsRemoval removal = container.instanceFor(EmptyElementsRemoval.class);\n\t            removal.add(newArray, setter, origin);\n\t            try {\n\t                setter.invoke(origin, newArray);\n\t            } catch (IllegalArgumentException e) {\n\t                // TODO better\n\t                throw new IllegalArgumentException(e);\n\t            } catch (IllegalAccessException e) {\n\t                // TODO better\n\t                throw new IllegalArgumentException(e);\n\t            } catch (InvocationTargetException e) {\n\t                // TODO better\n\t                throw new IllegalArgumentException(e);\n\t            }\n            }\n            array = newArray;\n        }\n        super.setProperty(context, array, key, value);\n    }\n\n    private Object copyOf(Object array, int desiredLength, int currentLength) {\n        Object newArray = Array.newInstance(array.getClass().getComponentType(), desiredLength + 1);\n        for (int i = 0; i < currentLength; i++) {\n            Array.set(newArray, i, Array.get(array, i));\n        }\n        for (int i = currentLength; i < desiredLength; i++) {\n            Array.set(newArray, i, null);\n        }\n        array = newArray;\n        return array;\n    }\n\n}\n","lineNo":56}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.DefaultExceptionMapper;\nimport br.com.caelum.vraptor.core.ExceptionMapper;\nimport br.com.caelum.vraptor.core.ExceptionRecorder;\nimport br.com.caelum.vraptor.core.ExceptionRecorderParameter;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Intercept all requests to handling uncaught exceptions.\n * <p>\n * This class is a part of Exception Handling Feature.\n * <\/p>\n * \n * @author Otávio Scherer Garcia\n * @see ExceptionRecorder\n * @see ExceptionRecorderParameter\n * @see ExceptionMapper\n * @see DefaultExceptionMapper\n * @since 3.2\n */\npublic class ExceptionHandlerInterceptor\n    implements Interceptor {\n\n    private static final Logger logger = LoggerFactory.getLogger(ExceptionHandlerInterceptor.class);\n\n    private final ExceptionMapper exceptions;\n    private final Result result;\n    private final HttpServletRequest request;\n\n    public ExceptionHandlerInterceptor(ExceptionMapper exceptions, Result result, HttpServletRequest request) {\n        this.exceptions = exceptions;\n        this.result = result;\n        this.request = request;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n        throws InterceptionException {\n        try {\n            stack.next(method, resourceInstance);\n        } catch (InterceptionException e) {\n            if (!replay((Exception) e.getCause())) {\n                throw e;\n            }\n        }\n    }\n\n    protected void reportException(Exception e) {\n        // skip wrapped exceptions\n        while (e.getCause() != null && !hasMessage(e)) {\n            e = (Exception) e.getCause();\n        }\n\n        // add error attributes compliance with servlet spec\n        result.include(\"javax.servlet.error.status_code\", 500);\n        result.include(\"javax.servlet.error.exception\", e);\n        result.include(\"javax.servlet.error.exception_type\", e.getClass());\n        result.include(\"javax.servlet.error.message\", e.getMessage());\n        result.include(\"javax.servlet.error.request_uri\", request.getRequestURI());\n    }\n\n    protected boolean replay(Exception e) {\n        ExceptionRecorder<Result> exresult = exceptions.findByException(e);\n\n        // found result?\n        if (exresult != null) {\n            reportException(e);\n\n            logger.debug(\"handling exception {}\", e.getClass());\n            exresult.replay(result);\n\n            return true;\n        }\n\n        // if not, try to execute with cause (if cause is an exception, not throwable)\n        if (e.getCause() != null && e.getCause() instanceof Exception) {\n            return replay((Exception) e.getCause());\n        }\n\n        return false;\n    }\n\n    // when update to guava, we don't need this method\n    private boolean hasMessage(Exception e) {\n        return e.getMessage() != null && e.getMessage().length() > 0;\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.DefaultExceptionMapper;\nimport br.com.caelum.vraptor.core.ExceptionMapper;\nimport br.com.caelum.vraptor.core.ExceptionRecorder;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\nimport com.google.common.base.Throwables;\n\n/**\n * Intercept all requests to handling uncaught exceptions.\n * <p>\n * This class is a part of Exception Handling Feature.\n * <\/p>\n *\n * @author Otávio Scherer Garcia\n * @see ExceptionRecorder\n * @see ExceptionRecorderParameter\n * @see ExceptionMapper\n * @see DefaultExceptionMapper\n * @since 3.2\n */\npublic class ExceptionHandlerInterceptor\n    implements Interceptor {\n\n    private static final Logger logger = LoggerFactory.getLogger(ExceptionHandlerInterceptor.class);\n\n    private final ExceptionMapper exceptions;\n    private final Result result;\n    private final HttpServletRequest request;\n\n    public ExceptionHandlerInterceptor(ExceptionMapper exceptions, Result result, HttpServletRequest request) {\n        this.exceptions = exceptions;\n        this.result = result;\n        this.request = request;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n        throws InterceptionException {\n        try {\n            stack.next(method, resourceInstance);\n        } catch (InterceptionException e) {\n            if (!(e.getCause() instanceof Exception) || !replay((Exception) e.getCause())) {\n                throw e;\n            }\n        }\n    }\n\n    protected void reportException(Exception e) {\n    \tThrowable rootCause = Throwables.getRootCause(e);\n\n        // add error attributes compliance with servlet spec\n        result.include(\"javax.servlet.error.status_code\", 500);\n        result.include(\"javax.servlet.error.exception\", rootCause);\n        result.include(\"javax.servlet.error.exception_type\", rootCause.getClass());\n        result.include(\"javax.servlet.error.message\", rootCause.getMessage());\n        result.include(\"javax.servlet.error.request_uri\", request.getRequestURI());\n    }\n\n    protected boolean replay(Exception e) {\n        ExceptionRecorder<Result> exresult = exceptions.findByException(e);\n\n        if (exresult == null) {\n\t\t\treturn false;\n\t\t}\n\n        reportException(e);\n\n        logger.debug(\"handling exception {}\", e.getClass());\n        exresult.replay(result);\n\n        return true;\n    }\n\n}\n","lineNo":78}
{}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.scan;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.scannotation.AnnotationDB;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.ioc.Stereotype;\n\n/**\n * A Scannotation based Component Scanner\n *\n * @author Sérgio Lopes\n * @since 3.2\n */\npublic class ScannotationComponentScanner implements ComponentScanner {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(ScannotationComponentScanner.class);\n\n\tpublic Collection<String> scan(ClasspathResolver resolver) {\n\t\tfinal URL webInfClasses = resolver.findWebInfClassesLocation();\n\t\tfinal List<String> basePackages = resolver.findBasePackages();\n\n\t\tHashSet<String> results = new HashSet<String>();\n\n\t\tMap<String, Set<String>> webInfClassesAnnotationMap = scanWebInfClasses(webInfClasses);\n\t\tMap<String, Set<String>> basePackagesAnnotationMap = scanBasePackages(basePackages);\n\n\t\tSet<String> stereotypeNames = findStereotypes(webInfClassesAnnotationMap, basePackagesAnnotationMap, basePackages);\n\n\t\tfindComponentsFromWebInfClasses(webInfClassesAnnotationMap, stereotypeNames, results);\n\t\tfindComponentsFromBasePackages(basePackagesAnnotationMap, basePackages, results);\n\n\t\treturn results;\n\t}\n\n\tprivate Map<String, Set<String>> scanWebInfClasses(URL webInfClasses) {\n\t\ttry {\n\t\t\tAnnotationDB db = createAnnotationDB();\n\t\t\tdb.scanArchives(webInfClasses);\n\t\t\treturn db.getAnnotationIndex();\n\t\t} catch (IOException e) {\n\t\t\tthrow new ScannerException(\"Could not scan WEB-INF/classes\", e);\n\t\t}\n\t}\n\n\tprivate Map<String, Set<String>> scanBasePackages(List<String> basePackages) {\n\t\ttry {\n\t\t\tAnnotationDB db = createAnnotationDB();\n\n\t\t\tfor (String basePackage : basePackages) {\n\t\t\t\tString resource = basePackage.replace('.', '/');\n\t\t\t\tEnumeration<URL> urls = Thread.currentThread().getContextClassLoader().getResources(resource);\n\t\t\t\tif (!urls.hasMoreElements()) {\n\t\t\t\t\tlogger.error(\"There's no occurence of package {} in classpath\", basePackage);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tdo {\n\t\t\t\t\tURL url = urls.nextElement();\n\n\t\t\t\t\tString file = url.getFile();\n\t\t\t\t\tfile = file.substring(0, file.length() - resource.length() - 1);\n\t\t\t\t\tif (file.charAt(file.length() - 1) == '!') {\n\t\t\t\t\t\tfile = file.substring(0, file.length() - 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (!file.startsWith(\"file:\")) {\n\t\t\t\t\t\tfile = \"file:\" + file;\n\t\t\t\t\t}\n\n\t\t\t\t\tdb.scanArchives(new URL(file));\n\t\t\t\t} while (urls.hasMoreElements());\n\t\t\t}\n\n\t\t\treturn db.getAnnotationIndex();\n\t\t} catch (IOException e) {\n\t\t\tthrow new ScannerException(\"Could not scan base packages\", e);\n\t\t}\n\t}\n\n\tprivate Set<String> findStereotypes(Map<String, Set<String>> webInfClassesAnnotationMap, Map<String, Set<String>> basePackagesAnnotationMap, List<String> basePackages) {\n\t\tHashSet<String> results = new HashSet<String>();\n\n\t\t// add VRaptor's default\n\t\tfor (Class<? extends Annotation> stereotype : BaseComponents.getStereotypes()) {\n\t\t\tresults.add(stereotype.getName());\n\t\t}\n\n\t\t// check WEB-INF/classes first\n\t\tSet<String> myStereotypes = webInfClassesAnnotationMap.get(Stereotype.class.getName());\n\t\tif (myStereotypes != null) {\n\t\t\tresults.addAll(myStereotypes);\n\t\t}\n\n\t\t// check basePackages\n\t\tSet<String> libStereotypes = basePackagesAnnotationMap.get(Stereotype.class.getName());\n\t\tif (libStereotypes != null) {\n\t\t\tfor (String stereotype : libStereotypes) {\n\t\t\t\tfor (String basePackage : basePackages) {\n\t\t\t\t\tif (stereotype.startsWith(basePackage)) {\n\t\t\t\t\t\tresults.add(stereotype);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t}\n\n\tprivate void findComponentsFromWebInfClasses(Map<String, Set<String>> index, Set<String> stereotypeNames, Set<String> results) {\n\t\tfor (String stereotype : stereotypeNames) {\n\t\t\tresults.addAll(index.get(stereotype));\n\t\t}\n\t}\n\n\tprivate void findComponentsFromBasePackages(Map<String, Set<String>> index, List<String> basePackages, Set<String> results) {\n\t\tfor (Class<? extends Annotation> stereotype : BaseComponents.getStereotypes()) {\n\t\t\tSet<String> classes = index.get(stereotype.getName());\n\n\t\t\tif (classes != null) {\n\t\t\t\tfor (String clazz : classes) {\n\t\t\t\t\tfor (String basePackage : basePackages) {\n\t\t\t\t\t\tif (clazz.startsWith(basePackage)) {\n\t\t\t\t\t\t\tresults.add(clazz);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate AnnotationDB createAnnotationDB() {\n\t\tAnnotationDB db = new AnnotationDB();\n\t\tdb.setScanClassAnnotations(true);\n\t\tdb.setScanFieldAnnotations(false);\n\t\tdb.setScanMethodAnnotations(false);\n\t\tdb.setScanParameterAnnotations(false);\n\t\treturn db;\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.scan;\n\nimport java.io.IOException;\nimport java.lang.annotation.Annotation;\nimport java.net.URL;\nimport java.util.Collection;\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.scannotation.AnnotationDB;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.ioc.Stereotype;\n\n/**\n * A Scannotation based Component Scanner\n *\n * @author Sérgio Lopes\n * @since 3.2\n */\npublic class ScannotationComponentScanner implements ComponentScanner {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(ScannotationComponentScanner.class);\n\n\tpublic Collection<String> scan(ClasspathResolver resolver) {\n\t\tfinal URL webInfClasses = resolver.findWebInfClassesLocation();\n\t\tfinal List<String> basePackages = resolver.findBasePackages();\n\n\t\tHashSet<String> results = new HashSet<String>();\n\n\t\tMap<String, Set<String>> webInfClassesAnnotationMap = scanWebInfClasses(webInfClasses);\n\t\tMap<String, Set<String>> basePackagesAnnotationMap = scanBasePackages(basePackages);\n\n\t\tSet<String> stereotypeNames = findStereotypes(webInfClassesAnnotationMap, basePackagesAnnotationMap, basePackages);\n\n\t\tfindComponentsFromWebInfClasses(webInfClassesAnnotationMap, stereotypeNames, results);\n\t\tfindComponentsFromBasePackages(basePackagesAnnotationMap, basePackages, results);\n\n\t\treturn results;\n\t}\n\n\tprivate Map<String, Set<String>> scanWebInfClasses(URL webInfClasses) {\n\t\ttry {\n\t\t\tAnnotationDB db = createAnnotationDB();\n\t\t\tdb.scanArchives(webInfClasses);\n\t\t\treturn db.getAnnotationIndex();\n\t\t} catch (IOException e) {\n\t\t\tthrow new ScannerException(\"Could not scan WEB-INF/classes\", e);\n\t\t}\n\t}\n\n\tprivate Map<String, Set<String>> scanBasePackages(List<String> basePackages) {\n\t\ttry {\n\t\t\tAnnotationDB db = createAnnotationDB();\n\n\t\t\tfor (String basePackage : basePackages) {\n\t\t\t\tString resource = basePackage.replace('.', '/');\n\t\t\t\tEnumeration<URL> urls = Thread.currentThread().getContextClassLoader().getResources(resource);\n\t\t\t\tif (!urls.hasMoreElements()) {\n\t\t\t\t\tlogger.error(\"There's no occurence of package {} in classpath\", basePackage);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tdo {\n\t\t\t\t\tURL url = urls.nextElement();\n\n\t\t\t\t\tString file = url.getFile();\n\t\t\t\t\tfile = file.substring(0, file.length() - resource.length() - 1);\n\t\t\t\t\tif (file.charAt(file.length() - 1) == '!') {\n\t\t\t\t\t\tfile = file.substring(0, file.length() - 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (!file.startsWith(\"file:\")) {\n\t\t\t\t\t\tfile = \"file:\" + file;\n\t\t\t\t\t}\n\n\t\t\t\t\tdb.scanArchives(new URL(file));\n\t\t\t\t} while (urls.hasMoreElements());\n\t\t\t}\n\n\t\t\treturn db.getAnnotationIndex();\n\t\t} catch (IOException e) {\n\t\t\tthrow new ScannerException(\"Could not scan base packages\", e);\n\t\t}\n\t}\n\n\tprivate Set<String> findStereotypes(Map<String, Set<String>> webInfClassesAnnotationMap, Map<String, Set<String>> basePackagesAnnotationMap, List<String> basePackages) {\n\t\tHashSet<String> results = new HashSet<String>();\n\n\t\t// add VRaptor's default\n\t\tfor (Class<? extends Annotation> stereotype : BaseComponents.getStereotypes()) {\n\t\t\tresults.add(stereotype.getName());\n\t\t}\n\n\t\t// check WEB-INF/classes first\n\t\tSet<String> myStereotypes = webInfClassesAnnotationMap.get(Stereotype.class.getName());\n\t\tif (myStereotypes != null) {\n\t\t\tresults.addAll(myStereotypes);\n\t\t}\n\n\t\t// check basePackages\n\t\tSet<String> libStereotypes = basePackagesAnnotationMap.get(Stereotype.class.getName());\n\t\tif (libStereotypes != null) {\n\t\t\tfor (String stereotype : libStereotypes) {\n\t\t\t\tfor (String basePackage : basePackages) {\n\t\t\t\t\tif (stereotype.startsWith(basePackage)) {\n\t\t\t\t\t\tresults.add(stereotype);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn results;\n\t}\n\n\tprivate void findComponentsFromWebInfClasses(Map<String, Set<String>> index, Set<String> stereotypeNames, Set<String> results) {\n\t\tfor (String stereotype : stereotypeNames) {\n\t\t\tSet<String> classes = index.get(stereotype);\n\t\t\tif (classes != null)\n\t\t\t\tresults.addAll(classes);\n\t\t}\n\t}\n\n\tprivate void findComponentsFromBasePackages(Map<String, Set<String>> index, List<String> basePackages, Set<String> results) {\n\t\tfor (Class<? extends Annotation> stereotype : BaseComponents.getStereotypes()) {\n\t\t\tSet<String> classes = index.get(stereotype.getName());\n\n\t\t\tif (classes != null) {\n\t\t\t\tfor (String clazz : classes) {\n\t\t\t\t\tfor (String basePackage : basePackages) {\n\t\t\t\t\t\tif (clazz.startsWith(basePackage)) {\n\t\t\t\t\t\t\tresults.add(clazz);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate AnnotationDB createAnnotationDB() {\n\t\tAnnotationDB db = new AnnotationDB();\n\t\tdb.setScanClassAnnotations(true);\n\t\tdb.setScanFieldAnnotations(false);\n\t\tdb.setScanMethodAnnotations(false);\n\t\tdb.setScanParameterAnnotations(false);\n\t\treturn db;\n\t}\n}\n","lineNo":137}
{"Smelly Sample":"package br.com.caelum.vraptor.ioc.guice;\n\nimport static com.google.inject.matcher.Matchers.annotatedWith;\nimport static com.google.inject.matcher.Matchers.not;\n\nimport java.lang.reflect.Type;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.ComponentFactoryIntrospector;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.ioc.SessionScoped;\nimport br.com.caelum.vraptor.ioc.spring.VRaptorRequestHolder;\nimport br.com.caelum.vraptor.serialization.Serialization;\nimport br.com.caelum.vraptor.validator.BeanValidator;\n\nimport com.google.inject.AbstractModule;\nimport com.google.inject.Provider;\nimport com.google.inject.Scope;\nimport com.google.inject.TypeLiteral;\nimport com.google.inject.matcher.AbstractMatcher;\nimport com.google.inject.matcher.Matcher;\nimport com.google.inject.util.Types;\n\n/**\n *\n * An AbstractModule that wires VRaptor components.\n *\n * @author Lucas Cavalcanti\n * @author Sergio Lopes\n *\n * @since 3.2\n *\n */\npublic class VRaptorAbstractModule extends AbstractModule {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(VRaptorAbstractModule.class);\n\n\tprivate final ServletContext context;\n\tprivate final Container container;\n\n\tpublic VRaptorAbstractModule(ServletContext context, Container container) {\n\t\tthis.context = context;\n\t\tthis.container = container;\n\t}\n\n\t@Override\n\tprotected void configure() {\n\t\tbindScope(RequestScoped.class, GuiceProvider.REQUEST);\n\t\tbindScope(SessionScoped.class, GuiceProvider.SESSION);\n\t\tbindScope(ApplicationScoped.class, GuiceProvider.APPLICATION);\n\n\t\tMatcher<TypeLiteral<?>> isApplication = type(annotatedWith(ApplicationScoped.class));\n\t\tMatcher<TypeLiteral<?>> isSession = type(annotatedWith(SessionScoped.class));\n\n\t\tbindListener(isApplication, new ScopeLifecycleListener(GuiceProvider.APPLICATION));\n\t\tbindListener(isSession, new ScopeLifecycleListener(GuiceProvider.SESSION));\n\t\tbindListener(not(isApplication).and(not(isSession)), new ScopeLifecycleListener(GuiceProvider.REQUEST));\n\n\n\t\tbind(MutableRequest.class).toProvider(new Provider<MutableRequest>() {\n\n\t\t\tpublic MutableRequest get() {\n\t\t\t\treturn VRaptorRequestHolder.currentRequest().getRequest();\n\t\t\t}\n\t\t}).in(GuiceProvider.REQUEST);\n\n\t\tbind(RequestInfo.class).toProvider(new Provider<RequestInfo>() {\n\n\t\t\tpublic RequestInfo get() {\n\t\t\t\treturn VRaptorRequestHolder.currentRequest();\n\t\t\t}\n\t\t}).in(GuiceProvider.REQUEST);\n\n\t\tbind(HttpSession.class).toProvider(new Provider<HttpSession>() {\n\n\t\t\tpublic HttpSession get() {\n\t\t\t\treturn VRaptorRequestHolder.currentRequest().getRequest().getSession();\n\t\t\t}\n\t\t}).in(GuiceProvider.REQUEST);\n\t\tbind(MutableResponse.class).toProvider(new Provider<MutableResponse>() {\n\n\t\t\tpublic MutableResponse get() {\n\t\t\t\treturn VRaptorRequestHolder.currentRequest().getResponse();\n\t\t\t}\n\t\t}).in(GuiceProvider.REQUEST);\n\t\tbind(HttpServletResponse.class).to(MutableResponse.class).in(GuiceProvider.REQUEST);\n\t\tbind(HttpServletRequest.class).to(MutableRequest.class).in(GuiceProvider.REQUEST);\n\t\tbind(ServletContext.class).toInstance(context);\n\t\tbind(Container.class).toInstance(container);\n\n\t\tbind(new TypeLiteral<List<Serialization>>() {}).toInstance(Collections.<Serialization>emptyList());\n\t\tbind(new TypeLiteral<List<BeanValidator>>() {}).toInstance(Collections.<BeanValidator>emptyList());\n\t\tregisterScope((Map) BaseComponents.getApplicationScoped(), GuiceProvider.APPLICATION);\n\t\tregisterScope((Map) BaseComponents.getPrototypeScoped());\n\t\tregisterScope((Map) BaseComponents.getRequestScoped(), GuiceProvider.REQUEST);\n\n\t\tfor (Class converter : BaseComponents.getBundledConverters()) {\n\t\t\tbind(converter).toConstructor(converter.getDeclaredConstructors()[0]);\n\t\t}\n\t\tbind(ComponentRegistry.class).toInstance(new GuiceComponentRegistry(binder()));\n\t\tfor (Class handler : BaseComponents.getStereotypeHandlers()) {\n\t\t\tbind(handler).toConstructor(handler.getDeclaredConstructors()[0]);\n\t\t}\n\t}\n\n\tprivate void registerScope(Map<Class, Class> requestScoped, Scope scope) {\n\t\tfor (Entry<Class, Class> entry : requestScoped.entrySet()) {\n\t\t\tlogger.debug(\"Binding {} to {}\", entry.getKey(), entry.getValue());\n\t\t\tbind(entry.getKey()).toConstructor(entry.getValue().getDeclaredConstructors()[0]).in(scope);\n\t\t\tregisterFactory(entry);\n\t\t}\n\t}\n\n\tprivate void registerScope(Map<Class, Class> scope) {\n\t\tfor (Entry<Class, Class> entry : scope.entrySet()) {\n\t\t\tbind(entry.getKey()).toConstructor(entry.getValue().getDeclaredConstructors()[0]);\n\t\t\tregisterFactory(entry);\n\t\t}\n\t}\n\n\tprivate void registerFactory(Entry<Class, Class> entry) {\n\t\tif (ComponentFactory.class.isAssignableFrom(entry.getValue())) {\n\t\t\tfinal Class<?> target = new ComponentFactoryIntrospector().targetTypeForComponentFactory(entry.getValue());\n\t\t\tType adapterType = Types.newParameterizedType(ComponentFactoryProviderAdapter.class, target);\n\t\t\tType factoryType = Types.newParameterizedType(ComponentFactory.class, target);\n\t\t\tbind(TypeLiteral.get(adapterType));\n\t\t\tbind(TypeLiteral.get(factoryType)).to(entry.getValue());\n\t\t\tbind(target).toProvider((TypeLiteral) TypeLiteral.get(adapterType));\n\t\t}\n\t}\n\n\tprivate Matcher<TypeLiteral<?>> type(final Matcher<? super Class> matcher) {\n\t\treturn new AbstractMatcher<TypeLiteral<?>>() {\n\t\t\tpublic boolean matches(TypeLiteral<?> literal) {\n\t\t\t\treturn matcher.matches(literal.getRawType());\n\t\t\t}\n\t\t};\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.ioc.guice;\n\nimport static com.google.inject.matcher.Matchers.annotatedWith;\nimport static com.google.inject.matcher.Matchers.not;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.ioc.SessionScoped;\nimport br.com.caelum.vraptor.ioc.spring.VRaptorRequestHolder;\nimport br.com.caelum.vraptor.serialization.Serialization;\nimport br.com.caelum.vraptor.validator.BeanValidator;\n\nimport com.google.inject.AbstractModule;\nimport com.google.inject.Provider;\nimport com.google.inject.Scopes;\nimport com.google.inject.TypeLiteral;\nimport com.google.inject.matcher.AbstractMatcher;\nimport com.google.inject.matcher.Matcher;\n\n/**\n *\n * An AbstractModule that wires VRaptor components.\n *\n * @author Lucas Cavalcanti\n * @author Sergio Lopes\n *\n * @since 3.2\n *\n */\npublic class VRaptorAbstractModule extends AbstractModule {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(VRaptorAbstractModule.class);\n\n\tprivate final ServletContext context;\n\tprivate final Container container;\n\n\tpublic VRaptorAbstractModule(ServletContext context, Container container) {\n\t\tthis.context = context;\n\t\tthis.container = container;\n\t}\n\n\t@Override\n\tprotected void configure() {\n\t\tbindScope(RequestScoped.class, GuiceProvider.REQUEST);\n\t\tbindScope(SessionScoped.class, GuiceProvider.SESSION);\n\t\tbindScope(ApplicationScoped.class, GuiceProvider.APPLICATION);\n\n\t\tMatcher<TypeLiteral<?>> isApplication = type(annotatedWith(ApplicationScoped.class));\n\t\tMatcher<TypeLiteral<?>> isSession = type(annotatedWith(SessionScoped.class));\n\n\t\tbindListener(isApplication, new ScopeLifecycleListener(GuiceProvider.APPLICATION));\n\t\tbindListener(isSession, new ScopeLifecycleListener(GuiceProvider.SESSION));\n\t\tbindListener(not(isApplication).and(not(isSession)), new ScopeLifecycleListener(GuiceProvider.REQUEST));\n\n\n\t\tbind(MutableRequest.class).toProvider(new Provider<MutableRequest>() {\n\n\t\t\tpublic MutableRequest get() {\n\t\t\t\treturn VRaptorRequestHolder.currentRequest().getRequest();\n\t\t\t}\n\t\t}).in(GuiceProvider.REQUEST);\n\n\t\tbind(RequestInfo.class).toProvider(new Provider<RequestInfo>() {\n\n\t\t\tpublic RequestInfo get() {\n\t\t\t\treturn VRaptorRequestHolder.currentRequest();\n\t\t\t}\n\t\t}).in(GuiceProvider.REQUEST);\n\n\t\tbind(HttpSession.class).toProvider(new Provider<HttpSession>() {\n\n\t\t\tpublic HttpSession get() {\n\t\t\t\treturn VRaptorRequestHolder.currentRequest().getRequest().getSession();\n\t\t\t}\n\t\t}).in(GuiceProvider.REQUEST);\n\t\tbind(MutableResponse.class).toProvider(new Provider<MutableResponse>() {\n\n\t\t\tpublic MutableResponse get() {\n\t\t\t\treturn VRaptorRequestHolder.currentRequest().getResponse();\n\t\t\t}\n\t\t}).in(GuiceProvider.REQUEST);\n\t\tbind(HttpServletResponse.class).to(MutableResponse.class).in(GuiceProvider.REQUEST);\n\t\tbind(HttpServletRequest.class).to(MutableRequest.class).in(GuiceProvider.REQUEST);\n\t\tbind(ServletContext.class).toInstance(context);\n\t\tbind(Container.class).toInstance(container);\n\n\t\tbind(new TypeLiteral<List<Serialization>>() {}).toInstance(Collections.<Serialization>emptyList());\n\t\tbind(new TypeLiteral<List<BeanValidator>>() {}).toInstance(Collections.<BeanValidator>emptyList());\n\n\t\tGuiceComponentRegistry registry = new GuiceComponentRegistry(binder());\n\n\t\tbind(ComponentRegistry.class).toInstance(registry);\n\n\t\tregistry.registerInScope((Map) BaseComponents.getApplicationScoped(), GuiceProvider.APPLICATION);\n\t\tregistry.registerInScope((Map) BaseComponents.getPrototypeScoped(), Scopes.NO_SCOPE);\n\t\tregistry.registerInScope((Map) BaseComponents.getRequestScoped(), GuiceProvider.REQUEST);\n\n\t\tfor (Class converter : BaseComponents.getBundledConverters()) {\n\t\t\tregistry.register(converter, converter);\n\t\t}\n\n\t\tfor (Class handler : BaseComponents.getStereotypeHandlers()) {\n\t\t\tregistry.register(handler, handler);\n\t\t}\n\n\t\tfor (Entry<Class<?>, Class<?>> entry : BaseComponents.getCachedComponents().entrySet()) {\n\t\t\tregistry.register(entry.getKey(), entry.getValue());\n\t\t}\n\n\t}\n\n\tprivate Matcher<TypeLiteral<?>> type(final Matcher<? super Class> matcher) {\n\t\treturn new AbstractMatcher<TypeLiteral<?>>() {\n\t\t\tpublic boolean matches(TypeLiteral<?> literal) {\n\t\t\t\treturn matcher.matches(literal.getRawType());\n\t\t\t}\n\t\t};\n\t}\n\n}\n","lineNo":109}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport java.util.Map;\n\nimport br.com.caelum.vraptor.Lazy;\nimport br.com.caelum.vraptor.interceptor.Interceptor;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.Container;\n\nimport com.google.common.collect.MapMaker;\n\n/**\n *\n * @author Lucas Cavalcanti\n * @author Alberto Souza\n * @since 3.2.0\n *\n */\n@ApplicationScoped\npublic class DefaultInterceptorHandlerFactory implements InterceptorHandlerFactory {\n\n\tprivate Container container;\n\n\tprivate Map<Class<? extends Interceptor>, InterceptorHandler> cachedHandlers =\n\t\tnew MapMaker().weakValues().makeMap();\n\n\tpublic DefaultInterceptorHandlerFactory(Container container) {\n\t\tthis.container = container;\n\t}\n\n\tpublic InterceptorHandler handlerFor(Class<? extends Interceptor> type) {\n\t\tif (type.isAnnotationPresent(Lazy.class)) {\n\t\t\tif (!cachedHandlers.containsKey(type)) {\n\t\t\t\tcachedHandlers.put(type, new LazyInterceptorHandler(container, type));\n\t\t\t}\n\t\t\treturn cachedHandlers.get(type);\n\t\t}\n\t\treturn new ToInstantiateInterceptorHandler(container, type);\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport java.util.concurrent.ConcurrentMap;\n\nimport br.com.caelum.vraptor.Lazy;\nimport br.com.caelum.vraptor.interceptor.Interceptor;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.Container;\n\nimport com.google.common.collect.MapMaker;\n\n/**\n *\n * @author Lucas Cavalcanti\n * @author Alberto Souza\n * @since 3.2.0\n *\n */\n@ApplicationScoped\npublic class DefaultInterceptorHandlerFactory implements InterceptorHandlerFactory {\n\n\tprivate Container container;\n\n\tprivate ConcurrentMap<Class<? extends Interceptor>, InterceptorHandler> cachedHandlers =\n\t\tnew MapMaker().makeMap();\n\n\tpublic DefaultInterceptorHandlerFactory(Container container) {\n\t\tthis.container = container;\n\t}\n\n\tpublic InterceptorHandler handlerFor(Class<? extends Interceptor> type) {\n\t\tif (type.isAnnotationPresent(Lazy.class)) {\n\t\t\tInterceptorHandler handler = cachedHandlers.get(type);\n\t\t\tif (handler == null) {\n\t\t\t\tLazyInterceptorHandler value = new LazyInterceptorHandler(container, type);\n\t\t\t\tcachedHandlers.putIfAbsent(type, value);\n\t\t\t\treturn value;\n\t\t\t} else {\n\t\t\t\treturn handler;\n\t\t\t}\n\t\t}\n\t\treturn new ToInstantiateInterceptorHandler(container, type);\n\t}\n\n}\n","lineNo":50}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Basic url to resource method translator.\n *\n * @author Guilherme Silveira\n * @author Leonardo Bessa\n */\n@ApplicationScoped\npublic class DefaultResourceTranslator implements UrlToResourceTranslator {\n\n\tprivate final Logger logger = LoggerFactory.getLogger(DefaultResourceTranslator.class);\n\n\tprivate final Router router;\n\n\tpublic DefaultResourceTranslator(Router router) {\n\t\tthis.router = router;\n\t}\n\n\tpublic ResourceMethod translate(RequestInfo info) {\n\t\tMutableRequest request = info.getRequest();\n\t\tString resourceName = info.getRequestedUri();\n\n\t\tlogger.debug(\"trying to access {}\", resourceName);\n\t\tResourceMethod resource = router.parse(resourceName, HttpMethod.of(request), request);\n\n\t\tlogger.debug(\"found resource {}\", resource);\n\t\treturn resource;\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.route.MethodNotAllowedException;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Basic url to resource method translator.\n *\n * @author Guilherme Silveira\n * @author Leonardo Bessa\n */\n@ApplicationScoped\npublic class DefaultResourceTranslator implements UrlToResourceTranslator {\n\n\tprivate final Logger logger = LoggerFactory.getLogger(DefaultResourceTranslator.class);\n\n\tprivate final Router router;\n\n\tpublic DefaultResourceTranslator(Router router) {\n\t\tthis.router = router;\n\t}\n\n\tpublic ResourceMethod translate(RequestInfo info) {\n\t\tMutableRequest request = info.getRequest();\n\t\tString resourceName = info.getRequestedUri();\n\n\t\tlogger.debug(\"trying to access {}\", resourceName);\n\t\t\n\t\tHttpMethod method;\n\t\ttry {\n\t\t\tmethod = HttpMethod.of(request);\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new MethodNotAllowedException(router.allowedMethodsFor(resourceName), null);\n\t\t}\n\t\tResourceMethod resource = router.parse(resourceName, method, request);\n\n\t\tlogger.debug(\"found resource {}\", resource);\n\t\treturn resource;\n\t}\n\n}\n","lineNo":53}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource - guilherme.silveira@caelum.com.br\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.restfulie;\n\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.not;\nimport static org.junit.Assert.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.config.Configuration;\nimport br.com.caelum.vraptor.restfulie.Restfulie;\nimport br.com.caelum.vraptor.restfulie.hypermedia.HypermediaResource;\nimport br.com.caelum.vraptor.restfulie.relation.Relation;\nimport br.com.caelum.vraptor.restfulie.serialization.LinkConverter;\n\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.converters.reflection.ReflectionConverter;\n\npublic class LinkConverterTest {\n\t\n\tpublic static class Client implements HypermediaResource{\n\t\t\n\t\tprivate transient final Relation[] list;\n\n\t\tpublic Client(Relation ... t) {\n\t\t\tthis.list = t;\n\t\t}\n\n\t\tpublic List<Relation> getRelations(Restfulie control) {\n\t\t\treturn Arrays.asList(list);\n\t\t}\n\t\t\n\t}\n\tprivate XStream xstream;\n\tprivate Restfulie restfulie;\n\t\n\t@Before\n\tpublic void setup() {\n\t\tthis.xstream = new XStream();\n\t\tthis.restfulie = mock(Restfulie.class);\n\t\tConfiguration config = mock(Configuration.class);\n\t\twhen(config.getApplicationPath()).thenReturn(\"http://www.caelum.com.br\");\n\t\txstream.registerConverter(new LinkConverter(new ReflectionConverter(xstream.getMapper(), xstream.getReflectionProvider()), restfulie, config));\n\t}\n\t\n\t@Test\n\tpublic void shouldSerializeNoLinksIfThereIsNoTransition() {\n\t\tString xml = xstream.toXML(new Client());\n\t\tassertThat(xml, not(containsString(\"atom:link\")));\n\t\tverify(restfulie).clear();\n\t}\n\t\n\t@Test\n\tpublic void shouldSerializeOneLinkIfThereIsATransition() {\n\t\tRelation t = mock(Relation.class);\n\t\twhen(t.getName()).thenReturn(\"kill\");\n\t\twhen(t.getUri()).thenReturn(\"/kill\");\n\t\t\n\t\tString xml = xstream.toXML(new Client(t));\n\t\tassertThat(xml, containsString(\"<atom:link rel=\\\"kill\\\" href=\\\"http://www.caelum.com.br/kill\\\" xmlns:atom=\\\"http://www.w3.org/2005/Atom\\\"/>\"));\n\t\tverify(restfulie).clear();\n\t}\n\t\n\t@Test\n\tpublic void shouldSerializeAllLinksIfThereAreTransitions() {\n\t\tRelation t = mock(Relation.class);\n\t\twhen(t.getName()).thenReturn(\"kill\");\n\t\twhen(t.getUri()).thenReturn(\"/kill\");\n\t\t\n\t\tRelation t2 = mock(Relation.class);\n\t\twhen(t2.getName()).thenReturn(\"ressurect\");\n\t\twhen(t2.getUri()).thenReturn(\"/ressurect\");\n\t\t\n\t\tString xml = xstream.toXML(new Client(t,t2));\n\t\tassertThat(xml, containsString(\"<atom:link rel=\\\"kill\\\" href=\\\"http://www.caelum.com.br/kill\\\" xmlns:atom=\\\"http://www.w3.org/2005/Atom\\\"/>\"));\n\t\tassertThat(xml, containsString(\"<atom:link rel=\\\"ressurect\\\" href=\\\"http://www.caelum.com.br/ressurect\\\" xmlns:atom=\\\"http://www.w3.org/2005/Atom\\\"/>\"));\n\t\tverify(restfulie).clear();\n\t}\n\t\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource - guilherme.silveira@caelum.com.br\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.restfulie;\n\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.not;\nimport static org.junit.Assert.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Arrays;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.config.Configuration;\nimport br.com.caelum.vraptor.restfulie.hypermedia.HypermediaResource;\nimport br.com.caelum.vraptor.restfulie.relation.Relation;\nimport br.com.caelum.vraptor.restfulie.relation.RelationBuilder;\nimport br.com.caelum.vraptor.restfulie.serialization.LinkConverter;\n\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.converters.reflection.ReflectionConverter;\n\npublic class LinkConverterTest {\n\n\tprivate @Mock Restfulie restfulie;\n\tprivate @Mock RelationBuilder builder;\n\tprivate @Mock HypermediaResource resource;\n\n\n\tprivate XStream xstream;\n\n\t@Before\n\tpublic void setup() {\n\t\tMockitoAnnotations.initMocks(this);\n\n\t\tthis.restfulie = mock(Restfulie.class);\n\t\twhen(restfulie.newRelationBuilder()).thenReturn(builder);\n\n\t\tConfiguration config = mock(Configuration.class);\n\t\twhen(config.getApplicationPath()).thenReturn(\"http://www.caelum.com.br\");\n\n\t\txstream = new XStream();\n\t\tReflectionConverter base = new ReflectionConverter(xstream.getMapper(), xstream.getReflectionProvider());\n\n\t\txstream.registerConverter(new LinkConverter(base, restfulie, config));\n\t}\n\n\t@Test\n\tpublic void shouldSetupRelations() {\n\t\txstream.toXML(resource);\n\t\tverify(resource).configureRelations(builder);\n\t}\n\n\t@Test\n\tpublic void shouldSerializeNoLinksIfThereIsNoTransition() {\n\t\tString xml = xstream.toXML(resource);\n\t\tassertThat(xml, not(containsString(\"atom:link\")));\n\t}\n\n\t@Test\n\tpublic void shouldSerializeOneLinkIfThereIsATransition() {\n\t\tRelation kill = mock(Relation.class);\n\t\twhen(kill.getName()).thenReturn(\"kill\");\n\t\twhen(kill.getUri()).thenReturn(\"/kill\");\n\n\t\twhen(builder.getRelations()).thenReturn(Arrays.asList(kill));\n\t\tString xml = xstream.toXML(resource);\n\t\tassertThat(xml, containsString(\"<atom:link rel=\\\"kill\\\" href=\\\"http://www.caelum.com.br/kill\\\" xmlns:atom=\\\"http://www.w3.org/2005/Atom\\\"/>\"));\n\t}\n\n\t@Test\n\tpublic void shouldSerializeAllLinksIfThereAreTransitions() {\n\t\tRelation kill = mock(Relation.class);\n\t\twhen(kill.getName()).thenReturn(\"kill\");\n\t\twhen(kill.getUri()).thenReturn(\"/kill\");\n\n\t\tRelation ressurect = mock(Relation.class);\n\t\twhen(ressurect.getName()).thenReturn(\"ressurect\");\n\t\twhen(ressurect.getUri()).thenReturn(\"/ressurect\");\n\n\t\twhen(builder.getRelations()).thenReturn(Arrays.asList(kill, ressurect));\n\t\tString xml = xstream.toXML(resource);\n\t\tassertThat(xml, containsString(\"<atom:link rel=\\\"kill\\\" href=\\\"http://www.caelum.com.br/kill\\\" xmlns:atom=\\\"http://www.w3.org/2005/Atom\\\"/>\"));\n\t\tassertThat(xml, containsString(\"<atom:link rel=\\\"ressurect\\\" href=\\\"http://www.caelum.com.br/ressurect\\\" xmlns:atom=\\\"http://www.w3.org/2005/Atom\\\"/>\"));\n\t}\n\n}\n","lineNo":63}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.lang.reflect.Method;\nimport java.util.List;\n\nimport org.jmock.Expectations;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class OutjectResultTest {\n\n\tprivate VRaptorMockery mockery;\n\tprivate Result result;\n\tprivate MethodInfo info;\n\tprivate OutjectResult interceptor;\n\tprivate ResourceMethod method;\n\tprivate Object instance;\n\tprivate InterceptorStack stack;\n\tprivate TypeNameExtractor extractor;\n\n\t@Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.result = mockery.mock(Result.class);\n\t\tthis.info = mockery.mock(MethodInfo.class);\n\t\tthis.instance = null;\n\t\tthis.method = mockery.mock(ResourceMethod.class);\n\t\tthis.stack = mockery.mock(InterceptorStack.class);\n\t\tthis.extractor = mockery.mock(TypeNameExtractor.class);\n\n\t\tthis.interceptor = new OutjectResult(result, info, extractor);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(stack).next(method, instance);\n\t\t\t}\n\t\t});\n\t}\n\n\tinterface MyComponent {\n\t\tString returnsAString();\n\t\tList<String> returnsStrings();\n\t\tvoid noReturn();\n\t}\n\n\t@Test\n\tpublic void shouldOutjectWithASimpleTypeName() throws NoSuchMethodException {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(method).getMethod(); will(returnValue(MyComponent.class.getMethod(\"returnsAString\")));\n\t\t\t\tone(info).getResult(); will(returnValue(\"myString\"));\n\n\t\t\t\tone(extractor).nameFor(String.class); will(returnValue(\"string\"));\n\n\t\t\t\tone(result).include(\"string\", \"myString\");\n\t\t\t}\n\t\t});\n\t\tinterceptor.intercept(stack, method, instance);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t@Test\n\tpublic void shouldOutjectACollectionAsAList() throws NoSuchMethodException {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tMethod myComponentMethod = MyComponent.class.getMethod(\"returnsStrings\");\n\t\t\t\tone(method).getMethod(); will(returnValue(myComponentMethod));\n\t\t\t\tone(info).getResult(); will(returnValue(\"myString\"));\n\t\t\t\tone(extractor).nameFor(myComponentMethod.getGenericReturnType()); will(returnValue(\"stringList\"));\n\t\t\t\tone(result).include(\"stringList\", \"myString\");\n\t\t\t}\n\t\t});\n\t\tinterceptor.intercept(stack, method, instance);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t@Test\n\tpublic void shouldNotOutjectIfThereIsNoReturnType() throws NoSuchMethodException {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(method).getMethod(); will(returnValue(MyComponent.class.getMethod(\"noReturn\")));\n\t\t\t}\n\t\t});\n\t\tinterceptor.intercept(stack, method, instance);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.lang.reflect.Method;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class OutjectResultTest {\n\n\tprivate @Mock Result result;\n\tprivate @Mock MethodInfo info;\n\tprivate @Mock ResourceMethod method;\n\tprivate @Mock Object instance;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock TypeNameExtractor extractor;\n\n\tprivate OutjectResult interceptor;\n\n\t@Before\n\tpublic void setup() {\n\t\tMockitoAnnotations.initMocks(this);\n\t\tthis.interceptor = new OutjectResult(result, info, extractor);\n\t}\n\n\tinterface MyComponent {\n\t\tString returnsAString();\n\t\tList<String> returnsStrings();\n\t\tvoid noReturn();\n\t}\n\n\t@Test\n\tpublic void shouldOutjectWithASimpleTypeName() throws NoSuchMethodException {\n\t\twhen(method.getMethod()).thenReturn(MyComponent.class.getMethod(\"returnsAString\"));\n\t\twhen(info.getResult()).thenReturn(\"myString\");\n\t\twhen(extractor.nameFor(String.class)).thenReturn(\"string\");\n\n\t\tinterceptor.intercept(stack, method, instance);\n\n\t\tverify(result).include(\"string\", \"myString\");\n\t\tverify(stack).next(method, instance);\n\t}\n\n\n\t@Test\n\tpublic void shouldOutjectACollectionAsAList() throws NoSuchMethodException {\n\t\tMethod myComponentMethod = MyComponent.class.getMethod(\"returnsStrings\");\n\t\twhen(method.getMethod()).thenReturn(myComponentMethod);\n\t\twhen(info.getResult()).thenReturn(\"myString\");\n\t\twhen(extractor.nameFor(myComponentMethod.getGenericReturnType())).thenReturn(\"stringList\");\n\n\t\tinterceptor.intercept(stack, method, instance);\n\n\t\tverify(result).include(\"stringList\", \"myString\");\n\t\tverify(stack).next(method, instance);\n\t}\n\n\n\t@Test\n\tpublic void shouldNotOutjectIfThereIsNoReturnType() throws NoSuchMethodException {\n\t\twhen(method.getMethod()).thenReturn(MyComponent.class.getMethod(\"noReturn\"));\n\n\t\tassertFalse(interceptor.accepts(method));\n\t}\n\n\n}\n","lineNo":75}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.util.test;\n\nimport java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.View;\nimport br.com.caelum.vraptor.core.AbstractResult;\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.ObjenesisProxifier;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.serialization.Serializer;\nimport br.com.caelum.vraptor.serialization.SerializerBuilder;\nimport br.com.caelum.vraptor.view.EmptyResult;\nimport br.com.caelum.vraptor.view.ResultException;\n\n/**\n *\n * A mocked Result for testing your controllers.\n *\n * It will ignore redirections and accumulates included objects,\n * so you can use result.included() for inspect included objects.\n *\n * @author Lucas Cavalcanti\n * @author Guilherme Silveira\n */\n@Component\npublic class MockResult extends AbstractResult {\n\n\tprivate final Map<String, Object> values = new HashMap<String, Object>();\n\tprivate Class<?> typeToUse;\n\tprivate final Proxifier proxifier;\n\n\tpublic MockResult(Proxifier proxifier) {\n\t\tthis.proxifier = proxifier;\n\t}\n\n\tpublic MockResult() {\n\t\tthis(new ObjenesisProxifier());\n\t}\n\n\tpublic Result include(String key, Object value) {\n\t\tthis.values.put(key, value);\n\t\treturn this;\n\t}\n\n\tpublic <T extends View> T use(final Class<T> view) {\n\t\tthis.typeToUse = view;\n\t\tif (view.equals(EmptyResult.class)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn proxifier.proxify(view, returnOnFinalMethods(view));\n\t}\n\n\tprivate <T> MethodInvocation<T> returnOnFinalMethods(final Class<T> view) {\n\t\treturn new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tif (method.getReturnType() == void.class) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif (view.isAssignableFrom(method.getReturnType())) {\n\t\t\t\t\treturn proxy;\n\t\t\t\t}\n\n\t\t\t\tif (args.length > 0 && args[0] instanceof Class<?>) {\n\t\t\t\t\treturn proxifier.proxify((Class<?>) args[0], returnOnFirstInvocation());\n\t\t\t\t}\n\n\t\t\t\tif (Serializer.class.isAssignableFrom(method.getReturnType())\n\t\t\t\t\t\t|| SerializerBuilder.class.isAssignableFrom(method.getReturnType())) {\n\t\t\t\t\treturn proxifier.proxify(SerializerBuilder.class, returnOnFinalMethods(SerializerBuilder.class));\n\t\t\t\t}\n\t\t\t\tthrow new ResultException(\"It's not possible to create a mocked version of \" + method + \". Please inform this corner case to VRaptor developers\");\n\t\t\t}\n\n\t\t};\n\t}\n\n\tprivate <T> MethodInvocation<T> returnOnFirstInvocation() {\n\t\treturn new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic boolean used() {\n\t\treturn typeToUse != null;\n\t}\n\n\t/**\n\t *\n\t * @param key\n\t * @return the value if it was included\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <T> T included(String key) {\n\t\treturn (T) values.get(key);\n\t}\n\n\tpublic Map<String, Object> included() {\n\t\treturn values;\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.util.test;\n\nimport java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.View;\nimport br.com.caelum.vraptor.core.AbstractResult;\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.ObjenesisProxifier;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.serialization.NoRootSerialization;\nimport br.com.caelum.vraptor.serialization.Serializer;\nimport br.com.caelum.vraptor.serialization.SerializerBuilder;\nimport br.com.caelum.vraptor.view.EmptyResult;\nimport br.com.caelum.vraptor.view.ResultException;\n\n/**\n *\n * A mocked Result for testing your controllers.\n *\n * It will ignore redirections and accumulates included objects,\n * so you can use result.included() for inspect included objects.\n *\n * @author Lucas Cavalcanti\n * @author Guilherme Silveira\n */\n@Component\npublic class MockResult extends AbstractResult {\n\n\tprivate final Map<String, Object> values = new HashMap<String, Object>();\n\tprivate Class<?> typeToUse;\n\tprivate final Proxifier proxifier;\n\n\tpublic MockResult(Proxifier proxifier) {\n\t\tthis.proxifier = proxifier;\n\t}\n\n\tpublic MockResult() {\n\t\tthis(new ObjenesisProxifier());\n\t}\n\n\tpublic Result include(String key, Object value) {\n\t\tthis.values.put(key, value);\n\t\treturn this;\n\t}\n\n\tpublic <T extends View> T use(final Class<T> view) {\n\t\tthis.typeToUse = view;\n\t\tif (view.equals(EmptyResult.class)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn proxifier.proxify(view, returnOnFinalMethods(view));\n\t}\n\n\tprivate <T> MethodInvocation<T> returnOnFinalMethods(final Class<T> view) {\n\t\treturn new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tClass type = method.getReturnType();\n\t\t\t\tif (type == void.class) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tif (view.isAssignableFrom(type)) {\n\t\t\t\t\treturn proxy;\n\t\t\t\t}\n\n\t\t\t\tif (args.length > 0 && args[0] instanceof Class<?>) {\n\t\t\t\t\treturn proxifier.proxify((Class<?>) args[0], returnOnFirstInvocation());\n\t\t\t\t}\n\n\t\t\t\tif (Serializer.class.isAssignableFrom(type)\n\t\t\t\t\t\t|| SerializerBuilder.class.isAssignableFrom(type)\n\t\t\t\t\t\t|| NoRootSerialization.class.isAssignableFrom(type)) {\n\t\t\t\t\treturn proxifier.proxify(type, returnOnFinalMethods(type));\n\t\t\t\t}\n\t\t\t\tthrow new ResultException(\"It's not possible to create a mocked version of \" + method + \". Please inform this corner case to VRaptor developers\");\n\t\t\t}\n\n\t\t};\n\t}\n\n\tprivate <T> MethodInvocation<T> returnOnFirstInvocation() {\n\t\treturn new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic boolean used() {\n\t\treturn typeToUse != null;\n\t}\n\n\t/**\n\t *\n\t * @param key\n\t * @return the value if it was included\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic <T> T included(String key) {\n\t\treturn (T) values.get(key);\n\t}\n\n\tpublic Map<String, Object> included() {\n\t\treturn values;\n\t}\n\n}\n","lineNo":79}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.view;\n\nimport java.lang.reflect.Method;\nimport java.util.List;\n\nimport net.vidageek.mirror.dsl.Mirror;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.View;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.serialization.Serializer;\nimport br.com.caelum.vraptor.serialization.SerializerBuilder;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationException;\n\n/**\n * Default implementation for ValidationViewsFactory\n *\n * If you want to extend this behavior use:\n * @Component\n * public class MyValidatorViewsFactory extends DefaultValidationViewsFactory {\n * \t\t//delegate constructor\n * \t\t@Override\n * \t\tpublic <T extends View> T instanceFor(Class<T> view, List<Message> errors) {\n * \t\t\t//return my own Validation view version or\n * \t\t\treturn super.instanceFor(view, errors);\n * \t\t}\n * }\n * @author Lucas Cavalcanti\n * @author Pedro Matiello\n */\npublic class DefaultValidationViewsFactory implements ValidationViewsFactory {\n\n\tprivate final Result result;\n\tprivate final Proxifier proxifier;\n\n\tpublic DefaultValidationViewsFactory(Result result, Proxifier proxifier) {\n\t\tthis.result = result;\n\t\tthis.proxifier = proxifier;\n\t}\n\n\tpublic <T extends View> T instanceFor(final Class<T> view, final List<Message> errors) {\n\t\tif (view.equals(EmptyResult.class)) {\n\t\t\tthrow new ValidationException(errors);\n\t\t}\n\n\t\treturn proxifier.proxify(view, throwValidationErrorOnFinalMethods(view, errors, result.use(view)));\n\n\t}\n\n\tprivate <T> MethodInvocation<T> throwValidationErrorOnFinalMethods(final Class<T> view, final List<Message> errors,\n\t\t\tfinal T viewInstance) {\n\t\treturn new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tfinal Object instance = new Mirror().on(viewInstance).invoke().method(method).withArgs(args);\n\t\t\t\tif (method.getReturnType() == void.class) {\n\t\t\t\t\tthrow new ValidationException(errors);\n\t\t\t\t}\n\n\t\t\t\tif (view.isAssignableFrom(method.getReturnType())) {\n\t\t\t\t\treturn proxy;\n\t\t\t\t}\n\n\t\t\t\tif (args.length > 0 && args[0] instanceof Class<?>) {\n\t\t\t\t\treturn proxifier.proxify((Class<?>) args[0], throwValidationExceptionOnFirstInvocation(errors, instance));\n\t\t\t\t}\n\n\t\t\t\tif (Serializer.class.isAssignableFrom(method.getReturnType())\n\t\t\t\t\t\t|| SerializerBuilder.class.isAssignableFrom(method.getReturnType())) {\n\t\t\t\t\treturn proxifier.proxify(SerializerBuilder.class,\n\t\t\t\t\t\t\tthrowValidationErrorOnFinalMethods(SerializerBuilder.class, errors, SerializerBuilder.class.cast(instance)));\n\t\t\t\t}\n\t\t\t\tthrow new ResultException(\"It's not possible to create a validation version of \" + method + \". You must provide a Custom Validation version of your class, or inform this corner case to VRaptor developers\");\n\t\t\t}\n\n\t\t};\n\t}\n\n\tprivate <T> MethodInvocation<T> throwValidationExceptionOnFirstInvocation(final List<Message> errors,\n\t\t\tfinal T instance) {\n\t\treturn new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tnew Mirror().on(instance).invoke().method(method).withArgs(args);\n\n\t\t\t\tthrow new ValidationException(errors);\n\t\t\t}\n\t\t};\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.view;\n\nimport java.lang.reflect.Method;\nimport java.util.List;\n\nimport net.vidageek.mirror.dsl.Mirror;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.View;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.serialization.NoRootSerialization;\nimport br.com.caelum.vraptor.serialization.Serializer;\nimport br.com.caelum.vraptor.serialization.SerializerBuilder;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationException;\n\n/**\n * Default implementation for ValidationViewsFactory\n *\n * If you want to extend this behavior use:\n * @Component\n * public class MyValidatorViewsFactory extends DefaultValidationViewsFactory {\n * \t\t//delegate constructor\n * \t\t@Override\n * \t\tpublic <T extends View> T instanceFor(Class<T> view, List<Message> errors) {\n * \t\t\t//return my own Validation view version or\n * \t\t\treturn super.instanceFor(view, errors);\n * \t\t}\n * }\n * @author Lucas Cavalcanti\n * @author Pedro Matiello\n */\npublic class DefaultValidationViewsFactory implements ValidationViewsFactory {\n\n\tprivate final Result result;\n\tprivate final Proxifier proxifier;\n\n\tpublic DefaultValidationViewsFactory(Result result, Proxifier proxifier) {\n\t\tthis.result = result;\n\t\tthis.proxifier = proxifier;\n\t}\n\n\tpublic <T extends View> T instanceFor(final Class<T> view, final List<Message> errors) {\n\t\tif (view.equals(EmptyResult.class)) {\n\t\t\tthrow new ValidationException(errors);\n\t\t}\n\n\t\treturn proxifier.proxify(view, throwValidationErrorOnFinalMethods(view, errors, result.use(view)));\n\n\t}\n\n\tprivate <T> MethodInvocation<T> throwValidationErrorOnFinalMethods(final Class<T> view, final List<Message> errors,\n\t\t\tfinal T viewInstance) {\n\t\treturn new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tfinal Object instance = new Mirror().on(viewInstance).invoke().method(method).withArgs(args);\n\t\t\t\tClass type = method.getReturnType();\n\t\t\t\tif (type == void.class) {\n\t\t\t\t\tthrow new ValidationException(errors);\n\t\t\t\t}\n\n\t\t\t\tif (view.isAssignableFrom(type)) {\n\t\t\t\t\treturn proxy;\n\t\t\t\t}\n\n\t\t\t\tif (args.length > 0 && args[0] instanceof Class<?>) {\n\t\t\t\t\treturn proxifier.proxify((Class<?>) args[0], throwValidationExceptionOnFirstInvocation(errors, instance));\n\t\t\t\t}\n\n\t\t\t\tif (Serializer.class.isAssignableFrom(type)\n\t\t\t\t\t\t|| SerializerBuilder.class.isAssignableFrom(type)\n\t\t\t\t\t\t|| NoRootSerialization.class.isAssignableFrom(type)) {\n\t\t\t\t\treturn proxifier.proxify(type,\n\t\t\t\t\t\t\tthrowValidationErrorOnFinalMethods(type, errors, type.cast(instance)));\n\t\t\t\t}\n\t\t\t\tthrow new ResultException(\"It's not possible to create a validation version of \" + method + \". You must provide a Custom Validation version of your class, or inform this corner case to VRaptor developers\");\n\t\t\t}\n\n\t\t};\n\t}\n\n\tprivate <T> MethodInvocation<T> throwValidationExceptionOnFirstInvocation(final List<Message> errors,\n\t\t\tfinal T instance) {\n\t\treturn new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tnew Mirror().on(instance).invoke().method(method).withArgs(args);\n\n\t\t\t\tthrow new ValidationException(errors);\n\t\t\t}\n\t\t};\n\t}\n}\n","lineNo":74}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.hamcrest.Description;\nimport org.jmock.Expectations;\nimport org.jmock.api.Action;\nimport org.jmock.api.Invocation;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private VRaptorMockery mockery;\n    private ParametersInstantiatorInterceptor instantiator;\n    private MethodInfo params;\n    private ParametersProvider parametersProvider;\n\tprivate Validator validator;\n\tprivate Localization localization;\n\tprivate InterceptorStack stack;\n\tprivate ResourceBundle bundle;\n\tprivate List<Message> errors ;\n\tprivate HttpSession session;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n        this.mockery = new VRaptorMockery();\n        this.params = mockery.mock(MethodInfo.class);\n        this.parametersProvider = mockery.mock(ParametersProvider.class);\n        this.validator = mockery.mock(Validator.class);\n        this.localization = mockery.localization();\n        this.session = mockery.mock(HttpSession.class);\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, params, validator, localization, session);\n        this.stack = mockery.mock(InterceptorStack.class);\n        this.bundle = localization.getBundle();\n\n        Field errorsField = ParametersInstantiatorInterceptor.class.getDeclaredField(\"errors\");\n        errorsField.setAccessible(true);\n\t\tthis.errors = (List<Message>) errorsField.get(this.instantiator);\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n\n        void oneMoreMethod(String a) {\n\n        }\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n        final ResourceMethod method = mockery.methodFor(Component.class, \"method\");\n\n        mockery.checking(new Expectations() {{\n        \tObject[] values = new Object[] { new Object() };\n\n        \tone(parametersProvider).getParametersFor(method, errors, bundle);\n            will(returnValue(values));\n\n            allowing(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(null));\n            one(validator).addAll(Collections.<Message>emptyList());\n            one(stack).next(method, null);\n            one(params).setParameters(values);\n        }});\n\n        instantiator.intercept(stack, method, null);\n        mockery.assertIsSatisfied();\n    }\n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n    \tfinal ResourceMethod method = mockery.methodFor(Component.class, \"method\");\n\n    \tmockery.checking(new Expectations() {{\n    \t\tObject[] values = new Object[] { new Object() };\n\n    \t\tone(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(values));\n    \t\tone(session).removeAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS);\n\n    \t\tnever(parametersProvider).getParametersFor(method, errors, bundle);\n\n    \t\tone(validator).addAll(Collections.<Message>emptyList());\n    \t\tone(stack).next(method, null);\n    \t\tone(params).setParameters(values);\n    \t}});\n\n    \tinstantiator.intercept(stack, method, null);\n    \tmockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n        final ResourceMethod method = mockery.methodFor(Component.class, \"otherMethod\", int.class);\n\n        mockery.checking(new Expectations() {{\n        \tObject[] values = new Object[]{0};\n\n        \tone(parametersProvider).getParametersFor(method, errors, bundle);\n        \twill(doAll(addErrorsToList(\"error1\"),returnValue(values)));\n\n        \tallowing(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(null));\n\n        \tone(validator).addAll(errors);\n            one(stack).next(method, null);\n            one(params).setParameters(values);\n\n        }});\n\n        instantiator.intercept(stack, method, null);\n        mockery.assertIsSatisfied();\n    }\n\n    @Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n        final ResourceMethod method = mockery.methodFor(Component.class, \"method\");\n\n        mockery.checking(new Expectations() {{\n        \tallowing(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(null));\n\n        \tone(parametersProvider).getParametersFor(method, errors, bundle);\n        \twill(throwException(new RuntimeException()));\n        }});\n\n        instantiator.intercept(stack, method, null);\n        mockery.assertIsSatisfied();\n    }\n\n    private Action addErrorsToList(final String... messages) {\n    \treturn new Action() {\n\t\t\tpublic void describeTo(Description description) {\n\t\t        description.appendText(\"add something to errors\");\n\t\t    }\n\n\t\t\tpublic Object invoke(Invocation invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t};\n    }\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - wwyhiw.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.http.HttpSession;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private @Mock MethodInfo params;\n    private @Mock ParametersProvider parametersProvider;\n\tprivate @Mock Validator validator;\n\tprivate @Mock Localization localization;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock ResourceBundle bundle;\n\tprivate @Mock HttpSession session;\n\tprivate @Mock MutableRequest request;\n\n\tprivate List<Message> errors ;\n\tprivate ParametersInstantiatorInterceptor instantiator;\n\n\tprivate ResourceMethod method;\n\tprivate ResourceMethod otherMethod;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\twhen(localization.getBundle()).thenReturn(bundle);\n\t\twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Collections.emptyList()));\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, params, validator, localization, session, request);\n\n        this.errors = (List<Message>) new Mirror().on(instantiator).get().field(\"errors\");\n        this.method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n        this.otherMethod = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"otherMethod\", int.class));\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\n    \tObject[] values = new Object[] { new Object() };\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n    }\n\n    @Test\n    public void shouldConvertArrayParametersToIndexParameters() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam[].id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam[].id\")).thenReturn(new String[] {\"one\", \"two\", \"three\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(request).setParameter(\"someParam[0].id\", \"one\");\n    \tverify(request).setParameter(\"someParam[1].id\", \"two\");\n    \tverify(request).setParameter(\"someParam[2].id\", \"three\");\n    }\n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\t\tObject[] values = new Object[] { new Object() };\n\n\t\twhen(session.getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS)).thenReturn(values);\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(params).setParameters(values);\n    \tverify(stack).next(method, null);\n    \tverify(validator).addAll(Collections.<Message>emptyList());\n    \tverify(parametersProvider, never()).getParametersFor(method, errors, bundle);\n    \tverify(session).removeAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS);\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n    \tObject[] values = new Object[]{0};\n\n    \twhen(parametersProvider.getParametersFor(otherMethod, errors, bundle)).thenAnswer(addErrorsToListAndReturn(values, \"error1\"));\n\n        instantiator.intercept(stack, otherMethod, null);\n\n        verify(validator).addAll(errors);\n        verify(stack).next(otherMethod, null);\n        verify(params).setParameters(values);\n    }\n\n\t@Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenThrow(new RuntimeException());\n\n        instantiator.intercept(stack, method, null);\n    }\n\n    private <T> Answer<T> addErrorsToListAndReturn(final T value, final String... messages) {\n    \treturn new Answer<T>() {\n\n\t\t\tpublic T answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t};\n\n    }\n}\n","lineNo":94}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.hamcrest.Description;\nimport org.jmock.Expectations;\nimport org.jmock.api.Action;\nimport org.jmock.api.Invocation;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private VRaptorMockery mockery;\n    private ParametersInstantiatorInterceptor instantiator;\n    private MethodInfo params;\n    private ParametersProvider parametersProvider;\n\tprivate Validator validator;\n\tprivate Localization localization;\n\tprivate InterceptorStack stack;\n\tprivate ResourceBundle bundle;\n\tprivate List<Message> errors ;\n\tprivate HttpSession session;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n        this.mockery = new VRaptorMockery();\n        this.params = mockery.mock(MethodInfo.class);\n        this.parametersProvider = mockery.mock(ParametersProvider.class);\n        this.validator = mockery.mock(Validator.class);\n        this.localization = mockery.localization();\n        this.session = mockery.mock(HttpSession.class);\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, params, validator, localization, session);\n        this.stack = mockery.mock(InterceptorStack.class);\n        this.bundle = localization.getBundle();\n\n        Field errorsField = ParametersInstantiatorInterceptor.class.getDeclaredField(\"errors\");\n        errorsField.setAccessible(true);\n\t\tthis.errors = (List<Message>) errorsField.get(this.instantiator);\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n\n        void oneMoreMethod(String a) {\n\n        }\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n        final ResourceMethod method = mockery.methodFor(Component.class, \"method\");\n\n        mockery.checking(new Expectations() {{\n        \tObject[] values = new Object[] { new Object() };\n\n        \tone(parametersProvider).getParametersFor(method, errors, bundle);\n            will(returnValue(values));\n\n            allowing(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(null));\n            one(validator).addAll(Collections.<Message>emptyList());\n            one(stack).next(method, null);\n            one(params).setParameters(values);\n        }});\n\n        instantiator.intercept(stack, method, null);\n        mockery.assertIsSatisfied();\n    }\n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n    \tfinal ResourceMethod method = mockery.methodFor(Component.class, \"method\");\n\n    \tmockery.checking(new Expectations() {{\n    \t\tObject[] values = new Object[] { new Object() };\n\n    \t\tone(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(values));\n    \t\tone(session).removeAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS);\n\n    \t\tnever(parametersProvider).getParametersFor(method, errors, bundle);\n\n    \t\tone(validator).addAll(Collections.<Message>emptyList());\n    \t\tone(stack).next(method, null);\n    \t\tone(params).setParameters(values);\n    \t}});\n\n    \tinstantiator.intercept(stack, method, null);\n    \tmockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n        final ResourceMethod method = mockery.methodFor(Component.class, \"otherMethod\", int.class);\n\n        mockery.checking(new Expectations() {{\n        \tObject[] values = new Object[]{0};\n\n        \tone(parametersProvider).getParametersFor(method, errors, bundle);\n        \twill(doAll(addErrorsToList(\"error1\"),returnValue(values)));\n\n        \tallowing(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(null));\n\n        \tone(validator).addAll(errors);\n            one(stack).next(method, null);\n            one(params).setParameters(values);\n\n        }});\n\n        instantiator.intercept(stack, method, null);\n        mockery.assertIsSatisfied();\n    }\n\n    @Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n        final ResourceMethod method = mockery.methodFor(Component.class, \"method\");\n\n        mockery.checking(new Expectations() {{\n        \tallowing(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(null));\n\n        \tone(parametersProvider).getParametersFor(method, errors, bundle);\n        \twill(throwException(new RuntimeException()));\n        }});\n\n        instantiator.intercept(stack, method, null);\n        mockery.assertIsSatisfied();\n    }\n\n    private Action addErrorsToList(final String... messages) {\n    \treturn new Action() {\n\t\t\tpublic void describeTo(Description description) {\n\t\t        description.appendText(\"add something to errors\");\n\t\t    }\n\n\t\t\tpublic Object invoke(Invocation invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t};\n    }\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - wwyhiw.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.http.HttpSession;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private @Mock MethodInfo params;\n    private @Mock ParametersProvider parametersProvider;\n\tprivate @Mock Validator validator;\n\tprivate @Mock Localization localization;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock ResourceBundle bundle;\n\tprivate @Mock HttpSession session;\n\tprivate @Mock MutableRequest request;\n\n\tprivate List<Message> errors ;\n\tprivate ParametersInstantiatorInterceptor instantiator;\n\n\tprivate ResourceMethod method;\n\tprivate ResourceMethod otherMethod;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\twhen(localization.getBundle()).thenReturn(bundle);\n\t\twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Collections.emptyList()));\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, params, validator, localization, session, request);\n\n        this.errors = (List<Message>) new Mirror().on(instantiator).get().field(\"errors\");\n        this.method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n        this.otherMethod = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"otherMethod\", int.class));\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\n    \tObject[] values = new Object[] { new Object() };\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n    }\n\n    @Test\n    public void shouldConvertArrayParametersToIndexParameters() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam[].id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam[].id\")).thenReturn(new String[] {\"one\", \"two\", \"three\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(request).setParameter(\"someParam[0].id\", \"one\");\n    \tverify(request).setParameter(\"someParam[1].id\", \"two\");\n    \tverify(request).setParameter(\"someParam[2].id\", \"three\");\n    }\n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\t\tObject[] values = new Object[] { new Object() };\n\n\t\twhen(session.getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS)).thenReturn(values);\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(params).setParameters(values);\n    \tverify(stack).next(method, null);\n    \tverify(validator).addAll(Collections.<Message>emptyList());\n    \tverify(parametersProvider, never()).getParametersFor(method, errors, bundle);\n    \tverify(session).removeAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS);\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n    \tObject[] values = new Object[]{0};\n\n    \twhen(parametersProvider.getParametersFor(otherMethod, errors, bundle)).thenAnswer(addErrorsToListAndReturn(values, \"error1\"));\n\n        instantiator.intercept(stack, otherMethod, null);\n\n        verify(validator).addAll(errors);\n        verify(stack).next(otherMethod, null);\n        verify(params).setParameters(values);\n    }\n\n\t@Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenThrow(new RuntimeException());\n\n        instantiator.intercept(stack, method, null);\n    }\n\n    private <T> Answer<T> addErrorsToListAndReturn(final T value, final String... messages) {\n    \treturn new Answer<T>() {\n\n\t\t\tpublic T answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t};\n\n    }\n}\n","lineNo":119}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.hamcrest.Description;\nimport org.jmock.Expectations;\nimport org.jmock.api.Action;\nimport org.jmock.api.Invocation;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private VRaptorMockery mockery;\n    private ParametersInstantiatorInterceptor instantiator;\n    private MethodInfo params;\n    private ParametersProvider parametersProvider;\n\tprivate Validator validator;\n\tprivate Localization localization;\n\tprivate InterceptorStack stack;\n\tprivate ResourceBundle bundle;\n\tprivate List<Message> errors ;\n\tprivate HttpSession session;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n        this.mockery = new VRaptorMockery();\n        this.params = mockery.mock(MethodInfo.class);\n        this.parametersProvider = mockery.mock(ParametersProvider.class);\n        this.validator = mockery.mock(Validator.class);\n        this.localization = mockery.localization();\n        this.session = mockery.mock(HttpSession.class);\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, params, validator, localization, session);\n        this.stack = mockery.mock(InterceptorStack.class);\n        this.bundle = localization.getBundle();\n\n        Field errorsField = ParametersInstantiatorInterceptor.class.getDeclaredField(\"errors\");\n        errorsField.setAccessible(true);\n\t\tthis.errors = (List<Message>) errorsField.get(this.instantiator);\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n\n        void oneMoreMethod(String a) {\n\n        }\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n        final ResourceMethod method = mockery.methodFor(Component.class, \"method\");\n\n        mockery.checking(new Expectations() {{\n        \tObject[] values = new Object[] { new Object() };\n\n        \tone(parametersProvider).getParametersFor(method, errors, bundle);\n            will(returnValue(values));\n\n            allowing(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(null));\n            one(validator).addAll(Collections.<Message>emptyList());\n            one(stack).next(method, null);\n            one(params).setParameters(values);\n        }});\n\n        instantiator.intercept(stack, method, null);\n        mockery.assertIsSatisfied();\n    }\n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n    \tfinal ResourceMethod method = mockery.methodFor(Component.class, \"method\");\n\n    \tmockery.checking(new Expectations() {{\n    \t\tObject[] values = new Object[] { new Object() };\n\n    \t\tone(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(values));\n    \t\tone(session).removeAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS);\n\n    \t\tnever(parametersProvider).getParametersFor(method, errors, bundle);\n\n    \t\tone(validator).addAll(Collections.<Message>emptyList());\n    \t\tone(stack).next(method, null);\n    \t\tone(params).setParameters(values);\n    \t}});\n\n    \tinstantiator.intercept(stack, method, null);\n    \tmockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n        final ResourceMethod method = mockery.methodFor(Component.class, \"otherMethod\", int.class);\n\n        mockery.checking(new Expectations() {{\n        \tObject[] values = new Object[]{0};\n\n        \tone(parametersProvider).getParametersFor(method, errors, bundle);\n        \twill(doAll(addErrorsToList(\"error1\"),returnValue(values)));\n\n        \tallowing(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(null));\n\n        \tone(validator).addAll(errors);\n            one(stack).next(method, null);\n            one(params).setParameters(values);\n\n        }});\n\n        instantiator.intercept(stack, method, null);\n        mockery.assertIsSatisfied();\n    }\n\n    @Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n        final ResourceMethod method = mockery.methodFor(Component.class, \"method\");\n\n        mockery.checking(new Expectations() {{\n        \tallowing(session).getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS); will(returnValue(null));\n\n        \tone(parametersProvider).getParametersFor(method, errors, bundle);\n        \twill(throwException(new RuntimeException()));\n        }});\n\n        instantiator.intercept(stack, method, null);\n        mockery.assertIsSatisfied();\n    }\n\n    private Action addErrorsToList(final String... messages) {\n    \treturn new Action() {\n\t\t\tpublic void describeTo(Description description) {\n\t\t        description.appendText(\"add something to errors\");\n\t\t    }\n\n\t\t\tpublic Object invoke(Invocation invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t};\n    }\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - wwyhiw.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport static org.mockito.Mockito.never;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.http.HttpSession;\n\nimport net.vidageek.mirror.dsl.Mirror;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Message;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\n\npublic class ParametersInstantiatorInterceptorTest {\n\n    private @Mock MethodInfo params;\n    private @Mock ParametersProvider parametersProvider;\n\tprivate @Mock Validator validator;\n\tprivate @Mock Localization localization;\n\tprivate @Mock InterceptorStack stack;\n\tprivate @Mock ResourceBundle bundle;\n\tprivate @Mock HttpSession session;\n\tprivate @Mock MutableRequest request;\n\n\tprivate List<Message> errors ;\n\tprivate ParametersInstantiatorInterceptor instantiator;\n\n\tprivate ResourceMethod method;\n\tprivate ResourceMethod otherMethod;\n\n\t@Before\n\t@SuppressWarnings(\"unchecked\")\n    public void setup() throws Exception {\n\t\tMockitoAnnotations.initMocks(this);\n\t\twhen(localization.getBundle()).thenReturn(bundle);\n\t\twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Collections.emptyList()));\n\n        this.instantiator = new ParametersInstantiatorInterceptor(parametersProvider, params, validator, localization, session, request);\n\n        this.errors = (List<Message>) new Mirror().on(instantiator).get().field(\"errors\");\n        this.method = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"method\"));\n        this.otherMethod = DefaultResourceMethod.instanceFor(Component.class, Component.class.getDeclaredMethod(\"otherMethod\", int.class));\n    }\n\n    class Component {\n        void method() {\n        }\n        void otherMethod(int oneParam){\n        }\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\n    \tObject[] values = new Object[] { new Object() };\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenReturn(values);\n\n        instantiator.intercept(stack, method, null);\n\n        verify(params).setParameters(values);\n        verify(stack).next(method, null);\n        verify(validator).addAll(Collections.<Message>emptyList());\n    }\n\n    @Test\n    public void shouldConvertArrayParametersToIndexParameters() throws Exception {\n\n    \twhen(request.getParameterNames()).thenReturn(Collections.enumeration(Arrays.asList(\"someParam[].id\", \"unrelatedParam\")));\n    \twhen(request.getParameterValues(\"someParam[].id\")).thenReturn(new String[] {\"one\", \"two\", \"three\"});\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(request).setParameter(\"someParam[0].id\", \"one\");\n    \tverify(request).setParameter(\"someParam[1].id\", \"two\");\n    \tverify(request).setParameter(\"someParam[2].id\", \"three\");\n    }\n    @Test\n    public void shouldUseAndDiscardFlashParameters() throws InterceptionException, IOException, NoSuchMethodException {\n\t\tObject[] values = new Object[] { new Object() };\n\n\t\twhen(session.getAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS)).thenReturn(values);\n\n    \tinstantiator.intercept(stack, method, null);\n\n    \tverify(params).setParameters(values);\n    \tverify(stack).next(method, null);\n    \tverify(validator).addAll(Collections.<Message>emptyList());\n    \tverify(parametersProvider, never()).getParametersFor(method, errors, bundle);\n    \tverify(session).removeAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS);\n    }\n\n    @Test\n    public void shouldValidateParameters() throws Exception {\n    \tObject[] values = new Object[]{0};\n\n    \twhen(parametersProvider.getParametersFor(otherMethod, errors, bundle)).thenAnswer(addErrorsToListAndReturn(values, \"error1\"));\n\n        instantiator.intercept(stack, otherMethod, null);\n\n        verify(validator).addAll(errors);\n        verify(stack).next(otherMethod, null);\n        verify(params).setParameters(values);\n    }\n\n\t@Test(expected=RuntimeException.class)\n    public void shouldThrowException() throws Exception {\n\n    \twhen(parametersProvider.getParametersFor(method, errors, bundle)).thenThrow(new RuntimeException());\n\n        instantiator.intercept(stack, method, null);\n    }\n\n    private <T> Answer<T> addErrorsToListAndReturn(final T value, final String... messages) {\n    \treturn new Answer<T>() {\n\n\t\t\tpublic T answer(InvocationOnMock invocation) throws Throwable {\n\t\t\t\tfor (String message : messages) {\n\t\t\t\t\terrors.add(new ValidationMessage(message, \"test\"));\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\n\t\t};\n\n    }\n}\n","lineNo":134}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.validator;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.MessageInterpolator;\nimport javax.validation.metadata.ConstraintDescriptor;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\n\n/**\n * Implements the {@link BeanValidator} using the JSR303 - BeanValidation. This implementation will be enable by vraptor\n * when the hibernate validator classes is locale in classpath.\n * \n * @author Otávio Scherer Garcia\n * @since 3.1.2\n */\n@RequestScoped\npublic class JSR303Validator\n    implements BeanValidator {\n\n    private static final Logger logger = LoggerFactory.getLogger(JSR303Validator.class);\n\n    // TODO at this time this field is always initialized. see issue 213\n    // we need to write an application scoped component\n    private static final JSR303ValidatorFactory factory = new JSR303ValidatorFactory();\n\n    private final Localization localization;\n\n    public JSR303Validator(Localization localization) {\n        this.localization = localization;\n    }\n\n    public List<Message> validate(Object bean) {\n        if (bean == null) {\n            logger.warn(\"skiping validation, input bean is null.\");\n            return Collections.emptyList(); // skip if the bean is null\n        }\n\n        final Set<ConstraintViolation<Object>> violations = factory.getValidator().validate(bean);\n        logger.debug(\"there are {} violations at bean {}.\", violations.size(), bean);\n\n        List<Message> messages = new ArrayList<Message>();\n        for (ConstraintViolation<Object> violation : violations) {\n            // interpolate the message\n            final Context ctx = new Context(violation.getConstraintDescriptor(), violation.getInvalidValue());\n            String msg = factory.getInterpolator().interpolate(violation.getMessageTemplate(), ctx, localization.getLocale());\n\n            messages.add(new ValidationMessage(msg, violation.getPropertyPath().toString()));\n            logger.debug(\"added message {} to validation of bean {}\", msg, violation.getRootBean());\n        }\n\n        return messages;\n    }\n\n    /**\n     * Create a personalized implementation for {@link javax.validation.MessageInterpolator.Context}. This class is need\n     * to interpolate the constraint violation message with localized messages.\n     * \n     * @author Otávio Scherer Garcia\n     * @version $Revision$\n     */\n    class Context\n        implements MessageInterpolator.Context {\n\n        private final ConstraintDescriptor<?> descriptor;\n        private final Object validatedValue;\n\n        public Context(ConstraintDescriptor<?> descriptor, Object validatedValue) {\n            this.descriptor = descriptor;\n            this.validatedValue = validatedValue;\n        }\n\n        public ConstraintDescriptor<?> getConstraintDescriptor() {\n            return descriptor;\n        }\n\n        public Object getValidatedValue() {\n            return validatedValue;\n        }\n    }\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.validator;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Set;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.MessageInterpolator;\nimport javax.validation.metadata.ConstraintDescriptor;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\n\n/**\n * Implements the {@link BeanValidator} using the JSR303 - BeanValidation. This implementation will be enable by vraptor\n * when the hibernate validator classes is locale in classpath.\n * \n * @author Otávio Scherer Garcia\n * @since 3.1.2\n */\n@RequestScoped\npublic class JSR303Validator\n    implements BeanValidator {\n\n    private static final Logger logger = LoggerFactory.getLogger(JSR303Validator.class);\n\n    // TODO at this time this field is always initialized. see issue 213\n    // we need to write an application scoped component\n    private static final JSR303ValidatorFactory factory = new JSR303ValidatorFactory();\n\n    private final Localization localization;\n\n    public JSR303Validator(Localization localization) {\n        this.localization = localization;\n    }\n\n    public List<Message> validate(Object bean) {\n        if (bean == null) {\n            logger.warn(\"skiping validation, input bean is null.\");\n            return Collections.emptyList(); // skip if the bean is null\n        }\n\n        final Set<ConstraintViolation<Object>> violations = factory.getValidator().validate(bean);\n        logger.debug(\"there are {} violations at bean {}.\", violations.size(), bean);\n\n        Locale locale = localization.getLocale() == null ? Locale.getDefault() : localization.getLocale();\n\n        List<Message> messages = new ArrayList<Message>();\n        for (ConstraintViolation<Object> violation : violations) {\n            // interpolate the message\n            final Context ctx = new Context(violation.getConstraintDescriptor(), violation.getInvalidValue());\n            String msg = factory.getInterpolator().interpolate(violation.getMessageTemplate(), ctx, locale);\n\n            messages.add(new ValidationMessage(msg, violation.getPropertyPath().toString()));\n            logger.debug(\"added message {} to validation of bean {}\", msg, violation.getRootBean());\n        }\n\n        return messages;\n    }\n\n    /**\n     * Create a personalized implementation for {@link javax.validation.MessageInterpolator.Context}. This class is need\n     * to interpolate the constraint violation message with localized messages.\n     * \n     * @author Otávio Scherer Garcia\n     * @version $Revision$\n     */\n    class Context\n        implements MessageInterpolator.Context {\n\n        private final ConstraintDescriptor<?> descriptor;\n        private final Object validatedValue;\n\n        public Context(ConstraintDescriptor<?> descriptor, Object validatedValue) {\n            this.descriptor = descriptor;\n            this.validatedValue = validatedValue;\n        }\n\n        public ConstraintDescriptor<?> getConstraintDescriptor() {\n            return descriptor;\n        }\n\n        public Object getValidatedValue() {\n            return validatedValue;\n        }\n    }\n}\n","lineNo":66}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource - guilherme.silveira@caelum.com.br\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.restfulie.serialization;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport br.com.caelum.vraptor.config.Configuration;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.restfulie.Restfulie;\nimport br.com.caelum.vraptor.serialization.xstream.XStreamXMLSerialization;\n\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.converters.reflection.ReflectionConverter;\n\n/**\n * Custom serialization process provides a way to add links to your resource representations.\n * @author guilherme silveira\n */\n@Component\n@RequestScoped\npublic class RestfulSerialization extends XStreamXMLSerialization {\n\t\n\tprivate final Restfulie restfulie;\n\tprivate final Configuration config;\n\n\tpublic RestfulSerialization(HttpServletResponse response, TypeNameExtractor extractor, Restfulie restfulie, Configuration config) {\n\t\tsuper(response,extractor);\n\t\tthis.restfulie = restfulie;\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * You can override this method for configuring XStream before serialization.\n\t * It configures the xstream instance with a link converter for all StateResource implementations.\n\t */\n\t@Override\n\tprotected XStream getXStream() {\n\t\tXStream xStream = new XStream();\n\t\txStream.registerConverter(new LinkConverter(new ReflectionConverter(xStream.getMapper(), xStream.getReflectionProvider()), restfulie, config));\n\t\treturn xStream;\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource - guilherme.silveira@caelum.com.br\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.restfulie.serialization;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport br.com.caelum.vraptor.config.Configuration;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.restfulie.Restfulie;\nimport br.com.caelum.vraptor.serialization.xstream.XStreamXMLSerialization;\n\nimport com.thoughtworks.xstream.XStream;\nimport com.thoughtworks.xstream.converters.reflection.ReflectionConverter;\n\n/**\n * Custom serialization process provides a way to add links to your resource representations.\n * @author guilherme silveira\n */\n@Component\n@RequestScoped\npublic class RestfulSerialization extends XStreamXMLSerialization {\n\t\n\tprivate final Restfulie restfulie;\n\tprivate final Configuration config;\n\n\tpublic RestfulSerialization(HttpServletResponse response, TypeNameExtractor extractor, Restfulie restfulie, Configuration config) {\n\t\tsuper(response,extractor);\n\t\tthis.restfulie = restfulie;\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * You can override this method for configuring XStream before serialization.\n\t * It configures the xstream instance with a link converter for all StateResource implementations.\n\t */\n\t@Override\n\tprotected XStream getXStream() {\n\t\tXStream xStream = new XStream();\n\t\tMethodValueSupportConverter converter = new MethodValueSupportConverter(new ReflectionConverter(xStream.getMapper(), xStream.getReflectionProvider()));\n\t\txStream.registerConverter(new LinkConverter(converter, restfulie, config));\n\t\treturn xStream;\n\t}\n\n}\n","lineNo":56}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.deserialization;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.Container;\n\n/**\n * A set of deserializers.\n *\n * @author Lucas Cavalcanti\n * @author Ricardo Nakamura\n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class DefaultDeserializers implements Deserializers {\n\n\tprivate final Map<String, Class<? extends Deserializer>> deserializers = new HashMap<String, Class<? extends Deserializer>>();\n\n\tpublic DefaultDeserializers() {\n\t\tfor (Class<? extends Deserializer> type : BaseComponents.getDeserializers()) {\n\t\t\tregister(type);\n\t\t}\n\t}\n\t\n\tpublic Deserializer deserializerFor(String contentType, Container container) {\n\t\tif (deserializers.containsKey(contentType)) {\n\t\t\treturn container.instanceFor(deserializers.get(contentType));\n\t\t}\n\t\tif(contentType.contains(\"/\")) {\n\t\t\tcontentType = removeChar(contentType, \"/\");\n\t\t\tif (deserializers.containsKey(contentType)) {\n\t\t\t\treturn container.instanceFor(deserializers.get(contentType));\n\t\t\t}\n\t\t}\n\t\tif(contentType.contains(\"+\")) {\n\t\t\tcontentType = removeChar(contentType, \"+\");\n\t\t\tif (deserializers.containsKey(contentType)) {\n\t\t\t\treturn container.instanceFor(deserializers.get(contentType));\n\t\t\t}\n\t\t}\n\t\tthrow new VRaptorException(\"There is no deserializer for the content type \" + contentType);\n\t}\n\n\tprivate String removeChar(String type, String by) {\n\t\treturn type.substring(type.lastIndexOf(by)+1);\n\t}\n\n\tprivate String parse(String contentType) {\n\t\treturn contentType.replace(\"(.*[\\\\+\\\\/])?(.*)\", \"$2\");\n\t}\n\tpublic void register(Class<? extends Deserializer> type) {\n\t\tif (!type.isAnnotationPresent(Deserializes.class)) {\n\t\t\tthrow new IllegalArgumentException(\"You must annotate your deserializers with @Deserializes\");\n\t\t}\n\n\t\tString[] contentTypes = type.getAnnotation(Deserializes.class).value();\n\n\t\tfor (String contentType : contentTypes) {\n\t\t\tdeserializers.put(contentType, type);\n\t\t}\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.deserialization;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.Container;\n\n/**\n * A set of deserializers.\n *\n * @author Lucas Cavalcanti\n * @author Ricardo Nakamura\n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class DefaultDeserializers implements Deserializers {\n\n\tprivate final Map<String, Class<? extends Deserializer>> deserializers = new HashMap<String, Class<? extends Deserializer>>();\n\n\tpublic DefaultDeserializers() {\n\t\tfor (Class<? extends Deserializer> type : BaseComponents.getDeserializers()) {\n\t\t\tregister(type);\n\t\t}\n\t}\n\t\n\tpublic Deserializer deserializerFor(String contentType, Container container) {\n\t\tif (deserializers.containsKey(contentType)) {\n\t\t\treturn container.instanceFor(deserializers.get(contentType));\n\t\t}\n\t\treturn subpathDeserializerFor(contentType, container);\n\t}\n\n\tprivate Deserializer subpathDeserializerFor(String contentType,\n\t\t\tContainer container) {\n\t\tif(contentType.contains(\"/\")) {\n\t\t\tcontentType = removeChar(contentType, \"/\");\n\t\t\tif (deserializers.containsKey(contentType)) {\n\t\t\t\tClass<? extends Deserializer> type = deserializers.get(contentType);\n\t\t\t\treturn container.instanceFor(type);\n\t\t\t}\n\t\t}\n\t\treturn subpathDeserializerForPlus(contentType, container);\n\t}\n\n\tprivate Deserializer subpathDeserializerForPlus(String contentType,\n\t\t\tContainer container) {\n\t\tif(contentType.contains(\"+\")) {\n\t\t\tcontentType = removeChar(contentType, \"+\");\n\t\t\tif (deserializers.containsKey(contentType)) {\n\t\t\t\treturn container.instanceFor(deserializers.get(contentType));\n\t\t\t}\n\t\t}\n\t\tthrow new VRaptorException(\"There is no deserializer for the content type \" + contentType);\n\t}\n\n\tprivate String removeChar(String type, String by) {\n\t\treturn type.substring(type.lastIndexOf(by)+1);\n\t}\n\n\tpublic void register(Class<? extends Deserializer> type) {\n\t\tif (!type.isAnnotationPresent(Deserializes.class)) {\n\t\t\tthrow new IllegalArgumentException(\"You must annotate your deserializers with @Deserializes\");\n\t\t}\n\n\t\tString[] contentTypes = type.getAnnotation(Deserializes.class).value();\n\n\t\tfor (String contentType : contentTypes) {\n\t\t\tdeserializers.put(contentType, type);\n\t\t}\n\t}\n\n}\n","lineNo":56}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport java.util.Arrays;\nimport java.util.Map;\n\nimport javax.servlet.ServletContext;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.aop.scope.ScopedProxyUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.AbstractBeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.annotation.ScopeMetadata;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.context.support.AbstractRefreshableWebApplicationContext;\nimport org.springframework.web.context.support.WebApplicationContextUtils;\n\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.config.BasicConfiguration;\nimport br.com.caelum.vraptor.converter.jodatime.LocalDateConverter;\nimport br.com.caelum.vraptor.converter.jodatime.LocalTimeConverter;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.StereotypeHandler;\n\n/**\n * @author Fabio Kung\n */\npublic class VRaptorApplicationContext extends AbstractRefreshableWebApplicationContext {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(VRaptorApplicationContext.class);\n\n\tpublic static final String RESOURCES_LIST = \"br.com.caelum.vraptor.resources.list\";\n\n\tprivate final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n\tprivate final SpringBasedContainer container;\n\tprivate final BasicConfiguration config;\n\n\tpublic VRaptorApplicationContext(SpringBasedContainer container, BasicConfiguration config) {\n\t\tthis.container = container;\n\t\tthis.config = config;\n\t}\n\n\t@Override\n\tprotected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n\t\tWebApplicationContextUtils.registerWebApplicationScopes(beanFactory);\n\t}\n\n\t@Override\n\tprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {\n\t\tbeanFactory.registerSingleton(ServletContext.class.getName(), config.getServletContext());\n\t\t// beanFactory.ignoreDependencyType(ServletContext.class);\n\n\t\tregisterApplicationScopedComponentsOn(beanFactory);\n\t\tregisterRequestScopedComponentsOn(beanFactory);\n\t\tregisterPrototypeScopedComponentsOn(beanFactory);\n\t\tregisterCustomComponentsOn(beanFactory);\n\n\t\t{\n\t\t\tlogger.info(\"Scanning WEB-INF/classes: \" + config.getWebinfClassesDirectory());\n\t\t\tComponentScanner scanner = new ComponentScanner(beanFactory, container);\n\t\t\tscanner.setResourcePattern(\"**/*.class\");\n\t\t\tscanner.setResourceLoader(new WebinfClassesPatternResolver(config.getWebinfClassesDirectory()));\n\t\t\tscanner.scan(\"\");\n\t\t}\n\t\tif (config.hasBasePackages()) {\n\t\t\tComponentScanner scanner = new ComponentScanner(beanFactory, container);\n\t\t\tlogger\n\t\t\t\t\t.info(\"Scanning packages from WEB-INF/classes and jars: \"\n\t\t\t\t\t\t\t+ Arrays.toString(config.getBasePackages()));\n\t\t\tscanner.scan(config.getBasePackages());\n\t\t}\n\n\t\tAnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);\n\t\tAopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(beanFactory);\n\t\tregisterCustomInjectionProcessor(beanFactory);\n\t\tregisterCachedComponentsOn(beanFactory);\n\t}\n\n\tprivate void registerCustomComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : container.getToRegister()) {\n\t\t\tregister(type, beanFactory);\n\t\t}\n\t}\n\n\tprivate void registerPrototypeScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> prototypeComponent : BaseComponents.getPrototypeScoped().values()) {\n\t\t\tregisterOn(beanFactory, prototypeComponent);\n\t\t}\n\t}\n\n\tprivate void registerCachedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> cachedComponent : BaseComponents.getCachedComponents().values()) {\n\t\t\tregisterOn(beanFactory, cachedComponent, true);\n\t\t}\n\t}\n\n\tprivate void registerApplicationScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : BaseComponents.getApplicationScoped().values()) {\n\t\t\tregisterOn(beanFactory, type);\n\t\t\tregisterFactory(type, beanFactory);\n\t\t}\n\n\t\tfor (Class<? extends StereotypeHandler> handlerType : BaseComponents.getStereotypeHandlers()) {\n\t\t\tregisterOn(beanFactory, handlerType);\n\t\t}\n\n\t\tregisterOn(beanFactory, StereotypedBeansRegistrar.class);\n\t\tregisterOn(beanFactory, DefaultSpringLocator.class);\n\n\n\t\tconfig.getServletContext();\n\t}\n\n\tprivate void registerRequestScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : BaseComponents.getRequestScoped().values()) {\n\t\t\tregisterOn(beanFactory, type);\n\t\t\tregisterFactory(type, beanFactory);\n\t\t}\n\n\t\tfor (Class<? extends Converter<?>> converterType : BaseComponents.getBundledConverters()) {\n\t\t\tregisterOn(beanFactory, converterType);\n\t\t}\n\n\t\tregisterOn(beanFactory, VRaptorRequestProvider.class, true);\n\t\tregisterOn(beanFactory, HttpServletRequestProvider.class, true);\n\t\tregisterOn(beanFactory, HttpServletResponseProvider.class, true);\n\t\tregisterOn(beanFactory, HttpSessionProvider.class, true);\n\n\t\tbeanFactory.registerSingleton(SpringBasedContainer.class.getName(), container);\n\n\t\ttry {\n\t\t\tClass.forName(\"org.joda.time.LocalDate\");\n\t\t\tregisterOn(beanFactory, LocalDateConverter.class);\n\t\t\tregisterOn(beanFactory, LocalTimeConverter.class);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// OK, only register jodatime converters if jodatime is imported\n\t\t}\n\t}\n\n\tprivate void register(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n\t\tregisterOn((BeanDefinitionRegistry) beanFactory, type, true);\n\t\tregisterFactory(type, beanFactory);\n\t}\n\n\tprivate void registerFactory(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n\t\tif (ComponentFactory.class.isAssignableFrom(type)) {\n\t\t\tbeanFactory.registerSingleton(type.getName(), new ComponentFactoryBean(container, type));\n\t\t}\n\t}\n\n\tpublic void register(Class<?> type) {\n\t\tregister(type, getBeanFactory());\n\t}\n\n\tprivate void registerOn(BeanDefinitionRegistry registry, Class<?> type) {\n\t\tregisterOn(registry, type, false);\n\t}\n\n\tprivate void registerOn(BeanDefinitionRegistry registry, Class<?> type, boolean customComponent) {\n\t\tAnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n\t\tdefinition.setLazyInit(true);\n\t\tdefinition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_NO);\n\t\tif (customComponent) {\n\t\t\tdefinition.setPrimary(true);\n\t\t\tdefinition.setRole(BeanDefinition.ROLE_APPLICATION);\n\t\t} else {\n\t\t\tdefinition.setPrimary(false);\n\t\t\tdefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\t}\n\n\t\tString name = beanNameGenerator.generateBeanName(definition, registry);\n\t\tBeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name);\n\n\t\tVRaptorScopeResolver scopeResolver = new VRaptorScopeResolver();\n\t\tScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition);\n\t\tdefinitionHolder = applyScopeOn(registry, definitionHolder, scopeMetadata);\n\n\t\tBeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry);\n\t}\n\n\t/**\n\t * From\n\t * org.springframework.context.annotation.ClassPathBeanDefinitionScanner\n\t * #applyScope()\n\t *\n\t * @param definition\n\t * @param scopeMetadata\n\t * @return\n\t */\n\tprivate BeanDefinitionHolder applyScopeOn(BeanDefinitionRegistry registry, BeanDefinitionHolder definition,\n\t\t\tScopeMetadata scopeMetadata) {\n\t\tString scope = scopeMetadata.getScopeName();\n\t\tScopedProxyMode proxyMode = scopeMetadata.getScopedProxyMode();\n\t\tdefinition.getBeanDefinition().setScope(scope);\n\t\tif (BeanDefinition.SCOPE_SINGLETON.equals(scope) || BeanDefinition.SCOPE_PROTOTYPE.equals(scope)\n\t\t\t\t|| proxyMode.equals(ScopedProxyMode.NO)) {\n\t\t\treturn definition;\n\t\t} else {\n\t\t\tboolean proxyTargetClass = proxyMode.equals(ScopedProxyMode.TARGET_CLASS);\n\t\t\treturn ScopedProxyUtils.createScopedProxy(definition, registry, proxyTargetClass);\n\t\t}\n\t}\n\n\tprivate void registerCustomInjectionProcessor(BeanDefinitionRegistry registry) {\n\t\tRootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n\t\tdefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\tdefinition.getPropertyValues().addPropertyValue(\"order\", Ordered.LOWEST_PRECEDENCE);\n\t\tregistry.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n\t}\n\n\tpublic <T> T getBean(Class<T> type) {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<String, ? extends T> instances = BeanFactoryUtils.beansOfTypeIncludingAncestors(this, type);\n\t\tif (instances.size() == 0) {\n\t\t\tthrow new NoSuchBeanDefinitionException(type, \"no bean for this type registered\");\n\t\t} else if (instances.size() == 1) {\n\t\t\treturn instances.values().iterator().next();\n\t\t} else {\n\t\t\tfor (Map.Entry<String, ? extends T> entry : instances.entrySet()) {\n\t\t\t\tBeanDefinition definition = getBeanFactory().getBeanDefinition(entry.getKey());\n\t\t\t\tif (isPrimary(definition)) {\n\t\t\t\t\treturn entry.getValue();\n\t\t\t\t} else if (hasGreaterRoleThanInfrastructure(definition)) {\n\t\t\t\t\treturn entry.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new NoSuchBeanDefinitionException(\"there are \" + instances.size() + \" implementations for the type [\"\n\t\t\t\t\t+ type\n\t\t\t\t\t+ \"], but none of them is primary or has a Role greater than BeanDefinition.ROLE_INFRASTRUCTURE\");\n\t\t}\n\t}\n\n\tprivate boolean isPrimary(BeanDefinition definition) {\n\t\treturn definition instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) definition).isPrimary();\n\t}\n\n\tprivate boolean hasGreaterRoleThanInfrastructure(BeanDefinition definition) {\n\t\treturn definition.getRole() < BeanDefinition.ROLE_INFRASTRUCTURE;\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport java.util.Arrays;\nimport java.util.Map;\n\nimport javax.servlet.ServletContext;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.aop.scope.ScopedProxyUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.AbstractBeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.annotation.ScopeMetadata;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.context.support.AbstractRefreshableWebApplicationContext;\nimport org.springframework.web.context.support.WebApplicationContextUtils;\n\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.config.BasicConfiguration;\nimport br.com.caelum.vraptor.converter.jodatime.LocalDateConverter;\nimport br.com.caelum.vraptor.converter.jodatime.LocalTimeConverter;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.StereotypeHandler;\n\n/**\n * @author Fabio Kung\n */\npublic class VRaptorApplicationContext extends AbstractRefreshableWebApplicationContext {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(VRaptorApplicationContext.class);\n\n\tpublic static final String RESOURCES_LIST = \"br.com.caelum.vraptor.resources.list\";\n\n\tprivate final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n\tprivate final SpringBasedContainer container;\n\tprivate final BasicConfiguration config;\n\n\tpublic VRaptorApplicationContext(SpringBasedContainer container, BasicConfiguration config) {\n\t\tthis.container = container;\n\t\tthis.config = config;\n\t}\n\n\t@Override\n\tprotected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n\t\tWebApplicationContextUtils.registerWebApplicationScopes(beanFactory);\n\t}\n\n\t@Override\n\tprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {\n\t\tbeanFactory.registerSingleton(ServletContext.class.getName(), config.getServletContext());\n\t\t// beanFactory.ignoreDependencyType(ServletContext.class);\n\n\t\tregisterApplicationScopedComponentsOn(beanFactory);\n\t\tregisterRequestScopedComponentsOn(beanFactory);\n\t\tregisterPrototypeScopedComponentsOn(beanFactory);\n\t\tregisterCustomComponentsOn(beanFactory);\n\n\t\t{\n\t\t\tString directory = config.getWebinfClassesDirectory();\n\t\t\tif (directory != null) {\n\t\t\t\tlogger.info(\"Scanning WEB-INF/classes: \" + directory);\n\t\t\t\tComponentScanner scanner = new ComponentScanner(beanFactory, container);\n\t\t\t\tscanner.setResourcePattern(\"**/*.class\");\n\t\t\t\tscanner.setResourceLoader(new WebinfClassesPatternResolver(config.getWebinfClassesDirectory()));\n\t\t\t\tscanner.scan(\"\");\n\t\t\t} else {\n\t\t\t\tlogger\n\t\t\t\t\t\t.warn(\"Cant invoke ServletContext.getRealPath. Some application servers, as WebLogic, must be configured to be able to do so.\"\n\t\t\t\t\t\t\t\t+ \"Not scanning WEB-INF/classes for VRaptor and Spring components.\");\n\t\t\t}\n\n\t\t}\n\t\tif (config.hasBasePackages()) {\n\t\t\tComponentScanner scanner = new ComponentScanner(beanFactory, container);\n\t\t\tlogger\n\t\t\t\t\t.info(\"Scanning packages from WEB-INF/classes and jars: \"\n\t\t\t\t\t\t\t+ Arrays.toString(config.getBasePackages()));\n\t\t\tscanner.scan(config.getBasePackages());\n\t\t}\n\n\t\tAnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);\n\t\tAopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(beanFactory);\n\t\tregisterCustomInjectionProcessor(beanFactory);\n\t\tregisterCachedComponentsOn(beanFactory);\n\t}\n\n\tprivate void registerCustomComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : container.getToRegister()) {\n\t\t\tregister(type, beanFactory);\n\t\t}\n\t}\n\n\tprivate void registerPrototypeScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> prototypeComponent : BaseComponents.getPrototypeScoped().values()) {\n\t\t\tregisterOn(beanFactory, prototypeComponent);\n\t\t}\n\t}\n\n\tprivate void registerCachedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> cachedComponent : BaseComponents.getCachedComponents().values()) {\n\t\t\tregisterOn(beanFactory, cachedComponent, true);\n\t\t}\n\t}\n\n\tprivate void registerApplicationScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : BaseComponents.getApplicationScoped().values()) {\n\t\t\tregisterOn(beanFactory, type);\n\t\t\tregisterFactory(type, beanFactory);\n\t\t}\n\n\t\tfor (Class<? extends StereotypeHandler> handlerType : BaseComponents.getStereotypeHandlers()) {\n\t\t\tregisterOn(beanFactory, handlerType);\n\t\t}\n\n\t\tregisterOn(beanFactory, StereotypedBeansRegistrar.class);\n\t\tregisterOn(beanFactory, DefaultSpringLocator.class);\n\n\t\tconfig.getServletContext();\n\t}\n\n\tprivate void registerRequestScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : BaseComponents.getRequestScoped().values()) {\n\t\t\tregisterOn(beanFactory, type);\n\t\t\tregisterFactory(type, beanFactory);\n\t\t}\n\n\t\tfor (Class<? extends Converter<?>> converterType : BaseComponents.getBundledConverters()) {\n\t\t\tregisterOn(beanFactory, converterType);\n\t\t}\n\n\t\tregisterOn(beanFactory, VRaptorRequestProvider.class, true);\n\t\tregisterOn(beanFactory, HttpServletRequestProvider.class, true);\n\t\tregisterOn(beanFactory, HttpServletResponseProvider.class, true);\n\t\tregisterOn(beanFactory, HttpSessionProvider.class, true);\n\n\t\tbeanFactory.registerSingleton(SpringBasedContainer.class.getName(), container);\n\n\t\ttry {\n\t\t\tClass.forName(\"org.joda.time.LocalDate\");\n\t\t\tregisterOn(beanFactory, LocalDateConverter.class);\n\t\t\tregisterOn(beanFactory, LocalTimeConverter.class);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// OK, only register jodatime converters if jodatime is imported\n\t\t}\n\t}\n\n\tprivate void register(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n\t\tregisterOn((BeanDefinitionRegistry) beanFactory, type, true);\n\t\tregisterFactory(type, beanFactory);\n\t}\n\n\tprivate void registerFactory(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n\t\tif (ComponentFactory.class.isAssignableFrom(type)) {\n\t\t\tbeanFactory.registerSingleton(type.getName(), new ComponentFactoryBean(container, type));\n\t\t}\n\t}\n\n\tpublic void register(Class<?> type) {\n\t\tregister(type, getBeanFactory());\n\t}\n\n\tprivate void registerOn(BeanDefinitionRegistry registry, Class<?> type) {\n\t\tregisterOn(registry, type, false);\n\t}\n\n\tprivate void registerOn(BeanDefinitionRegistry registry, Class<?> type, boolean customComponent) {\n\t\tAnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n\t\tdefinition.setLazyInit(true);\n\t\tdefinition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_NO);\n\t\tif (customComponent) {\n\t\t\tdefinition.setPrimary(true);\n\t\t\tdefinition.setRole(BeanDefinition.ROLE_APPLICATION);\n\t\t} else {\n\t\t\tdefinition.setPrimary(false);\n\t\t\tdefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\t}\n\n\t\tString name = beanNameGenerator.generateBeanName(definition, registry);\n\t\tBeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name);\n\n\t\tVRaptorScopeResolver scopeResolver = new VRaptorScopeResolver();\n\t\tScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition);\n\t\tdefinitionHolder = applyScopeOn(registry, definitionHolder, scopeMetadata);\n\n\t\tBeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry);\n\t}\n\n\t/**\n\t * From\n\t * org.springframework.context.annotation.ClassPathBeanDefinitionScanner\n\t * #applyScope()\n\t * \n\t * @param definition\n\t * @param scopeMetadata\n\t * @return\n\t */\n\tprivate BeanDefinitionHolder applyScopeOn(BeanDefinitionRegistry registry, BeanDefinitionHolder definition,\n\t\t\tScopeMetadata scopeMetadata) {\n\t\tString scope = scopeMetadata.getScopeName();\n\t\tScopedProxyMode proxyMode = scopeMetadata.getScopedProxyMode();\n\t\tdefinition.getBeanDefinition().setScope(scope);\n\t\tif (BeanDefinition.SCOPE_SINGLETON.equals(scope) || BeanDefinition.SCOPE_PROTOTYPE.equals(scope)\n\t\t\t\t|| proxyMode.equals(ScopedProxyMode.NO)) {\n\t\t\treturn definition;\n\t\t} else {\n\t\t\tboolean proxyTargetClass = proxyMode.equals(ScopedProxyMode.TARGET_CLASS);\n\t\t\treturn ScopedProxyUtils.createScopedProxy(definition, registry, proxyTargetClass);\n\t\t}\n\t}\n\n\tprivate void registerCustomInjectionProcessor(BeanDefinitionRegistry registry) {\n\t\tRootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n\t\tdefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\tdefinition.getPropertyValues().addPropertyValue(\"order\", Ordered.LOWEST_PRECEDENCE);\n\t\tregistry.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n\t}\n\n\tpublic <T> T getBean(Class<T> type) {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<String, ? extends T> instances = BeanFactoryUtils.beansOfTypeIncludingAncestors(this, type);\n\t\tif (instances.size() == 0) {\n\t\t\tthrow new NoSuchBeanDefinitionException(type, \"no bean for this type registered\");\n\t\t} else if (instances.size() == 1) {\n\t\t\treturn instances.values().iterator().next();\n\t\t} else {\n\t\t\tfor (Map.Entry<String, ? extends T> entry : instances.entrySet()) {\n\t\t\t\tBeanDefinition definition = getBeanFactory().getBeanDefinition(entry.getKey());\n\t\t\t\tif (isPrimary(definition)) {\n\t\t\t\t\treturn entry.getValue();\n\t\t\t\t} else if (hasGreaterRoleThanInfrastructure(definition)) {\n\t\t\t\t\treturn entry.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new NoSuchBeanDefinitionException(\"there are \" + instances.size() + \" implementations for the type [\"\n\t\t\t\t\t+ type\n\t\t\t\t\t+ \"], but none of them is primary or has a Role greater than BeanDefinition.ROLE_INFRASTRUCTURE\");\n\t\t}\n\t}\n\n\tprivate boolean isPrimary(BeanDefinition definition) {\n\t\treturn definition instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) definition).isPrimary();\n\t}\n\n\tprivate boolean hasGreaterRoleThanInfrastructure(BeanDefinition definition) {\n\t\treturn definition.getRole() < BeanDefinition.ROLE_INFRASTRUCTURE;\n\t}\n}\n","lineNo":90}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.view;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Type;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.Get;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.ProxyInvocationException;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\n\n/**\n * The default implementation of LogicResult.<br>\n * Uses cglib to provide proxies for client side redirect (url creation).\n *\n * @author Guilherme Silveira\n */\npublic class DefaultLogicResult implements LogicResult {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(DefaultLogicResult.class);\n\n\tprivate final Proxifier proxifier;\n\tprivate final Router router;\n\tprivate final MutableRequest request;\n\tprivate final HttpServletResponse response;\n\tprivate final Container container;\n\tprivate final PathResolver resolver;\n\tprivate final TypeNameExtractor extractor;\n\n\tpublic DefaultLogicResult(Proxifier proxifier, Router router, MutableRequest request, HttpServletResponse response,\n\t\t\tContainer container, PathResolver resolver, TypeNameExtractor extractor) {\n\t\tthis.proxifier = proxifier;\n\t\tthis.response = response;\n\t\tthis.request = request;\n\t\tthis.router = router;\n\t\tthis.container = container;\n\t\tthis.resolver = resolver;\n\t\tthis.extractor = extractor;\n\t}\n\n\t/**\n\t * This implementation don't actually use request dispatcher for the\n\t * forwarding. It runs forwarding logic, and renders its <b>default<\/b>\n\t * view.\n\t */\n\tpublic <T> T forwardTo(final Class<T> type) {\n\t\tlogger.debug(\"forwarding to class {}\", type.getSimpleName());\n\n\t\treturn proxifier.proxify(type, new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\ttry {\n\t\t\t\t\tObject result = method.invoke(container.instanceFor(type), args);\n\t\t\t\t\tType returnType = method.getGenericReturnType();\n\t\t\t\t\tif (!(returnType == void.class)) {\n\t\t\t\t\t\trequest.setAttribute(extractor.nameFor(returnType), result);\n\t\t\t\t\t}\n\t\t\t\t\tif (!response.isCommitted()) {\n\t\t\t\t\t\trequest.getRequestDispatcher(resolver.pathFor(DefaultResourceMethod.instanceFor(type, method)))\n\t\t\t\t\t\t\t\t.forward(request, response);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new ProxyInvocationException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate <T> void includeParametersInFlash(final Class<T> type, Method method, Object[] args) {\n\t\trequest.getSession().setAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS, args);\n\t}\n\n\tpublic <T> T redirectTo(final Class<T> type) {\n\t\tlogger.debug(\"redirecting to class {}\", type.getSimpleName());\n\n\t\treturn proxifier.proxify(type, new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tif (!acceptsHttpGet(method)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\t\"Your logic method must accept HTTP GET method if you want to redirect to it\");\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tString path = request.getContextPath();\n\t\t\t\t\tString url = router.urlFor(type, method, args);\n\t\t\t\t\tincludeParametersInFlash(type, method, args);\n\t\t\t\t\tresponse.sendRedirect(path + url);\n\t\t\t\t\treturn null;\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new ProxyInvocationException(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\t}\n\n\tprivate boolean acceptsHttpGet(Method method) {\n\t\tif (method.isAnnotationPresent(Get.class)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (HttpMethod httpMethod : HttpMethod.values()) {\n\t\t\tif (method.isAnnotationPresent(httpMethod.getAnnotation())) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.view;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Type;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.Get;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.ProxyInvocationException;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\n\n/**\n * The default implementation of LogicResult.<br>\n * Uses cglib to provide proxies for client side redirect (url creation).\n *\n * @author Guilherme Silveira\n */\npublic class DefaultLogicResult implements LogicResult {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(DefaultLogicResult.class);\n\n\tprivate final Proxifier proxifier;\n\tprivate final Router router;\n\tprivate final MutableRequest request;\n\tprivate final HttpServletResponse response;\n\tprivate final Container container;\n\tprivate final PathResolver resolver;\n\tprivate final TypeNameExtractor extractor;\n\n\tpublic DefaultLogicResult(Proxifier proxifier, Router router, MutableRequest request, HttpServletResponse response,\n\t\t\tContainer container, PathResolver resolver, TypeNameExtractor extractor) {\n\t\tthis.proxifier = proxifier;\n\t\tthis.response = response;\n\t\tthis.request = request;\n\t\tthis.router = router;\n\t\tthis.container = container;\n\t\tthis.resolver = resolver;\n\t\tthis.extractor = extractor;\n\t}\n\n\t/**\n\t * This implementation don't actually use request dispatcher for the\n\t * forwarding. It runs forwarding logic, and renders its <b>default<\/b>\n\t * view.\n\t */\n\tpublic <T> T forwardTo(final Class<T> type) {\n\t\tlogger.debug(\"forwarding to class {}\", type.getSimpleName());\n\n\t\treturn proxifier.proxify(type, new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\ttry {\n\t\t\t\t\tObject result = method.invoke(container.instanceFor(type), args);\n\t\t\t\t\tType returnType = method.getGenericReturnType();\n\t\t\t\t\tif (!(returnType == void.class)) {\n\t\t\t\t\t\trequest.setAttribute(extractor.nameFor(returnType), result);\n\t\t\t\t\t}\n\t\t\t\t\tif (!response.isCommitted()) {\n\t\t\t\t\t\tString path = resolver.pathFor(DefaultResourceMethod.instanceFor(type, method));\n\t\t\t\t\t\tlogger.debug(\"forwarding to  {}\", path);\n\t\t\t\t\t\trequest.getRequestDispatcher(path).forward(request, response);\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new ProxyInvocationException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate <T> void includeParametersInFlash(final Class<T> type, Method method, Object[] args) {\n\t\trequest.getSession().setAttribute(ParametersInstantiatorInterceptor.FLASH_PARAMETERS, args);\n\t}\n\n\tpublic <T> T redirectTo(final Class<T> type) {\n\t\tlogger.debug(\"redirecting to class {}\", type.getSimpleName());\n\n\t\treturn proxifier.proxify(type, new MethodInvocation<T>() {\n\t\t\tpublic Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tif (!acceptsHttpGet(method)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\t\"Your logic method must accept HTTP GET method if you want to redirect to it\");\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tString path = request.getContextPath();\n\t\t\t\t\tString url = router.urlFor(type, method, args);\n\t\t\t\t\tincludeParametersInFlash(type, method, args);\n\n\t\t\t\t\tpath = path + url;\n\n\t\t\t\t\tlogger.debug(\"redirecting to {}\", path);\n\t\t\t\t\tresponse.sendRedirect(path);\n\t\t\t\t\treturn null;\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new ProxyInvocationException(e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t});\n\t}\n\n\tprivate boolean acceptsHttpGet(Method method) {\n\t\tif (method.isAnnotationPresent(Get.class)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (HttpMethod httpMethod : HttpMethod.values()) {\n\t\t\tif (method.isAnnotationPresent(httpMethod.getAnnotation())) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n}\n","lineNo":88}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.lang.reflect.Type;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Outjects the result of the method invocation to the desired result\n *\n * @author guilherme silveira\n */\npublic class OutjectResult implements Interceptor {\n\n\tprivate final Result result;\n\tprivate final MethodInfo info;\n\tprivate final TypeNameExtractor extractor;\n\n\tpublic OutjectResult(Result result, MethodInfo info, TypeNameExtractor extractor) {\n\t\tthis.result = result;\n\t\tthis.info = info;\n\t\tthis.extractor = extractor;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn method.getResource().getType().isAnnotationPresent(Resource.class);\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tType returnType = method.getMethod().getGenericReturnType();\n\t\tif (!returnType.equals(void.class)) {\n\t\t\tresult.include(extractor.nameFor(returnType), this.info.getResult());\n\t\t}\n\t\tstack.next(method, resourceInstance);\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.lang.reflect.Type;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Outjects the result of the method invocation to the desired result\n *\n * @author guilherme silveira\n */\npublic class OutjectResult implements Interceptor {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(OutjectResult.class);\n\n\tprivate final Result result;\n\tprivate final MethodInfo info;\n\tprivate final TypeNameExtractor extractor;\n\n\tpublic OutjectResult(Result result, MethodInfo info, TypeNameExtractor extractor) {\n\t\tthis.result = result;\n\t\tthis.info = info;\n\t\tthis.extractor = extractor;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn method.getResource().getType().isAnnotationPresent(Resource.class);\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tType returnType = method.getMethod().getGenericReturnType();\n\t\tif (!returnType.equals(void.class)) {\n\t\t\tString name = extractor.nameFor(returnType);\n\t\t\tObject value = this.info.getResult();\n\n\t\t\tlogger.debug(\"outjecting {}={}\", name, value);\n\t\t\tresult.include(name, value);\n\t\t}\n\t\tstack.next(method, resourceInstance);\n\t}\n\n}\n","lineNo":59}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.lang.reflect.Type;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Outjects the result of the method invocation to the desired result\n *\n * @author guilherme silveira\n */\npublic class OutjectResult implements Interceptor {\n\n\tprivate final Result result;\n\tprivate final MethodInfo info;\n\tprivate final TypeNameExtractor extractor;\n\n\tpublic OutjectResult(Result result, MethodInfo info, TypeNameExtractor extractor) {\n\t\tthis.result = result;\n\t\tthis.info = info;\n\t\tthis.extractor = extractor;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn method.getResource().getType().isAnnotationPresent(Resource.class);\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tType returnType = method.getMethod().getGenericReturnType();\n\t\tif (!returnType.equals(void.class)) {\n\t\t\tresult.include(extractor.nameFor(returnType), this.info.getResult());\n\t\t}\n\t\tstack.next(method, resourceInstance);\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.lang.reflect.Type;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Outjects the result of the method invocation to the desired result\n *\n * @author guilherme silveira\n */\npublic class OutjectResult implements Interceptor {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(OutjectResult.class);\n\n\tprivate final Result result;\n\tprivate final MethodInfo info;\n\tprivate final TypeNameExtractor extractor;\n\n\tpublic OutjectResult(Result result, MethodInfo info, TypeNameExtractor extractor) {\n\t\tthis.result = result;\n\t\tthis.info = info;\n\t\tthis.extractor = extractor;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn method.getResource().getType().isAnnotationPresent(Resource.class);\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tType returnType = method.getMethod().getGenericReturnType();\n\t\tif (!returnType.equals(void.class)) {\n\t\t\tString name = extractor.nameFor(returnType);\n\t\t\tObject value = this.info.getResult();\n\n\t\t\tlogger.debug(\"outjecting {}={}\", name, value);\n\t\t\tresult.include(name, value);\n\t\t}\n\t\tstack.next(method, resourceInstance);\n\t}\n\n}\n","lineNo":60}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.view;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletResponse;\n\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.ProxyInvocationException;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Default page result implementation.\n *\n * @author Guilherme Silveira\n * @author Lucas Cavalcanti\n */\npublic class DefaultPageResult implements PageResult {\n\n    private final MutableRequest request;\n    private final HttpServletResponse response;\n    private final ResourceMethod method;\n    private final PathResolver resolver;\n\tprivate final Proxifier proxifier;\n\n    public DefaultPageResult(MutableRequest req, HttpServletResponse res, MethodInfo requestInfo,\n            PathResolver resolver, Proxifier proxifier) {\n        this.request = req;\n        this.response = res;\n\t\tthis.proxifier = proxifier;\n        this.method = requestInfo.getResourceMethod();\n        this.resolver = resolver;\n    }\n\n    public void forward() {\n        try {\n            request.getRequestDispatcher(resolver.pathFor(method)).forward(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n    public void include() {\n        try {\n            request.getRequestDispatcher(resolver.pathFor(method)).include(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n    public void redirect(String url) {\n        try {\n        \tif (url.startsWith(\"/\")) {\n\t\t\t\tresponse.sendRedirect(request.getContextPath() + url);\n\t\t\t} else {\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n\tpublic void forward(String url) {\n        try {\n            request.getRequestDispatcher(url).forward(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n\t}\n\n\tpublic <T> T of(final Class<T> controllerType) {\n\t\treturn proxifier.proxify(controllerType, new MethodInvocation<T>() {\n            public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n                try {\n                    request.getRequestDispatcher(resolver.pathFor(DefaultResourceMethod.instanceFor(controllerType, method))).forward(request, response);\n                    return null;\n                } catch (Exception e) {\n                    throw new ProxyInvocationException(e);\n\t\t\t\t}\n            }\n        });\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.view;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.ProxyInvocationException;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Default page result implementation.\n *\n * @author Guilherme Silveira\n * @author Lucas Cavalcanti\n */\npublic class DefaultPageResult implements PageResult {\n\n    private static final Logger logger = LoggerFactory.getLogger(DefaultPageResult.class);\n\n    private final MutableRequest request;\n    private final HttpServletResponse response;\n    private final ResourceMethod method;\n    private final PathResolver resolver;\n\tprivate final Proxifier proxifier;\n\n    public DefaultPageResult(MutableRequest req, HttpServletResponse res, MethodInfo requestInfo,\n            PathResolver resolver, Proxifier proxifier) {\n        this.request = req;\n        this.response = res;\n\t\tthis.proxifier = proxifier;\n        this.method = requestInfo.getResourceMethod();\n        this.resolver = resolver;\n    }\n\n    public void forward() {\n        try {\n        \tString to = resolver.pathFor(method);\n        \tlogger.debug(\"forwarding to \", to);\n            request.getRequestDispatcher(to).forward(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n    public void include() {\n        try {\n        \tString to = resolver.pathFor(method);\n        \tlogger.debug(\"including \",to);\n            request.getRequestDispatcher(to).include(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n    public void redirect(String url) {\n    \tlogger.debug(\"redirection to \", url);\n\n        try {\n        \tif (url.startsWith(\"/\")) {\n\t\t\t\tresponse.sendRedirect(request.getContextPath() + url);\n\t\t\t} else {\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n\tpublic void forward(String url) {\n    \tlogger.debug(\"forwarding to \", url);\n\n        try {\n            request.getRequestDispatcher(url).forward(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n\t}\n\n\tpublic <T> T of(final Class<T> controllerType) {\n\t\treturn proxifier.proxify(controllerType, new MethodInvocation<T>() {\n            public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n                try {\n                    request.getRequestDispatcher(resolver.pathFor(DefaultResourceMethod.instanceFor(controllerType, method))).forward(request, response);\n                    return null;\n                } catch (Exception e) {\n                    throw new ProxyInvocationException(e);\n\t\t\t\t}\n            }\n        });\n\t}\n\n}\n","lineNo":65}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.view;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletResponse;\n\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.ProxyInvocationException;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Default page result implementation.\n *\n * @author Guilherme Silveira\n * @author Lucas Cavalcanti\n */\npublic class DefaultPageResult implements PageResult {\n\n    private final MutableRequest request;\n    private final HttpServletResponse response;\n    private final ResourceMethod method;\n    private final PathResolver resolver;\n\tprivate final Proxifier proxifier;\n\n    public DefaultPageResult(MutableRequest req, HttpServletResponse res, MethodInfo requestInfo,\n            PathResolver resolver, Proxifier proxifier) {\n        this.request = req;\n        this.response = res;\n\t\tthis.proxifier = proxifier;\n        this.method = requestInfo.getResourceMethod();\n        this.resolver = resolver;\n    }\n\n    public void forward() {\n        try {\n            request.getRequestDispatcher(resolver.pathFor(method)).forward(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n    public void include() {\n        try {\n            request.getRequestDispatcher(resolver.pathFor(method)).include(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n    public void redirect(String url) {\n        try {\n        \tif (url.startsWith(\"/\")) {\n\t\t\t\tresponse.sendRedirect(request.getContextPath() + url);\n\t\t\t} else {\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n\tpublic void forward(String url) {\n        try {\n            request.getRequestDispatcher(url).forward(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n\t}\n\n\tpublic <T> T of(final Class<T> controllerType) {\n\t\treturn proxifier.proxify(controllerType, new MethodInvocation<T>() {\n            public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n                try {\n                    request.getRequestDispatcher(resolver.pathFor(DefaultResourceMethod.instanceFor(controllerType, method))).forward(request, response);\n                    return null;\n                } catch (Exception e) {\n                    throw new ProxyInvocationException(e);\n\t\t\t\t}\n            }\n        });\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.view;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.ProxyInvocationException;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Default page result implementation.\n *\n * @author Guilherme Silveira\n * @author Lucas Cavalcanti\n */\npublic class DefaultPageResult implements PageResult {\n\n    private static final Logger logger = LoggerFactory.getLogger(DefaultPageResult.class);\n\n    private final MutableRequest request;\n    private final HttpServletResponse response;\n    private final ResourceMethod method;\n    private final PathResolver resolver;\n\tprivate final Proxifier proxifier;\n\n    public DefaultPageResult(MutableRequest req, HttpServletResponse res, MethodInfo requestInfo,\n            PathResolver resolver, Proxifier proxifier) {\n        this.request = req;\n        this.response = res;\n\t\tthis.proxifier = proxifier;\n        this.method = requestInfo.getResourceMethod();\n        this.resolver = resolver;\n    }\n\n    public void forward() {\n        try {\n        \tString to = resolver.pathFor(method);\n        \tlogger.debug(\"forwarding to \", to);\n            request.getRequestDispatcher(to).forward(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n    public void include() {\n        try {\n        \tString to = resolver.pathFor(method);\n        \tlogger.debug(\"including \",to);\n            request.getRequestDispatcher(to).include(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n    public void redirect(String url) {\n    \tlogger.debug(\"redirection to \", url);\n\n        try {\n        \tif (url.startsWith(\"/\")) {\n\t\t\t\tresponse.sendRedirect(request.getContextPath() + url);\n\t\t\t} else {\n\t\t\t\tresponse.sendRedirect(url);\n\t\t\t}\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n    }\n\n\tpublic void forward(String url) {\n    \tlogger.debug(\"forwarding to \", url);\n\n        try {\n            request.getRequestDispatcher(url).forward(request, response);\n        } catch (ServletException e) {\n            throw new ResultException(e);\n        } catch (IOException e) {\n            throw new ResultException(e);\n        }\n\t}\n\n\tpublic <T> T of(final Class<T> controllerType) {\n\t\treturn proxifier.proxify(controllerType, new MethodInvocation<T>() {\n            public Object intercept(T proxy, Method method, Object[] args, SuperMethod superMethod) {\n                try {\n                    request.getRequestDispatcher(resolver.pathFor(DefaultResourceMethod.instanceFor(controllerType, method))).forward(request, response);\n                    return null;\n                } catch (Exception e) {\n                    throw new ProxyInvocationException(e);\n\t\t\t\t}\n            }\n        });\n\t}\n\n}\n","lineNo":77}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.view;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\n\n/**\n * The default AcceptHeaderToFormat implementation\n *\n * @author Sérgio Lopes\n * @author Jonas Abreu\n */\n@ApplicationScoped\npublic class DefaultAcceptHeaderToFormat implements AcceptHeaderToFormat {\n\n\tprivate static final String DEFAULT_FORMAT = \"html\";\n\tprotected final Map<String, String> map;\n\n\tpublic DefaultAcceptHeaderToFormat() {\n\t\tmap = new ConcurrentHashMap<String, String>();\n\t\tmap.put(\"text/html\", \"html\");\n\t\tmap.put(\"application/json\", \"json\");\n\t\tmap.put(\"application/xml\", \"xml\");\n\t\t// TODO add more mime types\n\t}\n\n\tpublic String getFormat(String acceptHeader) {\n\n\t\tif (acceptHeader == null) {\n\t\t\tthrow new NullPointerException(\"accept header cant be null\");\n\t\t}\n\n\t\tif (acceptHeader.contains(DEFAULT_FORMAT)) {\n\t\t\treturn DEFAULT_FORMAT;\n\t\t}\n\n\t\t// TODO: we really could cache acceptHeader -> format\n\t\tString[] mimeTypes = getOrderedMimeTypes(acceptHeader);\n\n\n\t\tfor (String mimeType : mimeTypes) {\n\t\t\tif (map.containsKey(mimeType)) {\n\t\t\t\treturn map.get(mimeType);\n\t\t\t}\n\t\t}\n\n\t\treturn DEFAULT_FORMAT;\n\t}\n\n\tprivate static class MimeType implements Comparable<MimeType> {\n\t\tString type;\n\t\tdouble qualifier;\n\n\t\tpublic MimeType(String type, double qualifier) {\n\t\t\tthis.type = type;\n\t\t\tthis.qualifier = qualifier;\n\t\t}\n\n\t\tpublic int compareTo(MimeType mime) {\n\t\t\t// reverse order\n\t\t\treturn Double.compare(mime.qualifier, this.qualifier);\n\t\t}\n\n\t\tpublic String getType() {\n\t\t\treturn type;\n\t\t}\n\t}\n\n\tString[] getOrderedMimeTypes(String acceptHeader) {\n\t\tString[] types = acceptHeader.split(\",\");\n\n\t\tif (types.length == 0) {\n\t\t\tif (types[0].contains(\";\")) {\n\t\t\t\treturn new String[] { types[0].substring(0, types[0].indexOf(';')) };\n\t\t\t}\n\t\t\treturn new String[] { types[0] };\n\t\t}\n\n\t\tList<MimeType> mimes = new ArrayList<MimeType>();\n\t\tfor (String string : types) {\n\t\t\tif (string.contains(\"*/*\"))\n\t\t\t\tcontinue;\n\t\t\tif (string.contains(\";\")) {\n\t\t\t\tString type = string.substring(0, string.indexOf(';'));\n\t\t\t\tdouble qualifier = 1;\n\t\t\t\tif (string.contains(\"q=\")) {\n\t\t\t\t\tMatcher matcher = Pattern.compile(\"\\\\s*q=(.+)\\\\s*\").matcher(string);\n\t\t\t\t\tmatcher.find();\n\t\t\t\t\tString value = matcher.group(1);\n\t\t\t\t\tSystem.out.println(value);\n\t\t\t\t\tqualifier = Double.parseDouble(value);\n\t\t\t\t}\n\n\t\t\t\tmimes.add(new MimeType(type, qualifier));\n\t\t\t} else {\n\t\t\t\tmimes.add(new MimeType(string, 1));\n\t\t\t}\n\t\t}\n\n\t\tCollections.sort(mimes);\n\t\tString[] orderedTypes = new String[mimes.size()];\n\t\tfor (int i = 0; i < mimes.size(); i++) {\n\t\t\torderedTypes[i] = mimes.get(i).getType().trim();\n\t\t}\n\n\t\treturn orderedTypes;\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.view;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\n\n/**\n * The default AcceptHeaderToFormat implementation\n *\n * @author Sérgio Lopes\n * @author Jonas Abreu\n */\n@ApplicationScoped\npublic class DefaultAcceptHeaderToFormat implements AcceptHeaderToFormat {\n\n\tprivate static Cache cache = new Cache();\n\tprivate static final String DEFAULT_FORMAT = \"html\";\n\tprotected final Map<String, String> map;\n\n\tpublic DefaultAcceptHeaderToFormat() {\n\t\tmap = new ConcurrentHashMap<String, String>();\n\t\tmap.put(\"text/html\", \"html\");\n\t\tmap.put(\"application/json\", \"json\");\n\t\tmap.put(\"application/xml\", \"xml\");\n\t\t// TODO add more mime types\n\t}\n\n\tpublic String getFormat(String acceptHeader) {\n\n\t\tif (acceptHeader == null) {\n\t\t\tthrow new NullPointerException(\"accept header cant be null\");\n\t\t}\n\n\t\tif (acceptHeader.contains(DEFAULT_FORMAT)) {\n\t\t\treturn DEFAULT_FORMAT;\n\t\t}\n\n\t\tif (cache.containsKey(acceptHeader)) {\n\t\t\treturn cache.get(acceptHeader);\n\t\t}\n\n\t\t// TODO: we really could cache acceptHeader -> format\n\t\tString[] mimeTypes = getOrderedMimeTypes(acceptHeader);\n\n\t\tString format = DEFAULT_FORMAT;\n\t\tfor (String mimeType : mimeTypes) {\n\t\t\tif (map.containsKey(mimeType)) {\n\n\t\t\t\tformat = map.get(mimeType);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tcache.put(acceptHeader, format);\n\t\treturn format;\n\t}\n\n\tprivate static class Cache extends LinkedHashMap<String, String> {\n\t\t@Override\n\t\tprotected boolean removeEldestEntry(java.util.Map.Entry<String, String> eldest) {\n\t\t\treturn this.size() > 100;\n\t\t}\n\t}\n\n\tprivate static class MimeType implements Comparable<MimeType> {\n\t\tString type;\n\t\tdouble qualifier;\n\n\t\tpublic MimeType(String type, double qualifier) {\n\t\t\tthis.type = type;\n\t\t\tthis.qualifier = qualifier;\n\t\t}\n\n\t\tpublic int compareTo(MimeType mime) {\n\t\t\t// reverse order\n\t\t\treturn Double.compare(mime.qualifier, this.qualifier);\n\t\t}\n\n\t\tpublic String getType() {\n\t\t\treturn type;\n\t\t}\n\t}\n\n\tString[] getOrderedMimeTypes(String acceptHeader) {\n\t\tString[] types = acceptHeader.split(\",\");\n\n\t\tif (types.length == 0) {\n\t\t\tif (types[0].contains(\";\")) {\n\t\t\t\treturn new String[] { types[0].substring(0, types[0].indexOf(';')) };\n\t\t\t}\n\t\t\treturn new String[] { types[0] };\n\t\t}\n\n\t\tList<MimeType> mimes = new ArrayList<MimeType>();\n\t\tfor (String string : types) {\n\t\t\tif (string.contains(\"*/*\"))\n\t\t\t\tcontinue;\n\t\t\tif (string.contains(\";\")) {\n\t\t\t\tString type = string.substring(0, string.indexOf(';'));\n\t\t\t\tdouble qualifier = 1;\n\t\t\t\tif (string.contains(\"q=\")) {\n\t\t\t\t\tMatcher matcher = Pattern.compile(\"\\\\s*q=(.+)\\\\s*\").matcher(string);\n\t\t\t\t\tmatcher.find();\n\t\t\t\t\tString value = matcher.group(1);\n\t\t\t\t\tqualifier = Double.parseDouble(value);\n\t\t\t\t}\n\n\t\t\t\tmimes.add(new MimeType(type, qualifier));\n\t\t\t} else {\n\t\t\t\tmimes.add(new MimeType(string, 1));\n\t\t\t}\n\t\t}\n\n\t\tCollections.sort(mimes);\n\t\tString[] orderedTypes = new String[mimes.size()];\n\t\tfor (int i = 0; i < mimes.size(); i++) {\n\t\t\torderedTypes[i] = mimes.get(i).getType().trim();\n\t\t}\n\n\t\treturn orderedTypes;\n\t}\n}\n","lineNo":68}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.text.MessageFormat;\nimport java.util.Locale;\nimport java.util.MissingResourceException;\nimport java.util.PropertyResourceBundle;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.jsp.jstl.core.Config;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ioc.RequestScoped;\n\n/**\n * The default implementation of bundle provider uses jstl's api to access user\n * information on the bundle to be used.\n *\n * @author Guilherme Silveira\n */\n@RequestScoped\npublic class JstlLocalization implements Localization {\n\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(JstlLocalization.class);\n\n    private static final String DEFAULT_BUNDLE_NAME = \"messages\";\n\n    private final RequestInfo request;\n\n    private ResourceBundle bundle;\n\n    public JstlLocalization(RequestInfo request) {\n        this.request = request;\n    }\n\n    public ResourceBundle getBundle() {\n        if (this.bundle == null) {\n            Locale locale = getLocale();\n            String baseName = (String) get(Config.FMT_LOCALIZATION_CONTEXT);\n            if (baseName == null) {\n                baseName = DEFAULT_BUNDLE_NAME;\n            }\n            try {\n\t\t\t\tthis.bundle = new SafeResourceBundle(ResourceBundle.getBundle(baseName, locale));\n\t\t\t} catch (MissingResourceException e) {\n\t\t\t\tlogger.warn(\"couldn't find message bundle, creating an empty one\");\n\t\t\t\tthis.bundle = new SafeResourceBundle(createEmptyBundle());\n\t\t\t}\n        }\n        return this.bundle;\n    }\n\n\tprivate ResourceBundle createEmptyBundle() {\n\t\ttry {\n\t\t\treturn new PropertyResourceBundle(new ByteArrayInputStream(new byte[0]));\n\t\t} catch (IOException e) {\n\t\t\tlogger.warn(\"It shouldn't happen. Please report this bug\", e);\n\t\t\treturn null;\n\t\t}\n\t}\n\n    public Locale getLocale() {\n        return localeFor(Config.FMT_LOCALE);\n    }\n\n    public Locale getFallbackLocale() {\n        return localeFor(Config.FMT_FALLBACK_LOCALE);\n    }\n\n    private Locale localeFor(String key) {\n        Object localeValue = get(key);\n        if (localeValue instanceof String) {\n            return stringToLocale((String) localeValue);\n        }\n        if (localeValue != null) {\n            return (Locale) localeValue;\n        }\n        return request.getRequest().getLocale();\n    }\n\n    /**\n     * Extracted from XStream project, copyright Joe Walnes\n     */\n    private Locale stringToLocale(String str) {\n        int[] underscorePositions = underscorePositions(str);\n        if (underscorePositions[0] == -1) {\n            return new Locale(str);\n        }\n        String language = str.substring(0, underscorePositions[0]);\n        if (underscorePositions[1] == -1) {\n            return new Locale(language, str.substring(underscorePositions[0] + 1));\n        }\n        return new Locale(language, str.substring(underscorePositions[0] + 1, underscorePositions[1]), str\n                .substring(underscorePositions[1] + 1));\n    }\n\n    private int[] underscorePositions(String str) {\n        int[] result = new int[2];\n        for (int i = 0; i < result.length; i++) {\n            int last = i == 0 ? 0 : result[i - 1];\n            result[i] = str.indexOf('_', last + 1);\n        }\n        return result;\n    }\n\n    private Object get(String key) {\n        Object value = Config.get(request.getRequest(), key);\n        if (value != null) {\n            return value;\n        }\n        value = Config.get(request.getRequest().getSession(), key);\n        if (value != null) {\n            return value;\n        }\n        value = Config.get(request.getServletContext(), key);\n        if (value != null) {\n            return value;\n        }\n        return request.getServletContext().getInitParameter(key);\n    }\n\n    public String getMessage(String key, String... parameters) {\n        try {\n            String content = getBundle().getString(key);\n            return MessageFormat.format(content, parameters);\n        } catch (MissingResourceException e) {\n            return \"???\" + key + \"???\";\n        }\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.text.MessageFormat;\nimport java.util.Locale;\nimport java.util.MissingResourceException;\nimport java.util.PropertyResourceBundle;\nimport java.util.ResourceBundle;\n\nimport javax.servlet.jsp.jstl.core.Config;\nimport javax.servlet.jsp.jstl.fmt.LocalizationContext;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ioc.RequestScoped;\n\n/**\n * The default implementation of bundle provider uses jstl's api to access user\n * information on the bundle to be used.\n *\n * @author Guilherme Silveira\n */\n@RequestScoped\npublic class JstlLocalization implements Localization {\n\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(JstlLocalization.class);\n\n    private static final String DEFAULT_BUNDLE_NAME = \"messages\";\n\n    private final RequestInfo request;\n\n    private ResourceBundle bundle;\n\n    public JstlLocalization(RequestInfo request) {\n        this.request = request;\n    }\n\n    public ResourceBundle getBundle() {\n        if (this.bundle == null) {\n            Locale locale = getLocale();\n            Object bundle = get(Config.FMT_LOCALIZATION_CONTEXT);\n            if (bundle instanceof String || bundle == null) {\n\t\t\t\tString baseName = (String) bundle;\n\t            if (baseName == null) {\n\t                baseName = DEFAULT_BUNDLE_NAME;\n\t            }\n\t            try {\n\t\t\t\t\tthis.bundle = new SafeResourceBundle(ResourceBundle.getBundle(baseName, locale));\n\t\t\t\t} catch (MissingResourceException e) {\n\t\t\t\t\tlogger.debug(\"couldn't find message bundle, creating an empty one\");\n\t\t\t\t\tthis.bundle = new SafeResourceBundle(createEmptyBundle());\n\t\t\t\t}\n            } else if (bundle instanceof LocalizationContext) {\n            \tLocalizationContext context = (LocalizationContext) bundle;\n            \tthis.bundle = context.getResourceBundle();\n            } else {\n            \tlogger.warn(\"Can't handle bundle: \" + bundle + \". Please report this bug. Using an empty bundle\");\n            \tthis.bundle = new SafeResourceBundle(createEmptyBundle());\n            }\n        }\n        return this.bundle;\n    }\n\n\tprivate ResourceBundle createEmptyBundle() {\n\t\ttry {\n\t\t\treturn new PropertyResourceBundle(new ByteArrayInputStream(new byte[0]));\n\t\t} catch (IOException e) {\n\t\t\tlogger.warn(\"It shouldn't happen. Please report this bug\", e);\n\t\t\treturn null;\n\t\t}\n\t}\n\n    public Locale getLocale() {\n        return localeFor(Config.FMT_LOCALE);\n    }\n\n    public Locale getFallbackLocale() {\n        return localeFor(Config.FMT_FALLBACK_LOCALE);\n    }\n\n    private Locale localeFor(String key) {\n        Object localeValue = get(key);\n        if (localeValue instanceof String) {\n            return stringToLocale((String) localeValue);\n        }\n        if (localeValue != null) {\n            return (Locale) localeValue;\n        }\n        return request.getRequest().getLocale();\n    }\n\n    /**\n     * Extracted from XStream project, copyright Joe Walnes\n     */\n    private Locale stringToLocale(String str) {\n        int[] underscorePositions = underscorePositions(str);\n        if (underscorePositions[0] == -1) {\n            return new Locale(str);\n        }\n        String language = str.substring(0, underscorePositions[0]);\n        if (underscorePositions[1] == -1) {\n            return new Locale(language, str.substring(underscorePositions[0] + 1));\n        }\n        return new Locale(language, str.substring(underscorePositions[0] + 1, underscorePositions[1]), str\n                .substring(underscorePositions[1] + 1));\n    }\n\n    private int[] underscorePositions(String str) {\n        int[] result = new int[2];\n        for (int i = 0; i < result.length; i++) {\n            int last = i == 0 ? 0 : result[i - 1];\n            result[i] = str.indexOf('_', last + 1);\n        }\n        return result;\n    }\n\n    private Object get(String key) {\n        Object value = Config.get(request.getRequest(), key);\n        if (value != null) {\n            return value;\n        }\n        value = Config.get(request.getRequest().getSession(), key);\n        if (value != null) {\n            return value;\n        }\n        value = Config.get(request.getServletContext(), key);\n        if (value != null) {\n            return value;\n        }\n        return request.getServletContext().getInitParameter(key);\n    }\n\n    public String getMessage(String key, String... parameters) {\n        try {\n            String content = getBundle().getString(key);\n            return MessageFormat.format(content, parameters);\n        } catch (MissingResourceException e) {\n            return \"???\" + key + \"???\";\n        }\n    }\n\n}\n","lineNo":60}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.validator;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * Default implementation for {@link Outjector}.\n * It uses a chain of maps that mimics objects on request.\n *\n * @author Lucas Cavalcanti\n * @since 3.0.2\n */\npublic class DefaultOutjector implements Outjector {\n\n\tprivate static final String DELIMITERS = \"(\\\\[|\\\\]|\\\\.)\";\n\tprivate static final String DELIM_CHARS = \"\\\\[\\\\]\\\\.\";\n\tprivate final HttpServletRequest request;\n\n\tpublic DefaultOutjector(HttpServletRequest request) {\n\t\tthis.request = request;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void outjectRequestMap() {\n\t\tSet<String> paramNames = request.getParameterMap().keySet();\n\n\t\tfor (String paramName : paramNames) {\n\t\t\tif (isSimple(paramName)) {\n\t\t\t\trequest.setAttribute(paramName, request.getParameter(paramName));\n\t\t\t} else {\n\t\t\t\tString baseName = extractBaseParamName(paramName);\n\t\t\t\tif (request.getAttribute(baseName) == null) {\n\t\t\t\t\trequest.setAttribute(baseName, new HashMap<String, Object>());\n\t\t\t\t}\n\t\t\t\tprocessComplexParameter(paramName, stripBaseName(paramName, baseName), castMap(request.getAttribute(baseName)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n\tprivate Map<String, Object> castMap(final Object object) {\n\t\tif (object instanceof Map<?,?>) {\n\t\t\treturn (Map<String, Object>) object ;\n\t\t}\n\t\tif (object instanceof String) {\n\t\t\treturn new HashMap<String, Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic String toString() {\n\t\t\t\t\treturn object.toString();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tthrow new IllegalStateException(\"Some request parameter has the same name as a request attribute. \" +\n\t\t\t\t\"It shouldn't happen, please report this bug.\");\n\t}\n\n\tprivate String stripBaseName(String paramName, String baseName) {\n\t\treturn paramName.replaceFirst(\"^\" + baseName + DELIMITERS + \"+\", \"\");\n\t}\n\n\tprivate void processComplexParameter(String fullName, String paramName, Map<String, Object> parent) {\n\t\tif (isSimple(paramName)) {\n\t\t\tparent.put(paramName.replaceFirst(\"\\\\]$\", \"\"), request.getParameter(fullName));\n\t\t} else {\n\t\t\tString baseName = extractBaseParamName(paramName);\n\t\t\tif (parent.get(baseName) == null) {\n\t\t\t\tparent.put(baseName, new HashMap<String, Object>());\n\t\t\t}\n\t\t\tprocessComplexParameter(fullName, stripBaseName(paramName, baseName), castMap(parent.get(baseName)));\n\t\t}\n\t}\n\n\tprivate boolean isSimple(String paramName) {\n\t\treturn paramName.matches(\"[^\" + DELIM_CHARS + \"]+?\\\\]?\");\n\t}\n\n\tprivate String extractBaseParamName(String paramName) {\n\t\treturn paramName.replaceFirst(\"^([^\" + DELIM_CHARS + \"]+)[\" + DELIM_CHARS + \"].*$\", \"$1\");\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.validator;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * Default implementation for {@link Outjector}.\n * It uses a chain of maps that mimics objects on request.\n *\n * @author Lucas Cavalcanti\n * @since 3.0.2\n */\npublic class DefaultOutjector implements Outjector {\n\n\tprivate static final String DELIMITERS = \"(\\\\[|\\\\]|\\\\.)\";\n\tprivate static final String DELIM_CHARS = \"\\\\[\\\\]\\\\.\";\n\tprivate final HttpServletRequest request;\n\n\tpublic DefaultOutjector(HttpServletRequest request) {\n\t\tthis.request = request;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void outjectRequestMap() {\n\t\tSet<String> paramNames = request.getParameterMap().keySet();\n\n\t\tfor (String paramName : paramNames) {\n\t\t\tif (isSimple(paramName)) {\n\t\t\t\trequest.setAttribute(paramName, request.getParameter(paramName));\n\t\t\t} else {\n\t\t\t\tString baseName = extractBaseParamName(paramName);\n\n\t\t\t\tMap<Object, Object> map = castMap(request.getAttribute(baseName));\n\t\t\t\trequest.setAttribute(baseName, map);\n\n\t\t\t\tprocessComplexParameter(paramName, stripBaseName(paramName, baseName), map);\n\t\t\t}\n\t\t}\n\t}\n\n\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n\tprivate Map<Object, Object> castMap(final Object object) {\n\t\tif (object == null) {\n\t\t\treturn new HashMap<Object, Object>();\n\t\t}\n\t\tif (object instanceof Map<?,?>) {\n\t\t\treturn (Map<Object, Object>) object ;\n\t\t}\n\t\tif (object instanceof String) {\n\t\t\treturn new HashMap<Object, Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic String toString() {\n\t\t\t\t\treturn object.toString();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tthrow new IllegalStateException(\"Some request parameter has the same name as a request attribute. \" +\n\t\t\t\t\"It shouldn't happen, please report this bug.\");\n\t}\n\n\tprivate String stripBaseName(String paramName, String baseName) {\n\t\treturn paramName.replaceFirst(\"^\" + baseName + DELIMITERS + \"+\", \"\");\n\t}\n\n\tprivate void processComplexParameter(String fullName, String paramName, Map<Object, Object> parent) {\n\t\tif (isSimple(paramName)) {\n\t\t\tparent.put(fixParameter(paramName.replaceFirst(\"\\\\]$\", \"\")), request.getParameter(fullName));\n\t\t} else {\n\t\t\tString baseName = extractBaseParamName(paramName);\n\n\t\t\tMap<Object, Object> map = castMap(parent.get(fixParameter(baseName)));\n\t\t\tparent.put(fixParameter(baseName), map);\n\n\t\t\tprocessComplexParameter(fullName, stripBaseName(paramName, baseName), map);\n\t\t}\n\t}\n\n\tprivate Object fixParameter(String paramName) {\n\t\tif (paramName.matches(\"\\\\d+\")) {\n\t\t\treturn Long.valueOf(paramName);\n\t\t} else {\n\t\t\treturn paramName;\n\t\t}\n\t}\n\n\tprivate boolean isSimple(String paramName) {\n\t\treturn paramName.matches(\"[^\" + DELIM_CHARS + \"]+?\\\\]?\");\n\t}\n\n\tprivate String extractBaseParamName(String paramName) {\n\t\treturn paramName.replaceFirst(\"^([^\" + DELIM_CHARS + \"]+)[\" + DELIM_CHARS + \"].*$\", \"$1\");\n\t}\n}\n","lineNo":51}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.validator;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * Default implementation for {@link Outjector}.\n * It uses a chain of maps that mimics objects on request.\n *\n * @author Lucas Cavalcanti\n * @since 3.0.2\n */\npublic class DefaultOutjector implements Outjector {\n\n\tprivate static final String DELIMITERS = \"(\\\\[|\\\\]|\\\\.)\";\n\tprivate static final String DELIM_CHARS = \"\\\\[\\\\]\\\\.\";\n\tprivate final HttpServletRequest request;\n\n\tpublic DefaultOutjector(HttpServletRequest request) {\n\t\tthis.request = request;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void outjectRequestMap() {\n\t\tSet<String> paramNames = request.getParameterMap().keySet();\n\n\t\tfor (String paramName : paramNames) {\n\t\t\tif (isSimple(paramName)) {\n\t\t\t\trequest.setAttribute(paramName, request.getParameter(paramName));\n\t\t\t} else {\n\t\t\t\tString baseName = extractBaseParamName(paramName);\n\t\t\t\tif (request.getAttribute(baseName) == null) {\n\t\t\t\t\trequest.setAttribute(baseName, new HashMap<String, Object>());\n\t\t\t\t}\n\t\t\t\tprocessComplexParameter(paramName, stripBaseName(paramName, baseName), castMap(request.getAttribute(baseName)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n\tprivate Map<String, Object> castMap(final Object object) {\n\t\tif (object instanceof Map<?,?>) {\n\t\t\treturn (Map<String, Object>) object ;\n\t\t}\n\t\tif (object instanceof String) {\n\t\t\treturn new HashMap<String, Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic String toString() {\n\t\t\t\t\treturn object.toString();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tthrow new IllegalStateException(\"Some request parameter has the same name as a request attribute. \" +\n\t\t\t\t\"It shouldn't happen, please report this bug.\");\n\t}\n\n\tprivate String stripBaseName(String paramName, String baseName) {\n\t\treturn paramName.replaceFirst(\"^\" + baseName + DELIMITERS + \"+\", \"\");\n\t}\n\n\tprivate void processComplexParameter(String fullName, String paramName, Map<String, Object> parent) {\n\t\tif (isSimple(paramName)) {\n\t\t\tparent.put(paramName.replaceFirst(\"\\\\]$\", \"\"), request.getParameter(fullName));\n\t\t} else {\n\t\t\tString baseName = extractBaseParamName(paramName);\n\t\t\tif (parent.get(baseName) == null) {\n\t\t\t\tparent.put(baseName, new HashMap<String, Object>());\n\t\t\t}\n\t\t\tprocessComplexParameter(fullName, stripBaseName(paramName, baseName), castMap(parent.get(baseName)));\n\t\t}\n\t}\n\n\tprivate boolean isSimple(String paramName) {\n\t\treturn paramName.matches(\"[^\" + DELIM_CHARS + \"]+?\\\\]?\");\n\t}\n\n\tprivate String extractBaseParamName(String paramName) {\n\t\treturn paramName.replaceFirst(\"^([^\" + DELIM_CHARS + \"]+)[\" + DELIM_CHARS + \"].*$\", \"$1\");\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.validator;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * Default implementation for {@link Outjector}.\n * It uses a chain of maps that mimics objects on request.\n *\n * @author Lucas Cavalcanti\n * @since 3.0.2\n */\npublic class DefaultOutjector implements Outjector {\n\n\tprivate static final String DELIMITERS = \"(\\\\[|\\\\]|\\\\.)\";\n\tprivate static final String DELIM_CHARS = \"\\\\[\\\\]\\\\.\";\n\tprivate final HttpServletRequest request;\n\n\tpublic DefaultOutjector(HttpServletRequest request) {\n\t\tthis.request = request;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void outjectRequestMap() {\n\t\tSet<String> paramNames = request.getParameterMap().keySet();\n\n\t\tfor (String paramName : paramNames) {\n\t\t\tif (isSimple(paramName)) {\n\t\t\t\trequest.setAttribute(paramName, request.getParameter(paramName));\n\t\t\t} else {\n\t\t\t\tString baseName = extractBaseParamName(paramName);\n\n\t\t\t\tMap<Object, Object> map = castMap(request.getAttribute(baseName));\n\t\t\t\trequest.setAttribute(baseName, map);\n\n\t\t\t\tprocessComplexParameter(paramName, stripBaseName(paramName, baseName), map);\n\t\t\t}\n\t\t}\n\t}\n\n\t@SuppressWarnings({ \"unchecked\", \"serial\" })\n\tprivate Map<Object, Object> castMap(final Object object) {\n\t\tif (object == null) {\n\t\t\treturn new HashMap<Object, Object>();\n\t\t}\n\t\tif (object instanceof Map<?,?>) {\n\t\t\treturn (Map<Object, Object>) object ;\n\t\t}\n\t\tif (object instanceof String) {\n\t\t\treturn new HashMap<Object, Object>() {\n\t\t\t\t@Override\n\t\t\t\tpublic String toString() {\n\t\t\t\t\treturn object.toString();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tthrow new IllegalStateException(\"Some request parameter has the same name as a request attribute. \" +\n\t\t\t\t\"It shouldn't happen, please report this bug.\");\n\t}\n\n\tprivate String stripBaseName(String paramName, String baseName) {\n\t\treturn paramName.replaceFirst(\"^\" + baseName + DELIMITERS + \"+\", \"\");\n\t}\n\n\tprivate void processComplexParameter(String fullName, String paramName, Map<Object, Object> parent) {\n\t\tif (isSimple(paramName)) {\n\t\t\tparent.put(fixParameter(paramName.replaceFirst(\"\\\\]$\", \"\")), request.getParameter(fullName));\n\t\t} else {\n\t\t\tString baseName = extractBaseParamName(paramName);\n\n\t\t\tMap<Object, Object> map = castMap(parent.get(fixParameter(baseName)));\n\t\t\tparent.put(fixParameter(baseName), map);\n\n\t\t\tprocessComplexParameter(fullName, stripBaseName(paramName, baseName), map);\n\t\t}\n\t}\n\n\tprivate Object fixParameter(String paramName) {\n\t\tif (paramName.matches(\"\\\\d+\")) {\n\t\t\treturn Long.valueOf(paramName);\n\t\t} else {\n\t\t\treturn paramName;\n\t\t}\n\t}\n\n\tprivate boolean isSimple(String paramName) {\n\t\treturn paramName.matches(\"[^\" + DELIM_CHARS + \"]+?\\\\]?\");\n\t}\n\n\tprivate String extractBaseParamName(String paramName) {\n\t\treturn paramName.replaceFirst(\"^([^\" + DELIM_CHARS + \"]+)[\" + DELIM_CHARS + \"].*$\", \"$1\");\n\t}\n}\n","lineNo":89}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport java.util.Arrays;\nimport java.util.Map;\n\nimport javax.servlet.ServletContext;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.aop.scope.ScopedProxyUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.AbstractBeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.annotation.ScopeMetadata;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.context.support.AbstractRefreshableWebApplicationContext;\nimport org.springframework.web.context.support.WebApplicationContextUtils;\n\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.config.BasicConfiguration;\nimport br.com.caelum.vraptor.converter.jodatime.LocalDateConverter;\nimport br.com.caelum.vraptor.converter.jodatime.LocalTimeConverter;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.StereotypeHandler;\n\n/**\n * @author Fabio Kung\n */\npublic class VRaptorApplicationContext extends AbstractRefreshableWebApplicationContext {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(VRaptorApplicationContext.class);\n\n\tpublic static final String RESOURCES_LIST = \"br.com.caelum.vraptor.resources.list\";\n\n\tprivate final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n\tprivate final SpringBasedContainer container;\n\tprivate final BasicConfiguration config;\n\n\tpublic VRaptorApplicationContext(SpringBasedContainer container, BasicConfiguration config) {\n\t\tthis.container = container;\n\t\tthis.config = config;\n\t}\n\n\t@Override\n\tprotected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n\t\tWebApplicationContextUtils.registerWebApplicationScopes(beanFactory);\n\t}\n\n\t@Override\n\tprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {\n\t\tbeanFactory.registerSingleton(ServletContext.class.getName(), getServletContext());\n\t\tbeanFactory.ignoreDependencyType(ServletContext.class);\n\t\tregisterApplicationScopedComponentsOn(beanFactory);\n\t\tregisterRequestScopedComponentsOn(beanFactory);\n\t\tregisterPrototypeScopedComponentsOn(beanFactory);\n\t\tregisterCustomComponentsOn(beanFactory);\n\n\t\tComponentScanner scanner = new ComponentScanner(beanFactory, container);\n\t\tif (config.hasBasePackages()) {\n\t\t\tlogger\n\t\t\t\t\t.info(\"Scanning packages from WEB-INF/classes and jars: \"\n\t\t\t\t\t\t\t+ Arrays.toString(config.getBasePackages()));\n\t\t\tscanner.scan(config.getBasePackages());\n\t\t} else {\n\t\t\tlogger.info(\"No basepackage configured. Scanning all packages only from /WEB-INF/classes: \");\n\t\t\tscanner.setResourcePattern(\"**/*.class\");\n\t\t\tscanner.scan(\"\");\n\t\t}\n\n\t\tAnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);\n\t\tAopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(beanFactory);\n\t\tregisterCustomInjectionProcessor(beanFactory);\n\t\tregisterCachedComponentsOn(beanFactory);\n\t}\n\n\tprivate void registerCustomComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : container.getToRegister()) {\n\t\t\tregister(type, beanFactory);\n\t\t}\n\t}\n\n\tprivate void registerPrototypeScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> prototypeComponent : BaseComponents.getPrototypeScoped().values()) {\n\t\t\tregisterOn(beanFactory, prototypeComponent);\n\t\t}\n\t}\n\n\tprivate void registerCachedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> cachedComponent : BaseComponents.getCachedComponents().values()) {\n\t\t\tregisterOn(beanFactory, cachedComponent, true);\n\t\t}\n\t}\n\n\tprivate void registerApplicationScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : BaseComponents.getApplicationScoped().values()) {\n\t\t\tregisterOn(beanFactory, type);\n\t\t\tregisterFactory(type, beanFactory);\n\t\t}\n\n\t\tfor (Class<? extends StereotypeHandler> handlerType : BaseComponents.getStereotypeHandlers()) {\n\t\t\tregisterOn(beanFactory, handlerType);\n\t\t}\n\n\t\tregisterOn(beanFactory, StereotypedBeansRegistrar.class);\n\t\tregisterOn(beanFactory, DefaultSpringLocator.class);\n\t}\n\n\tprivate void registerRequestScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : BaseComponents.getRequestScoped().values()) {\n\t\t\tregisterOn(beanFactory, type);\n\t\t\tregisterFactory(type, beanFactory);\n\t\t}\n\n\t\tfor (Class<? extends Converter<?>> converterType : BaseComponents.getBundledConverters()) {\n\t\t\tregisterOn(beanFactory, converterType);\n\t\t}\n\n\t\tregisterOn(beanFactory, VRaptorRequestProvider.class, true);\n\t\tregisterOn(beanFactory, HttpServletRequestProvider.class, true);\n\t\tregisterOn(beanFactory, HttpServletResponseProvider.class, true);\n\t\tregisterOn(beanFactory, HttpSessionProvider.class, true);\n\n\t\tbeanFactory.registerSingleton(SpringBasedContainer.class.getName(), container);\n\n\t\ttry {\n\t\t\tClass.forName(\"org.joda.time.LocalDate\");\n\t\t\tregisterOn(beanFactory, LocalDateConverter.class);\n\t\t\tregisterOn(beanFactory, LocalTimeConverter.class);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// OK, only register jodatime converters if jodatime is imported\n\t\t}\n\t}\n\n\tprivate void register(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n\t\tregisterOn((BeanDefinitionRegistry) beanFactory, type, true);\n\t\tregisterFactory(type, beanFactory);\n\t}\n\n\tprivate void registerFactory(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n\t\tif (ComponentFactory.class.isAssignableFrom(type)) {\n\t\t\tbeanFactory.registerSingleton(type.getName(), new ComponentFactoryBean(container, type));\n\t\t}\n\t}\n\n\tpublic void register(Class<?> type) {\n\t\tregister(type, getBeanFactory());\n\t}\n\n\tprivate void registerOn(BeanDefinitionRegistry registry, Class<?> type) {\n\t\tregisterOn(registry, type, false);\n\t}\n\n\tprivate void registerOn(BeanDefinitionRegistry registry, Class<?> type, boolean customComponent) {\n\t\tAnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n\t\tdefinition.setLazyInit(true);\n\t\tdefinition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_NO);\n\t\tif (customComponent) {\n\t\t\tdefinition.setPrimary(true);\n\t\t\tdefinition.setRole(BeanDefinition.ROLE_APPLICATION);\n\t\t} else {\n\t\t\tdefinition.setPrimary(false);\n\t\t\tdefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\t}\n\n\t\tString name = beanNameGenerator.generateBeanName(definition, registry);\n\t\tBeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name);\n\n\t\tVRaptorScopeResolver scopeResolver = new VRaptorScopeResolver();\n\t\tScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition);\n\t\tdefinitionHolder = applyScopeOn(registry, definitionHolder, scopeMetadata);\n\n\t\tBeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry);\n\t}\n\n\t/**\n\t * From\n\t * org.springframework.context.annotation.ClassPathBeanDefinitionScanner\n\t * #applyScope()\n\t *\n\t * @param definition\n\t * @param scopeMetadata\n\t * @return\n\t */\n\tprivate BeanDefinitionHolder applyScopeOn(BeanDefinitionRegistry registry, BeanDefinitionHolder definition,\n\t\t\tScopeMetadata scopeMetadata) {\n\t\tString scope = scopeMetadata.getScopeName();\n\t\tScopedProxyMode proxyMode = scopeMetadata.getScopedProxyMode();\n\t\tdefinition.getBeanDefinition().setScope(scope);\n\t\tif (BeanDefinition.SCOPE_SINGLETON.equals(scope) || BeanDefinition.SCOPE_PROTOTYPE.equals(scope)\n\t\t\t\t|| proxyMode.equals(ScopedProxyMode.NO)) {\n\t\t\treturn definition;\n\t\t} else {\n\t\t\tboolean proxyTargetClass = proxyMode.equals(ScopedProxyMode.TARGET_CLASS);\n\t\t\treturn ScopedProxyUtils.createScopedProxy(definition, registry, proxyTargetClass);\n\t\t}\n\t}\n\n\tprivate void registerCustomInjectionProcessor(BeanDefinitionRegistry registry) {\n\t\tRootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n\t\tdefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\tdefinition.getPropertyValues().addPropertyValue(\"order\", Ordered.LOWEST_PRECEDENCE);\n\t\tregistry.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n\t}\n\n\tpublic <T> T getBean(Class<T> type) {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<String, ? extends T> instances = BeanFactoryUtils.beansOfTypeIncludingAncestors(this, type);\n\t\tif (instances.size() == 0) {\n\t\t\tthrow new NoSuchBeanDefinitionException(type, \"no bean for this type registered\");\n\t\t} else if (instances.size() == 1) {\n\t\t\treturn instances.values().iterator().next();\n\t\t} else {\n\t\t\tfor (Map.Entry<String, ? extends T> entry : instances.entrySet()) {\n\t\t\t\tBeanDefinition definition = getBeanFactory().getBeanDefinition(entry.getKey());\n\t\t\t\tif (isPrimary(definition)) {\n\t\t\t\t\treturn entry.getValue();\n\t\t\t\t} else if (hasGreaterRoleThanInfrastructure(definition)) {\n\t\t\t\t\treturn entry.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new NoSuchBeanDefinitionException(\"there are \" + instances.size() + \" implementations for the type [\"\n\t\t\t\t\t+ type\n\t\t\t\t\t+ \"], but none of them is primary or has a Role greater than BeanDefinition.ROLE_INFRASTRUCTURE\");\n\t\t}\n\t}\n\n\tprivate boolean isPrimary(BeanDefinition definition) {\n\t\treturn definition instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) definition).isPrimary();\n\t}\n\n\tprivate boolean hasGreaterRoleThanInfrastructure(BeanDefinition definition) {\n\t\treturn definition.getRole() < BeanDefinition.ROLE_INFRASTRUCTURE;\n\t}\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport java.util.Arrays;\nimport java.util.Map;\n\nimport javax.servlet.ServletContext;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.aop.scope.ScopedProxyUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.AbstractBeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.annotation.ScopeMetadata;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.io.support.PathMatchingResourcePatternResolver;\nimport org.springframework.web.context.support.AbstractRefreshableWebApplicationContext;\nimport org.springframework.web.context.support.WebApplicationContextUtils;\n\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.config.BasicConfiguration;\nimport br.com.caelum.vraptor.converter.jodatime.LocalDateConverter;\nimport br.com.caelum.vraptor.converter.jodatime.LocalTimeConverter;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.StereotypeHandler;\n\n/**\n * @author Fabio Kung\n */\npublic class VRaptorApplicationContext extends AbstractRefreshableWebApplicationContext {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(VRaptorApplicationContext.class);\n\n\tpublic static final String RESOURCES_LIST = \"br.com.caelum.vraptor.resources.list\";\n\n\tprivate final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n\tprivate final SpringBasedContainer container;\n\tprivate final BasicConfiguration config;\n\n\tpublic VRaptorApplicationContext(SpringBasedContainer container, BasicConfiguration config) {\n\t\tthis.container = container;\n\t\tthis.config = config;\n\t}\n\n\t@Override\n\tprotected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n\t\tWebApplicationContextUtils.registerWebApplicationScopes(beanFactory);\n\t}\n\n\t@Override\n\tprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {\n\t\tbeanFactory.registerSingleton(ServletContext.class.getName(), getServletContext());\n\t\tbeanFactory.ignoreDependencyType(ServletContext.class);\n\t\tregisterApplicationScopedComponentsOn(beanFactory);\n\t\tregisterRequestScopedComponentsOn(beanFactory);\n\t\tregisterPrototypeScopedComponentsOn(beanFactory);\n\t\tregisterCustomComponentsOn(beanFactory);\n\n\t\tComponentScanner scanner = new ComponentScanner(beanFactory, container);\n\t\tif (config.hasBasePackages()) {\n\t\t\tlogger\n\t\t\t\t\t.info(\"Scanning packages from WEB-INF/classes and jars: \"\n\t\t\t\t\t\t\t+ Arrays.toString(config.getBasePackages()));\n\t\t\tscanner.scan(config.getBasePackages());\n\t\t} else {\n\t\t\tlogger.info(\"No basepackage configured. Scanning packages only from: \" + config.getWebinfClassesDirectory());\n\t\t\tString pattern = \"**/*.class\";\n\t\t\tlogger.info(\"using resource pattern \" + pattern);\n\t\t\tscanner.setResourcePattern(pattern);\n\t\t\tscanner.setResourceLoader(new WebinfClassesPatternResolver(config.getWebinfClassesDirectory()));\n\t\t\tscanner.scan(\"\");\n\t\t}\n\n\t\tAnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);\n\t\tAopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(beanFactory);\n\t\tregisterCustomInjectionProcessor(beanFactory);\n\t\tregisterCachedComponentsOn(beanFactory);\n\t}\n\n\tprivate void registerCustomComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : container.getToRegister()) {\n\t\t\tregister(type, beanFactory);\n\t\t}\n\t}\n\n\tprivate void registerPrototypeScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> prototypeComponent : BaseComponents.getPrototypeScoped().values()) {\n\t\t\tregisterOn(beanFactory, prototypeComponent);\n\t\t}\n\t}\n\n\tprivate void registerCachedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> cachedComponent : BaseComponents.getCachedComponents().values()) {\n\t\t\tregisterOn(beanFactory, cachedComponent, true);\n\t\t}\n\t}\n\n\tprivate void registerApplicationScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : BaseComponents.getApplicationScoped().values()) {\n\t\t\tregisterOn(beanFactory, type);\n\t\t\tregisterFactory(type, beanFactory);\n\t\t}\n\n\t\tfor (Class<? extends StereotypeHandler> handlerType : BaseComponents.getStereotypeHandlers()) {\n\t\t\tregisterOn(beanFactory, handlerType);\n\t\t}\n\n\t\tregisterOn(beanFactory, StereotypedBeansRegistrar.class);\n\t\tregisterOn(beanFactory, DefaultSpringLocator.class);\n\t}\n\n\tprivate void registerRequestScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n\t\tfor (Class<?> type : BaseComponents.getRequestScoped().values()) {\n\t\t\tregisterOn(beanFactory, type);\n\t\t\tregisterFactory(type, beanFactory);\n\t\t}\n\n\t\tfor (Class<? extends Converter<?>> converterType : BaseComponents.getBundledConverters()) {\n\t\t\tregisterOn(beanFactory, converterType);\n\t\t}\n\n\t\tregisterOn(beanFactory, VRaptorRequestProvider.class, true);\n\t\tregisterOn(beanFactory, HttpServletRequestProvider.class, true);\n\t\tregisterOn(beanFactory, HttpServletResponseProvider.class, true);\n\t\tregisterOn(beanFactory, HttpSessionProvider.class, true);\n\n\t\tbeanFactory.registerSingleton(SpringBasedContainer.class.getName(), container);\n\n\t\ttry {\n\t\t\tClass.forName(\"org.joda.time.LocalDate\");\n\t\t\tregisterOn(beanFactory, LocalDateConverter.class);\n\t\t\tregisterOn(beanFactory, LocalTimeConverter.class);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t// OK, only register jodatime converters if jodatime is imported\n\t\t}\n\t}\n\n\tprivate void register(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n\t\tregisterOn((BeanDefinitionRegistry) beanFactory, type, true);\n\t\tregisterFactory(type, beanFactory);\n\t}\n\n\tprivate void registerFactory(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n\t\tif (ComponentFactory.class.isAssignableFrom(type)) {\n\t\t\tbeanFactory.registerSingleton(type.getName(), new ComponentFactoryBean(container, type));\n\t\t}\n\t}\n\n\tpublic void register(Class<?> type) {\n\t\tregister(type, getBeanFactory());\n\t}\n\n\tprivate void registerOn(BeanDefinitionRegistry registry, Class<?> type) {\n\t\tregisterOn(registry, type, false);\n\t}\n\n\tprivate void registerOn(BeanDefinitionRegistry registry, Class<?> type, boolean customComponent) {\n\t\tAnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n\t\tdefinition.setLazyInit(true);\n\t\tdefinition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_NO);\n\t\tif (customComponent) {\n\t\t\tdefinition.setPrimary(true);\n\t\t\tdefinition.setRole(BeanDefinition.ROLE_APPLICATION);\n\t\t} else {\n\t\t\tdefinition.setPrimary(false);\n\t\t\tdefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\t}\n\n\t\tString name = beanNameGenerator.generateBeanName(definition, registry);\n\t\tBeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name);\n\n\t\tVRaptorScopeResolver scopeResolver = new VRaptorScopeResolver();\n\t\tScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition);\n\t\tdefinitionHolder = applyScopeOn(registry, definitionHolder, scopeMetadata);\n\n\t\tBeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry);\n\t}\n\n\t/**\n\t * From\n\t * org.springframework.context.annotation.ClassPathBeanDefinitionScanner\n\t * #applyScope()\n\t *\n\t * @param definition\n\t * @param scopeMetadata\n\t * @return\n\t */\n\tprivate BeanDefinitionHolder applyScopeOn(BeanDefinitionRegistry registry, BeanDefinitionHolder definition,\n\t\t\tScopeMetadata scopeMetadata) {\n\t\tString scope = scopeMetadata.getScopeName();\n\t\tScopedProxyMode proxyMode = scopeMetadata.getScopedProxyMode();\n\t\tdefinition.getBeanDefinition().setScope(scope);\n\t\tif (BeanDefinition.SCOPE_SINGLETON.equals(scope) || BeanDefinition.SCOPE_PROTOTYPE.equals(scope)\n\t\t\t\t|| proxyMode.equals(ScopedProxyMode.NO)) {\n\t\t\treturn definition;\n\t\t} else {\n\t\t\tboolean proxyTargetClass = proxyMode.equals(ScopedProxyMode.TARGET_CLASS);\n\t\t\treturn ScopedProxyUtils.createScopedProxy(definition, registry, proxyTargetClass);\n\t\t}\n\t}\n\n\tprivate void registerCustomInjectionProcessor(BeanDefinitionRegistry registry) {\n\t\tRootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n\t\tdefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t\tdefinition.getPropertyValues().addPropertyValue(\"order\", Ordered.LOWEST_PRECEDENCE);\n\t\tregistry.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n\t}\n\n\tpublic <T> T getBean(Class<T> type) {\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<String, ? extends T> instances = BeanFactoryUtils.beansOfTypeIncludingAncestors(this, type);\n\t\tif (instances.size() == 0) {\n\t\t\tthrow new NoSuchBeanDefinitionException(type, \"no bean for this type registered\");\n\t\t} else if (instances.size() == 1) {\n\t\t\treturn instances.values().iterator().next();\n\t\t} else {\n\t\t\tfor (Map.Entry<String, ? extends T> entry : instances.entrySet()) {\n\t\t\t\tBeanDefinition definition = getBeanFactory().getBeanDefinition(entry.getKey());\n\t\t\t\tif (isPrimary(definition)) {\n\t\t\t\t\treturn entry.getValue();\n\t\t\t\t} else if (hasGreaterRoleThanInfrastructure(definition)) {\n\t\t\t\t\treturn entry.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new NoSuchBeanDefinitionException(\"there are \" + instances.size() + \" implementations for the type [\"\n\t\t\t\t\t+ type\n\t\t\t\t\t+ \"], but none of them is primary or has a Role greater than BeanDefinition.ROLE_INFRASTRUCTURE\");\n\t\t}\n\t}\n\n\tprivate boolean isPrimary(BeanDefinition definition) {\n\t\treturn definition instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) definition).isPrimary();\n\t}\n\n\tprivate boolean hasGreaterRoleThanInfrastructure(BeanDefinition definition) {\n\t\treturn definition.getRole() < BeanDefinition.ROLE_INFRASTRUCTURE;\n\t}\n}\n","lineNo":97}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.servlet.ServletContext;\n\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.PicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.converter.jodatime.LocalDateConverter;\nimport br.com.caelum.vraptor.converter.jodatime.LocalTimeConverter;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.ioc.StereotypeHandler;\n\n/**\n * Managing internal components by using pico container.<br>\n * There is an extension point through the registerComponents method, which\n * allows one to give a customized container.\n *\n * @author Guilherme Silveira\n */\npublic class PicoProvider implements ContainerProvider {\n\n    private final MutablePicoContainer picoContainer;\n    private MutablePicoContainer childContainer;\n\n    private static final Logger logger = LoggerFactory.getLogger(PicoProvider.class);\n\n    public PicoProvider() {\n        this.picoContainer = new DefaultPicoContainer(new Caching(),\n                new JavaEE5LifecycleStrategy(new NullComponentMonitor()), null);\n\n        ComponentFactoryRegistry componentFactoryRegistry = new DefaultComponentFactoryRegistry();\n        PicoComponentRegistry componentRegistry = new PicoComponentRegistry(this.picoContainer, componentFactoryRegistry);\n\n        this.picoContainer.addComponent(componentRegistry);\n        this.picoContainer.addComponent(componentFactoryRegistry);\n    }\n\n    public final void start(ServletContext context) {\n\t    ComponentRegistry componentRegistry = getComponentRegistry();\n\t    registerBundledComponents(componentRegistry);\n\n\t    this.picoContainer.addComponent(context);\n\n\t    Scanner scanner = new ReflectionsScanner(context);\n\n\t    this.picoContainer.addComponent(scanner);\n\n\t    registerAnnotatedComponents(scanner, componentRegistry);\n\n\t    getComponentRegistry().init();\n\n\t    StereotypedComponentRegistrar componentRegistrar = picoContainer.getComponent(StereotypedComponentRegistrar.class);\n\t    componentRegistrar.registerFrom(scanner);\n\n\t    registerCustomComponents(picoContainer, scanner);\n\n\t    picoContainer.start();\n\n\t    registerCacheComponents();\n\t}\n\n    /**\n     * Create a child container, and register cached components. This way, Cached components will use registered implementations\n     * for their types, and will be used on dependency injection\n     */\n\tprivate void registerCacheComponents() {\n\t\tPicoComponentRegistry registry = getComponentRegistry();\n\t\tthis.childContainer = registry.makeChildContainer();\n\n\t\tMap<Class<?>, Class<?>> cachedComponents = BaseComponents.getCachedComponents();\n\t\tfor (Entry<Class<?>, Class<?>> entry : cachedComponents.entrySet()) {\n\t\t\tregistry.register(entry.getKey(), entry.getValue());\n\t\t}\n\n\t\tthis.childContainer.start();\n\t}\n\n\tprivate void registerAnnotatedComponents(Scanner scanner, ComponentRegistry componentRegistry) {\n\t\tCollection<Class<?>> collection = scanner.getTypesWithAnnotation(Component.class);\n\t\tfor (Class<?> componentType : collection) {\n\t\t\tif (ComponentFactory.class.isAssignableFrom(componentType)) {\n\t\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Registering found component factory \" + componentType);\n\t\t\t\t}\n\t\t\t\tcomponentRegistry.register(componentType, componentType);\n\t\t\t} else {\n\t\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Deeply registering found component \" + componentType);\n\t\t\t\t}\n\t\t\t\tcomponentRegistry.deepRegister(componentType);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Register default vraptor-pico implementation components.\n\t */\n\tprotected void registerBundledComponents(ComponentRegistry registry) {\n\t    logger.debug(\"Registering base pico container related implementation components\");\n\t    for (Class<? extends StereotypeHandler> entry : BaseComponents.getStereotypeHandlers()) {\n\t\t\tregistry.register(entry, entry);\n\t\t}\n//\t    registry.register(ComponentHandler.class, ComponentHandler.class);\n\t    for (Map.Entry<Class<?>, Class<?>> entry : BaseComponents.getApplicationScoped().entrySet()) {\n\t        registry.register(entry.getKey(), entry.getValue());\n\t        registry.register(entry.getValue(), entry.getValue());\n\t    }\n\t    for (Map.Entry<Class<?>, Class<?>> entry : BaseComponents.getRequestScoped().entrySet()) {\n\t        registry.register(entry.getKey(), entry.getValue());\n\t        registry.register(entry.getValue(), entry.getValue());\n\t    }\n\t    for (Map.Entry<Class<?>, Class<?>> entry : BaseComponents.getPrototypeScoped().entrySet()) {\n\t    \tregistry.register(entry.getKey(), entry.getValue());\n\t    \tregistry.register(entry.getValue(), entry.getValue());\n\t    }\n\t    for (Class<? extends Converter<?>> converterType : BaseComponents.getBundledConverters()) {\n\t        registry.register(converterType, converterType);\n\t    }\n\n\t    registry.register(ResourceRegistrar.class, ResourceRegistrar.class);\n\t    registry.register(InterceptorRegistrar.class, InterceptorRegistrar.class);\n\t    registry.register(ConverterRegistrar.class, ConverterRegistrar.class);\n\t    registry.register(ComponentFactoryRegistrar.class, ComponentFactoryRegistrar.class);\n\t    registry.register(StereotypedComponentRegistrar.class, StereotypedComponentRegistrar.class);\n\n\t    try {\n\t\t\tClass.forName(\"org.joda.time.LocalDate\");\n\t\t\tregistry.register(LocalDateConverter.class, LocalDateConverter.class);\n\t\t\tregistry.register(LocalTimeConverter.class, LocalTimeConverter.class);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t//OK, only register jodatime converters if jodatime is imported\n\t\t}\n\t}\n\n\tprotected void registerCustomComponents(PicoContainer picoContainer, Scanner scanner) {\n\t\t/* TODO: For now, this is an empty hook method to enable subclasses to use\n\t\t * the scanner and register their specific components.\n\t\t *\n\t\t * In the future, if we scan the classpath for StereotypeHandlers, we can\n\t\t * eliminate this hook.\n\t\t */\n\t}\n\n\tpublic void stop() {\n\t    picoContainer.stop();\n\t    picoContainer.dispose();\n\t}\n\n\tpublic <T> T provideForRequest(RequestInfo request, Execution<T> execution) {\n        PicoBasedContainer container = null;\n        try {\n            container = getComponentRegistry().provideRequestContainer(request);\n            container.getContainer().start();\n            return execution.insideRequest(container);\n        } finally {\n            if (container != null) {\n                MutablePicoContainer picoContainer = container.getContainer();\n                picoContainer.stop();\n                picoContainer.dispose();\n            }\n        }\n    }\n\n    protected PicoComponentRegistry getComponentRegistry() {\n    \treturn this.picoContainer.getComponent(PicoComponentRegistry.class);\n    }\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.servlet.ServletContext;\n\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.PicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.config.BasicConfiguration;\nimport br.com.caelum.vraptor.converter.jodatime.LocalDateConverter;\nimport br.com.caelum.vraptor.converter.jodatime.LocalTimeConverter;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.ioc.StereotypeHandler;\n\n/**\n * Managing internal components by using pico container.<br>\n * There is an extension point through the registerComponents method, which\n * allows one to give a customized container.\n *\n * @author Guilherme Silveira\n */\npublic class PicoProvider implements ContainerProvider {\n\n    private final MutablePicoContainer picoContainer;\n    private MutablePicoContainer childContainer;\n\n    private static final Logger logger = LoggerFactory.getLogger(PicoProvider.class);\n\n    public PicoProvider() {\n        this.picoContainer = new DefaultPicoContainer(new Caching(),\n                new JavaEE5LifecycleStrategy(new NullComponentMonitor()), null);\n\n        ComponentFactoryRegistry componentFactoryRegistry = new DefaultComponentFactoryRegistry();\n        PicoComponentRegistry componentRegistry = new PicoComponentRegistry(this.picoContainer, componentFactoryRegistry);\n\n        this.picoContainer.addComponent(componentRegistry);\n        this.picoContainer.addComponent(componentFactoryRegistry);\n    }\n\n    public final void start(ServletContext context) {\n\t    ComponentRegistry componentRegistry = getComponentRegistry();\n\t    registerBundledComponents(componentRegistry);\n\n\t    this.picoContainer.addComponent(context);\n\n\t    BasicConfiguration config = new BasicConfiguration(context);\n\t    Scanner scanner = new ReflectionsScanner(config);\n\n\t    this.picoContainer.addComponent(scanner);\n\n\t    registerAnnotatedComponents(scanner, componentRegistry);\n\n\t    getComponentRegistry().init();\n\n\t    StereotypedComponentRegistrar componentRegistrar = picoContainer.getComponent(StereotypedComponentRegistrar.class);\n\t    componentRegistrar.registerFrom(scanner);\n\n\t    registerCustomComponents(picoContainer, scanner);\n\n\t    picoContainer.start();\n\n\t    registerCacheComponents();\n\t}\n\n    /**\n     * Create a child container, and register cached components. This way, Cached components will use registered implementations\n     * for their types, and will be used on dependency injection\n     */\n\tprivate void registerCacheComponents() {\n\t\tPicoComponentRegistry registry = getComponentRegistry();\n\t\tthis.childContainer = registry.makeChildContainer();\n\n\t\tMap<Class<?>, Class<?>> cachedComponents = BaseComponents.getCachedComponents();\n\t\tfor (Entry<Class<?>, Class<?>> entry : cachedComponents.entrySet()) {\n\t\t\tregistry.register(entry.getKey(), entry.getValue());\n\t\t}\n\n\t\tthis.childContainer.start();\n\t}\n\n\tprivate void registerAnnotatedComponents(Scanner scanner, ComponentRegistry componentRegistry) {\n\t\tCollection<Class<?>> collection = scanner.getTypesWithAnnotation(Component.class);\n\t\tfor (Class<?> componentType : collection) {\n\t\t\tif (ComponentFactory.class.isAssignableFrom(componentType)) {\n\t\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Registering found component factory \" + componentType);\n\t\t\t\t}\n\t\t\t\tcomponentRegistry.register(componentType, componentType);\n\t\t\t} else {\n\t\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"Deeply registering found component \" + componentType);\n\t\t\t\t}\n\t\t\t\tcomponentRegistry.deepRegister(componentType);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Register default vraptor-pico implementation components.\n\t */\n\tprotected void registerBundledComponents(ComponentRegistry registry) {\n\t    logger.debug(\"Registering base pico container related implementation components\");\n\t    for (Class<? extends StereotypeHandler> entry : BaseComponents.getStereotypeHandlers()) {\n\t\t\tregistry.register(entry, entry);\n\t\t}\n//\t    registry.register(ComponentHandler.class, ComponentHandler.class);\n\t    for (Map.Entry<Class<?>, Class<?>> entry : BaseComponents.getApplicationScoped().entrySet()) {\n\t        registry.register(entry.getKey(), entry.getValue());\n\t        registry.register(entry.getValue(), entry.getValue());\n\t    }\n\t    for (Map.Entry<Class<?>, Class<?>> entry : BaseComponents.getRequestScoped().entrySet()) {\n\t        registry.register(entry.getKey(), entry.getValue());\n\t        registry.register(entry.getValue(), entry.getValue());\n\t    }\n\t    for (Map.Entry<Class<?>, Class<?>> entry : BaseComponents.getPrototypeScoped().entrySet()) {\n\t    \tregistry.register(entry.getKey(), entry.getValue());\n\t    \tregistry.register(entry.getValue(), entry.getValue());\n\t    }\n\t    for (Class<? extends Converter<?>> converterType : BaseComponents.getBundledConverters()) {\n\t        registry.register(converterType, converterType);\n\t    }\n\n\t    registry.register(ResourceRegistrar.class, ResourceRegistrar.class);\n\t    registry.register(InterceptorRegistrar.class, InterceptorRegistrar.class);\n\t    registry.register(ConverterRegistrar.class, ConverterRegistrar.class);\n\t    registry.register(ComponentFactoryRegistrar.class, ComponentFactoryRegistrar.class);\n\t    registry.register(StereotypedComponentRegistrar.class, StereotypedComponentRegistrar.class);\n\n\t    try {\n\t\t\tClass.forName(\"org.joda.time.LocalDate\");\n\t\t\tregistry.register(LocalDateConverter.class, LocalDateConverter.class);\n\t\t\tregistry.register(LocalTimeConverter.class, LocalTimeConverter.class);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t//OK, only register jodatime converters if jodatime is imported\n\t\t}\n\t}\n\n\tprotected void registerCustomComponents(PicoContainer picoContainer, Scanner scanner) {\n\t\t/* TODO: For now, this is an empty hook method to enable subclasses to use\n\t\t * the scanner and register their specific components.\n\t\t *\n\t\t * In the future, if we scan the classpath for StereotypeHandlers, we can\n\t\t * eliminate this hook.\n\t\t */\n\t}\n\n\tpublic void stop() {\n\t    picoContainer.stop();\n\t    picoContainer.dispose();\n\t}\n\n\tpublic <T> T provideForRequest(RequestInfo request, Execution<T> execution) {\n        PicoBasedContainer container = null;\n        try {\n            container = getComponentRegistry().provideRequestContainer(request);\n            container.getContainer().start();\n            return execution.insideRequest(container);\n        } finally {\n            if (container != null) {\n                MutablePicoContainer picoContainer = container.getContainer();\n                picoContainer.stop();\n                picoContainer.dispose();\n            }\n        }\n    }\n\n    protected PicoComponentRegistry getComponentRegistry() {\n    \treturn this.picoContainer.getComponent(PicoComponentRegistry.class);\n    }\n}\n","lineNo":79}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport java.util.Map;\n\nimport javax.servlet.ServletContext;\n\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.aop.scope.ScopedProxyUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.AbstractBeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.annotation.ScopeMetadata;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.context.support.AbstractRefreshableWebApplicationContext;\nimport org.springframework.web.context.support.WebApplicationContextUtils;\n\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.converter.jodatime.LocalDateConverter;\nimport br.com.caelum.vraptor.converter.jodatime.LocalTimeConverter;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.StereotypeHandler;\n\n/**\n * @author Fabio Kung\n */\npublic class VRaptorApplicationContext extends AbstractRefreshableWebApplicationContext {\n    public static final String RESOURCES_LIST = \"br.com.caelum.vraptor.resources.list\";\n\n    private final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n    private final String[] basePackages;\n    private final SpringBasedContainer container;\n\n    public VRaptorApplicationContext(SpringBasedContainer container, String... basePackages) {\n        this.container = container;\n        this.basePackages = basePackages;\n    }\n\n    @Override\n    protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n        WebApplicationContextUtils.registerWebApplicationScopes(beanFactory);\n    }\n\n    @Override\n\tprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {\n        beanFactory.registerSingleton(ServletContext.class.getName(), getServletContext());\n        beanFactory.ignoreDependencyType(ServletContext.class);\n        registerApplicationScopedComponentsOn(beanFactory);\n        registerRequestScopedComponentsOn(beanFactory);\n        registerPrototypeScopedComponentsOn(beanFactory);\n        registerCustomComponentsOn(beanFactory);\n\n        new ComponentScanner(beanFactory, container).scan(basePackages);\n\n        AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);\n        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(beanFactory);\n        registerCustomInjectionProcessor(beanFactory);\n        registerCachedComponentsOn(beanFactory);\n    }\n\n    private void registerCustomComponentsOn(DefaultListableBeanFactory beanFactory) {\n    \tfor (Class<?> type : container.getToRegister()) {\n\t\t\tregister(type, beanFactory);\n\t\t}\n\t}\n\n    private void registerPrototypeScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n    \tfor (Class<?> prototypeComponent : BaseComponents.getPrototypeScoped().values()) {\n    \t\tregisterOn(beanFactory, prototypeComponent);\n    \t}\n    }\n\tprivate void registerCachedComponentsOn(DefaultListableBeanFactory beanFactory) {\n        for (Class<?> cachedComponent : BaseComponents.getCachedComponents().values()) {\n\t\t\tregisterOn(beanFactory, cachedComponent, true);\n\t\t}\n\t}\n\n\tprivate void registerApplicationScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n        for (Class<?> type : BaseComponents.getApplicationScoped().values()) {\n            registerOn(beanFactory, type);\n            registerFactory(type, beanFactory);\n        }\n\n        for (Class<? extends StereotypeHandler> handlerType : BaseComponents.getStereotypeHandlers()) {\n\t\t\tregisterOn(beanFactory, handlerType);\n\t\t}\n\n        registerOn(beanFactory, StereotypedBeansRegistrar.class);\n        registerOn(beanFactory, DefaultSpringLocator.class);\n    }\n\n    private void registerRequestScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n        for (Class<?> type : BaseComponents.getRequestScoped().values()) {\n            registerOn(beanFactory, type);\n            registerFactory(type, beanFactory);\n        }\n\n        for (Class<? extends Converter<?>> converterType : BaseComponents.getBundledConverters()) {\n\t        registerOn(beanFactory, converterType);\n\t    }\n\n        registerOn(beanFactory, VRaptorRequestProvider.class, true);\n        registerOn(beanFactory, HttpServletRequestProvider.class, true);\n        registerOn(beanFactory, HttpServletResponseProvider.class, true);\n        registerOn(beanFactory, HttpSessionProvider.class, true);\n\n        beanFactory.registerSingleton(SpringBasedContainer.class.getName(), container);\n\n        try {\n\t\t\tClass.forName(\"org.joda.time.LocalDate\");\n\t\t\tregisterOn(beanFactory, LocalDateConverter.class);\n\t\t\tregisterOn(beanFactory, LocalTimeConverter.class);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t//OK, only register jodatime converters if jodatime is imported\n\t\t}\n    }\n\n    private void register(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n        registerOn((BeanDefinitionRegistry) beanFactory, type, true);\n        registerFactory(type, beanFactory);\n    }\n\n\tprivate void registerFactory(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n\t\tif (ComponentFactory.class.isAssignableFrom(type)) {\n            beanFactory.registerSingleton(type.getName(), new ComponentFactoryBean(container, type));\n        }\n\t}\n    public void register(Class<?> type) {\n    \tregister(type, getBeanFactory());\n    }\n\n    private void registerOn(BeanDefinitionRegistry registry, Class<?> type) {\n        registerOn(registry, type, false);\n    }\n\n    private void registerOn(BeanDefinitionRegistry registry, Class<?> type, boolean customComponent) {\n\t\tAnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n        definition.setLazyInit(true);\n        definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_NO);\n        if (customComponent) {\n            definition.setPrimary(true);\n            definition.setRole(BeanDefinition.ROLE_APPLICATION);\n        } else {\n            definition.setPrimary(false);\n            definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n        }\n\n        String name = beanNameGenerator.generateBeanName(definition, registry);\n        BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name);\n\n        VRaptorScopeResolver scopeResolver = new VRaptorScopeResolver();\n        ScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition);\n        definitionHolder = applyScopeOn(registry, definitionHolder, scopeMetadata);\n\n        BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry);\n\t}\n\n    /**\n     * From org.springframework.context.annotation.ClassPathBeanDefinitionScanner#applyScope()\n     *\n     * @param definition\n     * @param scopeMetadata\n     * @return\n     */\n    private BeanDefinitionHolder applyScopeOn(BeanDefinitionRegistry registry, BeanDefinitionHolder definition, ScopeMetadata scopeMetadata) {\n        String scope = scopeMetadata.getScopeName();\n        ScopedProxyMode proxyMode = scopeMetadata.getScopedProxyMode();\n        definition.getBeanDefinition().setScope(scope);\n        if (BeanDefinition.SCOPE_SINGLETON.equals(scope) || BeanDefinition.SCOPE_PROTOTYPE.equals(scope) ||\n                proxyMode.equals(ScopedProxyMode.NO)) {\n            return definition;\n        } else {\n            boolean proxyTargetClass = proxyMode.equals(ScopedProxyMode.TARGET_CLASS);\n            return ScopedProxyUtils.createScopedProxy(definition, registry, proxyTargetClass);\n        }\n    }\n\n    private void registerCustomInjectionProcessor(BeanDefinitionRegistry registry) {\n        RootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n        definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n        definition.getPropertyValues().addPropertyValue(\"order\", Ordered.LOWEST_PRECEDENCE);\n        registry.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n    }\n\n    public <T> T getBean(Class<T> type) {\n        @SuppressWarnings(\"unchecked\")\n        Map<String, ? extends T> instances = BeanFactoryUtils.beansOfTypeIncludingAncestors(this, type);\n        if (instances.size() == 0) {\n            throw new NoSuchBeanDefinitionException(type, \"no bean for this type registered\");\n        } else if (instances.size() == 1) {\n            return instances.values().iterator().next();\n        } else {\n            for (Map.Entry<String, ? extends T> entry : instances.entrySet()) {\n                BeanDefinition definition = getBeanFactory().getBeanDefinition(entry.getKey());\n                if (isPrimary(definition)) {\n                    return entry.getValue();\n                } else if (hasGreaterRoleThanInfrastructure(definition)) {\n                    return entry.getValue();\n                }\n            }\n            throw new NoSuchBeanDefinitionException(\"there are \" + instances.size() +\n                    \" implementations for the type [\" + type +\n                    \"], but none of them is primary or has a Role greater than BeanDefinition.ROLE_INFRASTRUCTURE\");\n        }\n    }\n\n    private boolean isPrimary(BeanDefinition definition) {\n        return definition instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) definition).isPrimary();\n    }\n\n    private boolean hasGreaterRoleThanInfrastructure(BeanDefinition definition) {\n        return definition.getRole() < BeanDefinition.ROLE_INFRASTRUCTURE;\n    }\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport java.util.Map;\n\nimport javax.servlet.ServletContext;\n\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.aop.scope.ScopedProxyUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\nimport org.springframework.beans.factory.support.AbstractBeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.annotation.ScopeMetadata;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.context.support.AbstractRefreshableWebApplicationContext;\nimport org.springframework.web.context.support.WebApplicationContextUtils;\n\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.config.BasicConfiguration;\nimport br.com.caelum.vraptor.converter.jodatime.LocalDateConverter;\nimport br.com.caelum.vraptor.converter.jodatime.LocalTimeConverter;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.StereotypeHandler;\n\n/**\n * @author Fabio Kung\n */\npublic class VRaptorApplicationContext extends AbstractRefreshableWebApplicationContext {\n    public static final String RESOURCES_LIST = \"br.com.caelum.vraptor.resources.list\";\n\n    private final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n    private final SpringBasedContainer container;\n\tprivate final BasicConfiguration config;\n\n    public VRaptorApplicationContext(SpringBasedContainer container, BasicConfiguration config) {\n        this.container = container;\n        this.config = config;\n    }\n\n    @Override\n    protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n        WebApplicationContextUtils.registerWebApplicationScopes(beanFactory);\n    }\n\n    @Override\n\tprotected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) {\n        beanFactory.registerSingleton(ServletContext.class.getName(), getServletContext());\n        beanFactory.ignoreDependencyType(ServletContext.class);\n        registerApplicationScopedComponentsOn(beanFactory);\n        registerRequestScopedComponentsOn(beanFactory);\n        registerPrototypeScopedComponentsOn(beanFactory);\n        registerCustomComponentsOn(beanFactory);\n\n        ComponentScanner scanner = new ComponentScanner(beanFactory, container);\n        if(config.hasBasePackages()) {\n        \tscanner.scan(config.getBasePackages());\n        }\n        else {\n            // if there is no base packages, scan all package\n        }\n\n        AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);\n        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(beanFactory);\n        registerCustomInjectionProcessor(beanFactory);\n        registerCachedComponentsOn(beanFactory);\n    }\n\n    private void registerCustomComponentsOn(DefaultListableBeanFactory beanFactory) {\n    \tfor (Class<?> type : container.getToRegister()) {\n\t\t\tregister(type, beanFactory);\n\t\t}\n\t}\n\n    private void registerPrototypeScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n    \tfor (Class<?> prototypeComponent : BaseComponents.getPrototypeScoped().values()) {\n    \t\tregisterOn(beanFactory, prototypeComponent);\n    \t}\n    }\n\tprivate void registerCachedComponentsOn(DefaultListableBeanFactory beanFactory) {\n        for (Class<?> cachedComponent : BaseComponents.getCachedComponents().values()) {\n\t\t\tregisterOn(beanFactory, cachedComponent, true);\n\t\t}\n\t}\n\n\tprivate void registerApplicationScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n        for (Class<?> type : BaseComponents.getApplicationScoped().values()) {\n            registerOn(beanFactory, type);\n            registerFactory(type, beanFactory);\n        }\n\n        for (Class<? extends StereotypeHandler> handlerType : BaseComponents.getStereotypeHandlers()) {\n\t\t\tregisterOn(beanFactory, handlerType);\n\t\t}\n\n        registerOn(beanFactory, StereotypedBeansRegistrar.class);\n        registerOn(beanFactory, DefaultSpringLocator.class);\n    }\n\n    private void registerRequestScopedComponentsOn(DefaultListableBeanFactory beanFactory) {\n        for (Class<?> type : BaseComponents.getRequestScoped().values()) {\n            registerOn(beanFactory, type);\n            registerFactory(type, beanFactory);\n        }\n\n        for (Class<? extends Converter<?>> converterType : BaseComponents.getBundledConverters()) {\n\t        registerOn(beanFactory, converterType);\n\t    }\n\n        registerOn(beanFactory, VRaptorRequestProvider.class, true);\n        registerOn(beanFactory, HttpServletRequestProvider.class, true);\n        registerOn(beanFactory, HttpServletResponseProvider.class, true);\n        registerOn(beanFactory, HttpSessionProvider.class, true);\n\n        beanFactory.registerSingleton(SpringBasedContainer.class.getName(), container);\n\n        try {\n\t\t\tClass.forName(\"org.joda.time.LocalDate\");\n\t\t\tregisterOn(beanFactory, LocalDateConverter.class);\n\t\t\tregisterOn(beanFactory, LocalTimeConverter.class);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\t//OK, only register jodatime converters if jodatime is imported\n\t\t}\n    }\n\n    private void register(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n        registerOn((BeanDefinitionRegistry) beanFactory, type, true);\n        registerFactory(type, beanFactory);\n    }\n\n\tprivate void registerFactory(final Class<?> type, ConfigurableListableBeanFactory beanFactory) {\n\t\tif (ComponentFactory.class.isAssignableFrom(type)) {\n            beanFactory.registerSingleton(type.getName(), new ComponentFactoryBean(container, type));\n        }\n\t}\n    public void register(Class<?> type) {\n    \tregister(type, getBeanFactory());\n    }\n\n    private void registerOn(BeanDefinitionRegistry registry, Class<?> type) {\n        registerOn(registry, type, false);\n    }\n\n    private void registerOn(BeanDefinitionRegistry registry, Class<?> type, boolean customComponent) {\n\t\tAnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n        definition.setLazyInit(true);\n        definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_NO);\n        if (customComponent) {\n            definition.setPrimary(true);\n            definition.setRole(BeanDefinition.ROLE_APPLICATION);\n        } else {\n            definition.setPrimary(false);\n            definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n        }\n\n        String name = beanNameGenerator.generateBeanName(definition, registry);\n        BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name);\n\n        VRaptorScopeResolver scopeResolver = new VRaptorScopeResolver();\n        ScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition);\n        definitionHolder = applyScopeOn(registry, definitionHolder, scopeMetadata);\n\n        BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, registry);\n\t}\n\n    /**\n     * From org.springframework.context.annotation.ClassPathBeanDefinitionScanner#applyScope()\n     *\n     * @param definition\n     * @param scopeMetadata\n     * @return\n     */\n    private BeanDefinitionHolder applyScopeOn(BeanDefinitionRegistry registry, BeanDefinitionHolder definition, ScopeMetadata scopeMetadata) {\n        String scope = scopeMetadata.getScopeName();\n        ScopedProxyMode proxyMode = scopeMetadata.getScopedProxyMode();\n        definition.getBeanDefinition().setScope(scope);\n        if (BeanDefinition.SCOPE_SINGLETON.equals(scope) || BeanDefinition.SCOPE_PROTOTYPE.equals(scope) ||\n                proxyMode.equals(ScopedProxyMode.NO)) {\n            return definition;\n        } else {\n            boolean proxyTargetClass = proxyMode.equals(ScopedProxyMode.TARGET_CLASS);\n            return ScopedProxyUtils.createScopedProxy(definition, registry, proxyTargetClass);\n        }\n    }\n\n    private void registerCustomInjectionProcessor(BeanDefinitionRegistry registry) {\n        RootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n        definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n        definition.getPropertyValues().addPropertyValue(\"order\", Ordered.LOWEST_PRECEDENCE);\n        registry.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n    }\n\n    public <T> T getBean(Class<T> type) {\n        @SuppressWarnings(\"unchecked\")\n        Map<String, ? extends T> instances = BeanFactoryUtils.beansOfTypeIncludingAncestors(this, type);\n        if (instances.size() == 0) {\n            throw new NoSuchBeanDefinitionException(type, \"no bean for this type registered\");\n        } else if (instances.size() == 1) {\n            return instances.values().iterator().next();\n        } else {\n            for (Map.Entry<String, ? extends T> entry : instances.entrySet()) {\n                BeanDefinition definition = getBeanFactory().getBeanDefinition(entry.getKey());\n                if (isPrimary(definition)) {\n                    return entry.getValue();\n                } else if (hasGreaterRoleThanInfrastructure(definition)) {\n                    return entry.getValue();\n                }\n            }\n            throw new NoSuchBeanDefinitionException(\"there are \" + instances.size() +\n                    \" implementations for the type [\" + type +\n                    \"], but none of them is primary or has a Role greater than BeanDefinition.ROLE_INFRASTRUCTURE\");\n        }\n    }\n\n    private boolean isPrimary(BeanDefinition definition) {\n        return definition instanceof AbstractBeanDefinition && ((AbstractBeanDefinition) definition).isPrimary();\n    }\n\n    private boolean hasGreaterRoleThanInfrastructure(BeanDefinition definition) {\n        return definition.getRole() < BeanDefinition.ROLE_INFRASTRUCTURE;\n    }\n}\n","lineNo":82}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceClass;\n\n/**\n * The default parser routes creator uses the path annotation to create rules.\n * Note that methods are only registered to be public accessible if the type is\n * annotated with @Resource.\n *\n * If you want to override the convention for default URI, you can create a\n * class like:\n *\n * public class MyRoutesParser extends PathAnnotationRoutesParser { //delegate\n * constructor protected String extractControllerNameFrom(Class<?> type) {\n * return //your convention here }\n *\n * protected String defaultUriFor(String controllerName, String methodName) {\n * return //your convention here } }\n *\n * @author Guilherme Silveira\n * @author Lucas Cavalcanti\n */\n@ApplicationScoped\npublic class PathAnnotationRoutesParser implements RoutesParser {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(PathAnnotationRoutesParser.class);\n\n\tprivate final Proxifier proxifier;\n\tprivate final TypeFinder finder;\n\n\tpublic PathAnnotationRoutesParser(Proxifier proxifier, TypeFinder finder) {\n\t\tthis.proxifier = proxifier;\n\t\tthis.finder = finder;\n\t}\n\n\tpublic List<Route> rulesFor(ResourceClass resource) {\n\t\tList<Route> routes = new ArrayList<Route>();\n\t\tClass<?> baseType = resource.getType();\n\t\tregisterRulesFor(baseType, baseType, routes);\n\t\treturn routes;\n\t}\n\n\tprivate void registerRulesFor(Class<?> actualType, Class<?> baseType, List<Route> routes) {\n\t\tif (actualType.equals(Object.class)) {\n\t\t\treturn;\n\t\t}\n\t\tfor (Method javaMethod : actualType.getDeclaredMethods()) {\n\t\t\tif (isEligible(javaMethod)) {\n\t\t\t\tString[] uris = getURIsFor(javaMethod, baseType);\n\n\t\t\t\tfor (String uri : uris) {\n\t\t\t\t\tRouteBuilder rule = new RouteBuilder(proxifier, finder, uri);\n\t\t\t\t\tfor (HttpMethod m : HttpMethod.values()) {\n\t\t\t\t\t\tif (javaMethod.isAnnotationPresent(m.getAnnotation())) {\n\t\t\t\t\t\t\trule.with(m);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (javaMethod.isAnnotationPresent(Path.class)) {\n\t\t\t\t\t\trule.withPriority(javaMethod.getAnnotation(Path.class).priority());\n\t\t\t\t\t}\n\t\t\t\t\trule.is(baseType, javaMethod);\n\t\t\t\t\troutes.add(rule.build());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tregisterRulesFor(actualType.getSuperclass(), baseType, routes);\n\t}\n\n\tprivate boolean isEligible(Method javaMethod) {\n\t\treturn Modifier.isPublic(javaMethod.getModifiers()) && !Modifier.isStatic(javaMethod.getModifiers());\n\t}\n\n\tprivate String[] getURIsFor(Method javaMethod, Class<?> type) {\n\n\t\tif (javaMethod.isAnnotationPresent(Path.class)) {\n\t\t\tString[] uris = javaMethod.getAnnotation(Path.class).value();\n\n\t\t\tif (uris.length == 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"You must specify at least one path in @Path at \" + javaMethod);\n\t\t\t}\n\n\t\t\tfixURIs(javaMethod, type, uris);\n\n\t\t\treturn uris;\n\t\t}\n\n\t\treturn new String[] { defaultUriFor(extractControllerNameFrom(type), javaMethod.getName()) };\n\t}\n\n\tprivate void fixURIs(Method javaMethod, Class<?> type, String[] uris) {\n\t\tString prefix = extractPrefix(type);\n\t\tfor (int i = 0; i < uris.length; i++) {\n\t\t\tString uri = uris[i];\n\t\t\tif (!uri.startsWith(\"/\")) {\n\t\t\t\tlogger.warn(\"All uris from @Path must start with a '/'. Please change it on \" + javaMethod);\n\t\t\t\turis[i] = \"/\" + uri;\n\t\t\t}\n\t\t\turis[i] = prefix + uris[i];\n\t\t}\n\t}\n\n\tprivate String extractPrefix(Class<?> type) {\n\t\tif (type.isAnnotationPresent(Path.class)) {\n\t\t\tString[] uris = type.getAnnotation(Path.class).value();\n\t\t\treturn uris[0];\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t/**\n\t * You can override this method for use a different convention for your\n\t * controller name, given a type\n\t */\n\tprotected String extractControllerNameFrom(Class<?> type) {\n\t\tString prefix = extractPrefix(type);\n\t\tif (\"\".equals(prefix)) {\n\t\t\tString baseName = lowerFirstCharacter(type.getSimpleName());\n\t\t\tif (baseName.endsWith(\"Controller\")) {\n\t\t\t\treturn \"/\" + baseName.substring(0, baseName.lastIndexOf(\"Controller\"));\n\t\t\t}\n\t\t\treturn \"/\" + baseName;\n\t\t} else {\n\t\t\treturn prefix;\n\t\t}\n\t}\n\n\t/**\n\t * You can override this method for use a different convention for your\n\t * default URI, given a controller name and a method name\n\t */\n\tprotected String defaultUriFor(String controllerName, String methodName) {\n\t\treturn controllerName + \"/\" + methodName;\n\t}\n\n\tprivate String lowerFirstCharacter(String baseName) {\n\t\treturn baseName.toLowerCase().substring(0, 1) + baseName.substring(1, baseName.length());\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceClass;\n\n/**\n * The default parser routes creator uses the path annotation to create rules.\n * Note that methods are only registered to be public accessible if the type is\n * annotated with @Resource.\n *\n * If you want to override the convention for default URI, you can create a\n * class like:\n *\n * public class MyRoutesParser extends PathAnnotationRoutesParser { //delegate\n * constructor protected String extractControllerNameFrom(Class<?> type) {\n * return //your convention here }\n *\n * protected String defaultUriFor(String controllerName, String methodName) {\n * return //your convention here } }\n *\n * @author Guilherme Silveira\n * @author Lucas Cavalcanti\n */\n@ApplicationScoped\npublic class PathAnnotationRoutesParser implements RoutesParser {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(PathAnnotationRoutesParser.class);\n\n\tprivate final Proxifier proxifier;\n\tprivate final TypeFinder finder;\n\n\tpublic PathAnnotationRoutesParser(Proxifier proxifier, TypeFinder finder) {\n\t\tthis.proxifier = proxifier;\n\t\tthis.finder = finder;\n\t}\n\n\tpublic List<Route> rulesFor(ResourceClass resource) {\n\t\tList<Route> routes = new ArrayList<Route>();\n\t\tClass<?> baseType = resource.getType();\n\t\tregisterRulesFor(baseType, baseType, routes);\n\t\treturn routes;\n\t}\n\n\tprivate void registerRulesFor(Class<?> actualType, Class<?> baseType, List<Route> routes) {\n\t\tif (actualType.equals(Object.class)) {\n\t\t\treturn;\n\t\t}\n\t\tfor (Method javaMethod : actualType.getDeclaredMethods()) {\n\t\t\tif (isEligible(javaMethod)) {\n\t\t\t\tString[] uris = getURIsFor(javaMethod, baseType);\n\n\t\t\t\tfor (String uri : uris) {\n\t\t\t\t\tRouteBuilder rule = new RouteBuilder(proxifier, finder, uri);\n\t\t\t\t\tfor (HttpMethod m : HttpMethod.values()) {\n\t\t\t\t\t\tif (javaMethod.isAnnotationPresent(m.getAnnotation())) {\n\t\t\t\t\t\t\trule.with(m);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (javaMethod.isAnnotationPresent(Path.class)) {\n\t\t\t\t\t\trule.withPriority(javaMethod.getAnnotation(Path.class).priority());\n\t\t\t\t\t}\n\t\t\t\t\trule.is(baseType, javaMethod);\n\t\t\t\t\troutes.add(rule.build());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tregisterRulesFor(actualType.getSuperclass(), baseType, routes);\n\t}\n\n\tprivate boolean isEligible(Method javaMethod) {\n\t\treturn Modifier.isPublic(javaMethod.getModifiers()) && !Modifier.isStatic(javaMethod.getModifiers());\n\t}\n\n\tprivate String[] getURIsFor(Method javaMethod, Class<?> type) {\n\n\t\tif (javaMethod.isAnnotationPresent(Path.class)) {\n\t\t\tString[] uris = javaMethod.getAnnotation(Path.class).value();\n\n\t\t\tif (uris.length == 0) {\n\t\t\t\tthrow new IllegalArgumentException(\"You must specify at least one path in @Path at \" + javaMethod);\n\t\t\t}\n\n\t\t\tfixURIs(javaMethod, type, uris);\n\n\t\t\treturn uris;\n\t\t}\n\n\t\treturn new String[] { defaultUriFor(extractControllerNameFrom(type), javaMethod.getName()) };\n\t}\n\n\tprivate void fixURIs(Method javaMethod, Class<?> type, String[] uris) {\n\t\tString prefix = extractPrefix(type);\n\t\tfor (int i = 0; i < uris.length; i++) {\n\t\t\tString uri = fixLeadingSlash(type, uris[i]);\n\t\t\turis[i] = prefix + uri;\n\t\t}\n\t}\n\n\tprivate String extractPrefix(Class<?> type) {\n\t\tif (type.isAnnotationPresent(Path.class)) {\n\t\t\tString[] uris = type.getAnnotation(Path.class).value();\n\t\t\treturn fixLeadingSlash(type, uris[0]);\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tprivate String fixLeadingSlash(Class<?> type, String uri) {\n\t\tif (!uri.startsWith(\"/\")) {\n\t\t\tlogger.warn(\"All uris from @Path must start with a '/'. Please change it on \" + type);\n\t\t\treturn  \"/\" + uri;\n\t\t}\n\t\treturn uri;\n\t}\n\n\t/**\n\t * You can override this method for use a different convention for your\n\t * controller name, given a type\n\t */\n\tprotected String extractControllerNameFrom(Class<?> type) {\n\t\tString prefix = extractPrefix(type);\n\t\tif (\"\".equals(prefix)) {\n\t\t\tString baseName = lowerFirstCharacter(type.getSimpleName());\n\t\t\tif (baseName.endsWith(\"Controller\")) {\n\t\t\t\treturn \"/\" + baseName.substring(0, baseName.lastIndexOf(\"Controller\"));\n\t\t\t}\n\t\t\treturn \"/\" + baseName;\n\t\t} else {\n\t\t\treturn prefix;\n\t\t}\n\t}\n\n\t/**\n\t * You can override this method for use a different convention for your\n\t * default URI, given a controller name and a method name\n\t */\n\tprotected String defaultUriFor(String controllerName, String methodName) {\n\t\treturn controllerName + \"/\" + methodName;\n\t}\n\n\tprivate String lowerFirstCharacter(String baseName) {\n\t\treturn baseName.toLowerCase().substring(0, 1) + baseName.substring(1, baseName.length());\n\t}\n\n}\n","lineNo":122}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n * \thttp://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */\npackage br.com.caelum.vraptor.core;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport java.io.File;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class DefaultStaticContentHandlerTest {\n\n    private Mockery mockery;\n    private HttpServletRequest request;\n    private ServletContext context;\n\n    @Before\n    public void setup() {\n        this.mockery = new Mockery();\n        this.request = mockery.mock(HttpServletRequest.class);\n        this.context = mockery.mock(ServletContext.class);\n    }\n\n    @Test\n    public void returnsTrueForRealStaticResources() throws Exception {\n        mockery.checking(new Expectations() {\n            {\n                one(request).getRequestURI();\n                File file = File.createTempFile(\"_test\", \".xml\");\n                String key = file.getAbsolutePath();\n                will(returnValue(\"/contextName/\" +key));\n                one(request).getContextPath(); will(returnValue(\"/contextName/\"));\n                one(context).getResource(key); will(returnValue(file.toURI().toURL()));\n            }\n        });\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n        assertThat(result, is(equalTo(true)));\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void returnsFalseForNonStaticResources() throws Exception {\n        mockery.checking(new Expectations() {\n            {\n                File file = new File(\"_test_unknown.xml\");\n                String key = file.getAbsolutePath();\n                one(request).getRequestURI();\n                will(returnValue(\"/contextName/\" +key));\n                one(request).getContextPath(); will(returnValue(\"/contextName/\"));\n                one(context).getResource(key); will(returnValue(null));\n            }\n        });\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n        assertThat(result, is(equalTo(false)));\n        mockery.assertIsSatisfied();\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.mockito.Mockito.when;\n\nimport java.io.File;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class DefaultStaticContentHandlerTest {\n\n    @Mock private HttpServletRequest request;\n    @Mock private ServletContext context;\n\n    @Before\n    public void setup() {\n    \tMockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void returnsTrueForRealStaticResources() throws Exception {\n    \tFile file = File.createTempFile(\"_test\", \".xml\");\n    \tString key = file.getAbsolutePath();\n    \twhen(request.getRequestURI()).thenReturn(\"/contextName/\" +key);\n        when(request.getContextPath()).thenReturn(\"/contextName/\");\n        when(context.getResource(key)).thenReturn(file.toURI().toURL());\n\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n\n        assertThat(result, is(equalTo(true)));\n    }\n\n    @Test\n    public void returnsFalseForNonStaticResources() throws Exception {\n        File file = new File(\"_test_unknown.xml\");\n        String key = file.getAbsolutePath();\n        when(request.getRequestURI()).thenReturn(\"/contextName/\" +key);\n        when(request.getContextPath()).thenReturn(\"/contextName/\");\n        when(context.getResource(key)).thenReturn(null);\n\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n\n        assertThat(result, is(equalTo(false)));\n    }\n\n}\n","lineNo":46}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n * \thttp://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */\npackage br.com.caelum.vraptor.core;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport java.io.File;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class DefaultStaticContentHandlerTest {\n\n    private Mockery mockery;\n    private HttpServletRequest request;\n    private ServletContext context;\n\n    @Before\n    public void setup() {\n        this.mockery = new Mockery();\n        this.request = mockery.mock(HttpServletRequest.class);\n        this.context = mockery.mock(ServletContext.class);\n    }\n\n    @Test\n    public void returnsTrueForRealStaticResources() throws Exception {\n        mockery.checking(new Expectations() {\n            {\n                one(request).getRequestURI();\n                File file = File.createTempFile(\"_test\", \".xml\");\n                String key = file.getAbsolutePath();\n                will(returnValue(\"/contextName/\" +key));\n                one(request).getContextPath(); will(returnValue(\"/contextName/\"));\n                one(context).getResource(key); will(returnValue(file.toURI().toURL()));\n            }\n        });\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n        assertThat(result, is(equalTo(true)));\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void returnsFalseForNonStaticResources() throws Exception {\n        mockery.checking(new Expectations() {\n            {\n                File file = new File(\"_test_unknown.xml\");\n                String key = file.getAbsolutePath();\n                one(request).getRequestURI();\n                will(returnValue(\"/contextName/\" +key));\n                one(request).getContextPath(); will(returnValue(\"/contextName/\"));\n                one(context).getResource(key); will(returnValue(null));\n            }\n        });\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n        assertThat(result, is(equalTo(false)));\n        mockery.assertIsSatisfied();\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.mockito.Mockito.when;\n\nimport java.io.File;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class DefaultStaticContentHandlerTest {\n\n    @Mock private HttpServletRequest request;\n    @Mock private ServletContext context;\n\n    @Before\n    public void setup() {\n    \tMockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void returnsTrueForRealStaticResources() throws Exception {\n    \tFile file = File.createTempFile(\"_test\", \".xml\");\n    \tString key = file.getAbsolutePath();\n    \twhen(request.getRequestURI()).thenReturn(\"/contextName/\" +key);\n        when(request.getContextPath()).thenReturn(\"/contextName/\");\n        when(context.getResource(key)).thenReturn(file.toURI().toURL());\n\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n\n        assertThat(result, is(equalTo(true)));\n    }\n\n    @Test\n    public void returnsFalseForNonStaticResources() throws Exception {\n        File file = new File(\"_test_unknown.xml\");\n        String key = file.getAbsolutePath();\n        when(request.getRequestURI()).thenReturn(\"/contextName/\" +key);\n        when(request.getContextPath()).thenReturn(\"/contextName/\");\n        when(context.getResource(key)).thenReturn(null);\n\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n\n        assertThat(result, is(equalTo(false)));\n    }\n\n}\n","lineNo":47}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n * \thttp://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */\npackage br.com.caelum.vraptor.core;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport java.io.File;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class DefaultStaticContentHandlerTest {\n\n    private Mockery mockery;\n    private HttpServletRequest request;\n    private ServletContext context;\n\n    @Before\n    public void setup() {\n        this.mockery = new Mockery();\n        this.request = mockery.mock(HttpServletRequest.class);\n        this.context = mockery.mock(ServletContext.class);\n    }\n\n    @Test\n    public void returnsTrueForRealStaticResources() throws Exception {\n        mockery.checking(new Expectations() {\n            {\n                one(request).getRequestURI();\n                File file = File.createTempFile(\"_test\", \".xml\");\n                String key = file.getAbsolutePath();\n                will(returnValue(\"/contextName/\" +key));\n                one(request).getContextPath(); will(returnValue(\"/contextName/\"));\n                one(context).getResource(key); will(returnValue(file.toURI().toURL()));\n            }\n        });\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n        assertThat(result, is(equalTo(true)));\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void returnsFalseForNonStaticResources() throws Exception {\n        mockery.checking(new Expectations() {\n            {\n                File file = new File(\"_test_unknown.xml\");\n                String key = file.getAbsolutePath();\n                one(request).getRequestURI();\n                will(returnValue(\"/contextName/\" +key));\n                one(request).getContextPath(); will(returnValue(\"/contextName/\"));\n                one(context).getResource(key); will(returnValue(null));\n            }\n        });\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n        assertThat(result, is(equalTo(false)));\n        mockery.assertIsSatisfied();\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.mockito.Mockito.when;\n\nimport java.io.File;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class DefaultStaticContentHandlerTest {\n\n    @Mock private HttpServletRequest request;\n    @Mock private ServletContext context;\n\n    @Before\n    public void setup() {\n    \tMockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void returnsTrueForRealStaticResources() throws Exception {\n    \tFile file = File.createTempFile(\"_test\", \".xml\");\n    \tString key = file.getAbsolutePath();\n    \twhen(request.getRequestURI()).thenReturn(\"/contextName/\" +key);\n        when(request.getContextPath()).thenReturn(\"/contextName/\");\n        when(context.getResource(key)).thenReturn(file.toURI().toURL());\n\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n\n        assertThat(result, is(equalTo(true)));\n    }\n\n    @Test\n    public void returnsFalseForNonStaticResources() throws Exception {\n        File file = new File(\"_test_unknown.xml\");\n        String key = file.getAbsolutePath();\n        when(request.getRequestURI()).thenReturn(\"/contextName/\" +key);\n        when(request.getContextPath()).thenReturn(\"/contextName/\");\n        when(context.getResource(key)).thenReturn(null);\n\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n\n        assertThat(result, is(equalTo(false)));\n    }\n\n}\n","lineNo":59}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n * \thttp://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */\npackage br.com.caelum.vraptor.core;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport java.io.File;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class DefaultStaticContentHandlerTest {\n\n    private Mockery mockery;\n    private HttpServletRequest request;\n    private ServletContext context;\n\n    @Before\n    public void setup() {\n        this.mockery = new Mockery();\n        this.request = mockery.mock(HttpServletRequest.class);\n        this.context = mockery.mock(ServletContext.class);\n    }\n\n    @Test\n    public void returnsTrueForRealStaticResources() throws Exception {\n        mockery.checking(new Expectations() {\n            {\n                one(request).getRequestURI();\n                File file = File.createTempFile(\"_test\", \".xml\");\n                String key = file.getAbsolutePath();\n                will(returnValue(\"/contextName/\" +key));\n                one(request).getContextPath(); will(returnValue(\"/contextName/\"));\n                one(context).getResource(key); will(returnValue(file.toURI().toURL()));\n            }\n        });\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n        assertThat(result, is(equalTo(true)));\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void returnsFalseForNonStaticResources() throws Exception {\n        mockery.checking(new Expectations() {\n            {\n                File file = new File(\"_test_unknown.xml\");\n                String key = file.getAbsolutePath();\n                one(request).getRequestURI();\n                will(returnValue(\"/contextName/\" +key));\n                one(request).getContextPath(); will(returnValue(\"/contextName/\"));\n                one(context).getResource(key); will(returnValue(null));\n            }\n        });\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n        assertThat(result, is(equalTo(false)));\n        mockery.assertIsSatisfied();\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.mockito.Mockito.when;\n\nimport java.io.File;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class DefaultStaticContentHandlerTest {\n\n    @Mock private HttpServletRequest request;\n    @Mock private ServletContext context;\n\n    @Before\n    public void setup() {\n    \tMockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void returnsTrueForRealStaticResources() throws Exception {\n    \tFile file = File.createTempFile(\"_test\", \".xml\");\n    \tString key = file.getAbsolutePath();\n    \twhen(request.getRequestURI()).thenReturn(\"/contextName/\" +key);\n        when(request.getContextPath()).thenReturn(\"/contextName/\");\n        when(context.getResource(key)).thenReturn(file.toURI().toURL());\n\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n\n        assertThat(result, is(equalTo(true)));\n    }\n\n    @Test\n    public void returnsFalseForNonStaticResources() throws Exception {\n        File file = new File(\"_test_unknown.xml\");\n        String key = file.getAbsolutePath();\n        when(request.getRequestURI()).thenReturn(\"/contextName/\" +key);\n        when(request.getContextPath()).thenReturn(\"/contextName/\");\n        when(context.getResource(key)).thenReturn(null);\n\n        boolean result = new DefaultStaticContentHandler(context).requestingStaticFile(request);\n\n        assertThat(result, is(equalTo(false)));\n    }\n\n}\n","lineNo":60}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.instanceOf;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.typeCompatibleWith;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.ResourceBundle;\nimport java.util.Map.Entry;\n\nimport org.jmock.Expectations;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.Convert;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.converter.BooleanConverter;\nimport br.com.caelum.vraptor.converter.ByteConverter;\nimport br.com.caelum.vraptor.converter.DoubleConverter;\nimport br.com.caelum.vraptor.converter.EnumConverter;\nimport br.com.caelum.vraptor.converter.FloatConverter;\nimport br.com.caelum.vraptor.converter.IntegerConverter;\nimport br.com.caelum.vraptor.converter.LocaleBasedCalendarConverter;\nimport br.com.caelum.vraptor.converter.LocaleBasedDateConverter;\nimport br.com.caelum.vraptor.converter.LongConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveBooleanConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveByteConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveDoubleConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveFloatConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveIntConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveLongConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveShortConverter;\nimport br.com.caelum.vraptor.converter.ShortConverter;\nimport br.com.caelum.vraptor.interceptor.multipart.UploadedFile;\nimport br.com.caelum.vraptor.interceptor.multipart.UploadedFileConverter;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class DefaultConvertersTest {\n\n    private VRaptorMockery mockery;\n    private Container container;\n    private DefaultConverters converters;\n    private ComponentRegistry componentRegistry;\n\n    @Before\n    public void setup() {\n        this.mockery = new VRaptorMockery(true);\n        this.container = mockery.mock(Container.class);\n        this.componentRegistry = mockery.mock(ComponentRegistry.class);\n        mockery.checking(new Expectations() {\n            {\n                allowing(componentRegistry).register((Class<?>) with(an(Class.class)), (Class<?>) with(an(Class.class)));\n            }\n        });\n        this.converters = new DefaultConverters();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n\t@Test\n    public void shouldRegisterConvertersForAllDefaultTypes() {\n        final HashMap<Class, Class<? extends Converter>> EXPECTED_CONVERTERS = new HashMap<Class, Class<? extends Converter>>() {\n            {\n                put(int.class, PrimitiveIntConverter.class);\n                put(long.class, PrimitiveLongConverter.class);\n                put(short.class, PrimitiveShortConverter.class);\n                put(byte.class, PrimitiveByteConverter.class);\n                put(double.class, PrimitiveDoubleConverter.class);\n                put(float.class, PrimitiveFloatConverter.class);\n                put(boolean.class, PrimitiveBooleanConverter.class);\n                put(Integer.class, IntegerConverter.class);\n                put(Long.class, LongConverter.class);\n                put(Short.class, ShortConverter.class);\n                put(Byte.class, ByteConverter.class);\n                put(Double.class, DoubleConverter.class);\n                put(Float.class, FloatConverter.class);\n                put(Boolean.class, BooleanConverter.class);\n                put(Calendar.class, LocaleBasedCalendarConverter.class);\n                put(Date.class, LocaleBasedDateConverter.class);\n                put(Enum.class, EnumConverter.class);\n                put(UploadedFile.class, UploadedFileConverter.class);\n            }\n            private static final long serialVersionUID = 8559316558416038474L;\n        };\n\n        mockery.checking(new Expectations() {\n            {\n                for (Class<? extends Converter> converterType : EXPECTED_CONVERTERS.values()) {\n                    Converter<?> expected = mockery.mock(converterType);\n                    one(componentRegistry).register(converterType, converterType);\n                    one(container).instanceFor(converterType);\n                    will(returnValue(expected));\n                }\n            }\n        });\n\n        for (Entry<Class, Class<? extends Converter>> entry : EXPECTED_CONVERTERS.entrySet()) {\n            Class<?> typeFor = entry.getKey();\n            Class<? extends Converter> converterType = entry.getValue();\n            Converter<?> converter = converters.to(typeFor, container);\n            assertThat(converter, is(instanceOf(converterType)));\n        }\n    }\n\n    @Test(expected = VRaptorException.class)\n    public void complainsIfNoConverterFound() {\n        converters.to(DefaultConvertersTest.class, container);\n    }\n\n    @Test(expected = VRaptorException.class)\n    public void convertingANonAnnotatedConverterEndsUpComplaining() {\n        converters.register(WrongConverter.class);\n    }\n\n    class WrongConverter implements Converter<String> {\n\n        public String convert(String value, Class<? extends String> type, ResourceBundle bundle) {\n            return null;\n        }\n    }\n\n    class MyData {\n    }\n\n    @Convert(MyData.class)\n    class MyConverter implements Converter<MyData> {\n        public MyData convert(String value, Class<? extends MyData> type, ResourceBundle bundle) {\n            return null;\n        }\n    }\n\n    @Convert(MyData.class)\n    class MySecondConverter implements Converter<MyData> {\n        public MyData convert(String value, Class<? extends MyData> type, ResourceBundle bundle) {\n            return null;\n        }\n    }\n\n    @Test\n    public void registersAndUsesTheConverterInstaceForTheSpecifiedType() {\n        converters.register(MyConverter.class);\n        mockery.checking(new Expectations() {\n            {\n                one(container).instanceFor(MyConverter.class);\n                will(returnValue(new MyConverter()));\n            }\n        });\n        Converter<?> found = converters.to(MyData.class, container);\n        assertThat(found.getClass(), is(typeCompatibleWith(MyConverter.class)));\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void usesTheLastConverterInstanceRegisteredForTheSpecifiedType() {\n        converters.register(MyConverter.class);\n        converters.register(MySecondConverter.class);\n        mockery.checking(new Expectations() {\n            {\n                one(container).instanceFor(MySecondConverter.class);\n                will(returnValue(new MySecondConverter()));\n            }\n        });\n        Converter<?> found = converters.to(MyData.class, container);\n        assertThat(found.getClass(), is(typeCompatibleWith(MySecondConverter.class)));\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n\tpublic void existsForWillReturnTrueForRegisteredConverters() throws Exception {\n\t\tconverters.register(MyConverter.class);\n\n\t\tmockery.checking(new Expectations() {\n            {\n                allowing(container).instanceFor(MyConverter.class);\n                will(returnValue(new MyConverter()));\n            }\n        });\n\n\t\tassertTrue(converters.existsFor(MyData.class, container));\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage br.com.caelum.vraptor.core;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.instanceOf;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.typeCompatibleWith;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.ResourceBundle;\nimport java.util.Map.Entry;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport br.com.caelum.vraptor.Convert;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.converter.BooleanConverter;\nimport br.com.caelum.vraptor.converter.ByteConverter;\nimport br.com.caelum.vraptor.converter.DoubleConverter;\nimport br.com.caelum.vraptor.converter.EnumConverter;\nimport br.com.caelum.vraptor.converter.FloatConverter;\nimport br.com.caelum.vraptor.converter.IntegerConverter;\nimport br.com.caelum.vraptor.converter.LocaleBasedCalendarConverter;\nimport br.com.caelum.vraptor.converter.LocaleBasedDateConverter;\nimport br.com.caelum.vraptor.converter.LongConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveBooleanConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveByteConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveDoubleConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveFloatConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveIntConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveLongConverter;\nimport br.com.caelum.vraptor.converter.PrimitiveShortConverter;\nimport br.com.caelum.vraptor.converter.ShortConverter;\nimport br.com.caelum.vraptor.interceptor.multipart.UploadedFile;\nimport br.com.caelum.vraptor.interceptor.multipart.UploadedFileConverter;\nimport br.com.caelum.vraptor.ioc.Container;\n\npublic class DefaultConvertersTest {\n\n    @Mock private Container container;\n    private DefaultConverters converters;\n\n    @Before\n    public void setup() {\n    \tMockitoAnnotations.initMocks(this);\n        this.converters = new DefaultConverters();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n\t@Test\n    public void shouldRegisterConvertersForAllDefaultTypes() {\n        final HashMap<Class, Class<? extends Converter>> EXPECTED_CONVERTERS = new HashMap<Class, Class<? extends Converter>>() {\n            {\n                put(int.class, PrimitiveIntConverter.class);\n                put(long.class, PrimitiveLongConverter.class);\n                put(short.class, PrimitiveShortConverter.class);\n                put(byte.class, PrimitiveByteConverter.class);\n                put(double.class, PrimitiveDoubleConverter.class);\n                put(float.class, PrimitiveFloatConverter.class);\n                put(boolean.class, PrimitiveBooleanConverter.class);\n                put(Integer.class, IntegerConverter.class);\n                put(Long.class, LongConverter.class);\n                put(Short.class, ShortConverter.class);\n                put(Byte.class, ByteConverter.class);\n                put(Double.class, DoubleConverter.class);\n                put(Float.class, FloatConverter.class);\n                put(Boolean.class, BooleanConverter.class);\n                put(Calendar.class, LocaleBasedCalendarConverter.class);\n                put(Date.class, LocaleBasedDateConverter.class);\n                put(Enum.class, EnumConverter.class);\n                put(UploadedFile.class, UploadedFileConverter.class);\n            }\n            private static final long serialVersionUID = 8559316558416038474L;\n        };\n\n        for (Class<? extends Converter> converterType : EXPECTED_CONVERTERS.values()) {\n            Converter<?> expected = mock(converterType);\n            when((Converter)container.instanceFor(converterType)).thenReturn(expected);\n        }\n\n        for (Entry<Class, Class<? extends Converter>> entry : EXPECTED_CONVERTERS.entrySet()) {\n            Class<?> typeFor = entry.getKey();\n            Class<? extends Converter> converterType = entry.getValue();\n            Converter<?> converter = converters.to(typeFor, container);\n            assertThat(converter, is(instanceOf(converterType)));\n        }\n    }\n\n    @Test(expected = VRaptorException.class)\n    public void complainsIfNoConverterFound() {\n        converters.to(DefaultConvertersTest.class, container);\n    }\n\n    @Test(expected = VRaptorException.class)\n    public void convertingANonAnnotatedConverterEndsUpComplaining() {\n        converters.register(WrongConverter.class);\n    }\n\n    class WrongConverter implements Converter<String> {\n\n        public String convert(String value, Class<? extends String> type, ResourceBundle bundle) {\n            return null;\n        }\n    }\n\n    class MyData {\n    }\n\n    @Convert(MyData.class)\n    class MyConverter implements Converter<MyData> {\n        public MyData convert(String value, Class<? extends MyData> type, ResourceBundle bundle) {\n            return null;\n        }\n    }\n\n    @Convert(MyData.class)\n    class MySecondConverter implements Converter<MyData> {\n        public MyData convert(String value, Class<? extends MyData> type, ResourceBundle bundle) {\n            return null;\n        }\n    }\n\n    @Test\n    public void registersAndUsesTheConverterInstaceForTheSpecifiedType() {\n        converters.register(MyConverter.class);\n        when(container.instanceFor(MyConverter.class)).thenReturn(new MyConverter());\n\n        Converter<?> found = converters.to(MyData.class, container);\n        assertThat(found.getClass(), is(typeCompatibleWith(MyConverter.class)));\n    }\n\n    @Test\n    public void usesTheLastConverterInstanceRegisteredForTheSpecifiedType() {\n        converters.register(MyConverter.class);\n        converters.register(MySecondConverter.class);\n        when(container.instanceFor(MySecondConverter.class)).thenReturn(new MySecondConverter());\n\n        Converter<?> found = converters.to(MyData.class, container);\n        assertThat(found.getClass(), is(typeCompatibleWith(MySecondConverter.class)));\n    }\n\n    @Test\n\tpublic void existsForWillReturnTrueForRegisteredConverters() throws Exception {\n\t\tconverters.register(MyConverter.class);\n\n\t\twhen(container.instanceFor(MyConverter.class)).thenReturn(new MyConverter());\n\n\t\tassertTrue(converters.existsFor(MyData.class, container));\n\t}\n\n}\n","lineNo":101}
{"Smelly Sample":"package br.com.caelum.vraptor.serialization;\n\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.not;\nimport static org.junit.Assert.assertThat;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.interceptor.DefaultTypeNameExtractor;\n\npublic class XStreamJSONSerializationTest {\n\n\n\tprivate XStreamJSONSerialization serialization;\n\tprivate ByteArrayOutputStream stream;\n\tprivate Mockery mockery;\n\tprivate HttpServletResponse response;\n\n\t@Before\n    public void setup() throws Exception {\n\t\tmockery = new Mockery();\n        this.stream = new ByteArrayOutputStream();\n        response = mockery.mock(HttpServletResponse.class);\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(response).setContentType(\"application/json\");\n\t\t\t\tallowing(response).getWriter();\n\t\t\t\twill(returnValue(new PrintWriter(stream)));\n\t\t\t}\n\t\t});\n\t\tthis.serialization = new XStreamJSONSerialization(response, new DefaultTypeNameExtractor());\n    }\n\n\tpublic static class Address {\n\t\tString street;\n\t\tpublic Address(String street) {\n\t\t\tthis.street = street;\n\t\t}\n\t}\n\tpublic static class Client {\n\t\tString name;\n\t\tAddress address;\n\t\tpublic Client(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic Client(String name, Address address) {\n\t\t\tthis.name = name;\n\t\t\tthis.address = address;\n\t\t}\n\t}\n\tpublic static class Item {\n\t\tString name;\n\t\tdouble price;\n\t\tpublic Item(String name, double price) {\n\t\t\tthis.name = name;\n\t\t\tthis.price = price;\n\t\t}\n\t}\n\tpublic static class Order {\n\t\tClient client;\n\t\tdouble price;\n\t\tString comments;\n\t\tList<Item> items;\n\n\t\tpublic Order(Client client, double price, String comments, Item... items) {\n\t\t\tthis.client = client;\n\t\t\tthis.price = price;\n\t\t\tthis.comments = comments;\n\t\t\tthis.items = new ArrayList<Item>(Arrays.asList(items));\n\t\t}\n\t\tpublic String nice() {\n\t\t\treturn \"nice output\";\n\t\t}\n\n\t}\n\tpublic static class AdvancedOrder extends Order{\n\n\t\tprivate final String notes;\n\n\t\tpublic AdvancedOrder(Client client, double price, String comments, String notes) {\n\t\t\tsuper(client, price, comments);\n\t\t\tthis.notes = notes;\n\t\t}\n\n\t}\n\n\t@Test\n\tpublic void shouldSerializeAllBasicFields() {\n\t\tString expectedResult = \"{\\\"order\\\": {\\n  \\\"price\\\": 15.0,\\n  \\\"comments\\\": \\\"pack it nicely, please\\\"\\n}}\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldUseAlias() {\n\t\tString expectedResult = \"{\\\"customOrder\\\": {\\n  \\\"price\\\": 15.0,\\n  \\\"comments\\\": \\\"pack it nicely, please\\\"\\n}}\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order, \"customOrder\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\tpublic static enum Type { basic, advanced }\n\tclass BasicOrder extends Order {\n\t\tpublic BasicOrder(Client client, double price, String comments, Type type) {\n\t\t\tsuper(client, price, comments);\n\t\t\tthis.type = type;\n\t\t}\n\t\tprivate final Type type;\n\t}\n\n\t@Test\n\tpublic void shouldSerializeEnumFields() {\n//\t\tString expectedResult = \"<basicOrder>\\n  <type>basic<\/type>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/basicOrder>\";\n\t\tOrder order = new BasicOrder(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\", Type.basic);\n\t\tserialization.from(order).serialize();\n\t\tString result = result();\n\t\tassertThat(result, containsString(\"\\\"type\\\": \\\"basic\\\"\"));\n\t}\n\n\n\t@Test\n\t@Ignore(\"It makes sense?\")\n\tpublic void shouldSerializeCollection() {\n\t\tString expectedResult = \"<order>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\texpectedResult += expectedResult;\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(Arrays.asList(order, order)).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\t@Ignore(\"not supported yet\")\n\tpublic void shouldSerializeCollectionWithPrefixTag() {\n\t\tString expectedResult = \"<order>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\texpectedResult += expectedResult;\n\t\texpectedResult = \"<orders>\" + expectedResult + \"<\/orders>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\t//serializer.from(\"orders\", Arrays.asList(order, order)).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\t@Ignore(\"not supported yet\")\n\tpublic void shouldSerializeCollectionWithPrefixTagAndNamespace() {\n\t\tString expectedResult = \"<o:order>\\n  <o:price>15.0<\/o:price>\\n  <o:comments>pack it nicely, please<\/o:comments>\\n<\/o:order>\";\n\t\texpectedResult += expectedResult;\n\t\texpectedResult = \"<o:orders xmlns:o=\\\"http://www.caelum.com.br/order\\\">\" + expectedResult + \"<\/o:orders>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n//\t\tserializer.from(\"orders\", Arrays.asList(order, order)).namespace(\"http://www.caelum.com.br/order\",\"o\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldSerializeParentFields() {\n//\t\tString expectedResult = \"<advancedOrder>\\n  <notes>complex package<\/notes>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/advancedOrder>\";\n\t\tOrder order = new AdvancedOrder(null, 15.0, \"pack it nicely, please\", \"complex package\");\n\t\tserialization.from(order).serialize();\n\t\tassertThat(result(), containsString(\"\\\"notes\\\": \\\"complex package\\\"\"));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyExcludeFields() {\n\t\tString expectedResult = \"{\\\"order\\\": {\\n  \\\"comments\\\": \\\"pack it nicely, please\\\"\\n}}\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order).exclude(\"price\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyIncludeFieldAndNotItsNonPrimitiveFields() {\n//\t\tString expectedResult = \"<order>\\n<client>\\n  <name>guilherme silveira<\/name>\\n <\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\", new Address(\"R. Vergueiro\")), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order).include(\"client\").serialize();\n\t\tassertThat(result(), containsString(\"\\\"name\\\": \\\"guilherme silveira\\\"\"));\n\t\tassertThat(result(), not(containsString(\"R. Vergueiro\")));\n\t}\n\t@Test\n\tpublic void shouldOptionallyIncludeChildField() {\n//\t\tString expectedResult = \"<order>\\n<client>\\n  <name>guilherme silveira<\/name>\\n <\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\", new Address(\"R. Vergueiro\")), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order).include(\"client\", \"client.address\").serialize();\n\t\tassertThat(result(), containsString(\"\\\"street\\\": \\\"R. Vergueiro\\\"\"));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyExcludeChildField() {\n//\t\tString expectedResult = \"<order>\\n<client>\\n<\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order).include(\"client\").exclude(\"client.name\").serialize();\n\t\tassertThat(result(), containsString(\"\\\"client\\\"\"));\n\t\tassertThat(result(), not(containsString(\"guilherme silveira\")));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyIncludeListChildFields() {\n//\t\tString expectedResult = \"<order>\\n<client>\\n<\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\",\n\t\t\t\tnew Item(\"any item\", 12.99));\n\t\tserialization.from(order).include(\"items\").serialize();\n\t\tassertThat(result(), containsString(\"\\\"items\\\"\"));\n\t\tassertThat(result(), containsString(\"\\\"name\\\": \\\"any item\\\"\"));\n\t\tassertThat(result(), containsString(\"\\\"price\\\": 12.99\"));\n\t}\n\t@Test\n\tpublic void shouldOptionallyExcludeFieldsFromIncludedListChildFields() {\n//\t\tString expectedResult = \"<order>\\n<client>\\n<\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\",\n\t\t\t\tnew Item(\"any item\", 12.99));\n\t\tserialization.from(order).include(\"items\").exclude(\"items.price\").serialize();\n\t\tassertThat(result(), containsString(\"\\\"items\\\"\"));\n\t\tassertThat(result(), containsString(\"\\\"name\\\": \\\"any item\\\"\"));\n\t\tassertThat(result(), not(containsString(\"12.99\")));\n\t}\n\n\tprivate String result() {\n\t\treturn new String(stream.toByteArray());\n\t}\n\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.serialization;\n\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.not;\nimport static org.junit.Assert.assertThat;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.interceptor.DefaultTypeNameExtractor;\n\npublic class XStreamJSONSerializationTest {\n\n\n\tprivate XStreamJSONSerialization serialization;\n\tprivate ByteArrayOutputStream stream;\n\n\t@Before\n    public void setup() throws Exception {\n        this.stream = new ByteArrayOutputStream();\n\n        HttpServletResponse response = mock(HttpServletResponse.class);\n        when(response.getWriter()).thenReturn(new PrintWriter(stream));\n\n        this.serialization = new XStreamJSONSerialization(response, new DefaultTypeNameExtractor());\n    }\n\n\tpublic static class Address {\n\t\tString street;\n\t\tpublic Address(String street) {\n\t\t\tthis.street = street;\n\t\t}\n\t}\n\tpublic static class Client {\n\t\tString name;\n\t\tAddress address;\n\t\tpublic Client(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t\tpublic Client(String name, Address address) {\n\t\t\tthis.name = name;\n\t\t\tthis.address = address;\n\t\t}\n\t}\n\tpublic static class Item {\n\t\tString name;\n\t\tdouble price;\n\t\tpublic Item(String name, double price) {\n\t\t\tthis.name = name;\n\t\t\tthis.price = price;\n\t\t}\n\t}\n\tpublic static class Order {\n\t\tClient client;\n\t\tdouble price;\n\t\tString comments;\n\t\tList<Item> items;\n\n\t\tpublic Order(Client client, double price, String comments, Item... items) {\n\t\t\tthis.client = client;\n\t\t\tthis.price = price;\n\t\t\tthis.comments = comments;\n\t\t\tthis.items = new ArrayList<Item>(Arrays.asList(items));\n\t\t}\n\t\tpublic String nice() {\n\t\t\treturn \"nice output\";\n\t\t}\n\n\t}\n\tpublic static class AdvancedOrder extends Order{\n\n\t\tprivate final String notes;\n\n\t\tpublic AdvancedOrder(Client client, double price, String comments, String notes) {\n\t\t\tsuper(client, price, comments);\n\t\t\tthis.notes = notes;\n\t\t}\n\n\t}\n\n\t@Test\n\tpublic void shouldSerializeAllBasicFields() {\n\t\tString expectedResult = \"{\\\"order\\\": {\\n  \\\"price\\\": 15.0,\\n  \\\"comments\\\": \\\"pack it nicely, please\\\"\\n}}\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldUseAlias() {\n\t\tString expectedResult = \"{\\\"customOrder\\\": {\\n  \\\"price\\\": 15.0,\\n  \\\"comments\\\": \\\"pack it nicely, please\\\"\\n}}\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order, \"customOrder\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\tpublic static enum Type { basic, advanced }\n\tclass BasicOrder extends Order {\n\t\tpublic BasicOrder(Client client, double price, String comments, Type type) {\n\t\t\tsuper(client, price, comments);\n\t\t\tthis.type = type;\n\t\t}\n\t\tprivate final Type type;\n\t}\n\n\t@Test\n\tpublic void shouldSerializeEnumFields() {\n//\t\tString expectedResult = \"<basicOrder>\\n  <type>basic<\/type>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/basicOrder>\";\n\t\tOrder order = new BasicOrder(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\", Type.basic);\n\t\tserialization.from(order).serialize();\n\t\tString result = result();\n\t\tassertThat(result, containsString(\"\\\"type\\\": \\\"basic\\\"\"));\n\t}\n\n\n\t@Test\n\tpublic void shouldSerializeCollection() {\n\t\tString expectedResult = \"  {\\n    \\\"price\\\": 15.0,\\n    \\\"comments\\\": \\\"pack it nicely, please\\\"\\n  }\";\n\t\texpectedResult += \",\\n\" + expectedResult;\n\t\texpectedResult = \"{\\\"arrayList\\\": [\\n\" + expectedResult + \"\\n]}\";\n\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(Arrays.asList(order, order)).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldSerializeCollectionWithPrefixTag() {\n\t\tString expectedResult = \"  {\\n    \\\"price\\\": 15.0,\\n    \\\"comments\\\": \\\"pack it nicely, please\\\"\\n  }\";\n\t\texpectedResult += \",\\n\" + expectedResult;\n\t\texpectedResult = \"{\\\"orders\\\": [\\n\" + expectedResult + \"\\n]}\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(Arrays.asList(order, order), \"orders\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\t@Ignore(\"not supported yet\")\n\tpublic void shouldSerializeCollectionWithPrefixTagAndNamespace() {\n\t\tString expectedResult = \"<o:order>\\n  <o:price>15.0<\/o:price>\\n  <o:comments>pack it nicely, please<\/o:comments>\\n<\/o:order>\";\n\t\texpectedResult += expectedResult;\n\t\texpectedResult = \"<o:orders xmlns:o=\\\"http://www.caelum.com.br/order\\\">\" + expectedResult + \"<\/o:orders>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n//\t\tserializer.from(\"orders\", Arrays.asList(order, order)).namespace(\"http://www.caelum.com.br/order\",\"o\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldSerializeParentFields() {\n//\t\tString expectedResult = \"<advancedOrder>\\n  <notes>complex package<\/notes>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/advancedOrder>\";\n\t\tOrder order = new AdvancedOrder(null, 15.0, \"pack it nicely, please\", \"complex package\");\n\t\tserialization.from(order).serialize();\n\t\tassertThat(result(), containsString(\"\\\"notes\\\": \\\"complex package\\\"\"));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyExcludeFields() {\n\t\tString expectedResult = \"{\\\"order\\\": {\\n  \\\"comments\\\": \\\"pack it nicely, please\\\"\\n}}\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order).exclude(\"price\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyIncludeFieldAndNotItsNonPrimitiveFields() {\n//\t\tString expectedResult = \"<order>\\n<client>\\n  <name>guilherme silveira<\/name>\\n <\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\", new Address(\"R. Vergueiro\")), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order).include(\"client\").serialize();\n\t\tassertThat(result(), containsString(\"\\\"name\\\": \\\"guilherme silveira\\\"\"));\n\t\tassertThat(result(), not(containsString(\"R. Vergueiro\")));\n\t}\n\t@Test\n\tpublic void shouldOptionallyIncludeChildField() {\n//\t\tString expectedResult = \"<order>\\n<client>\\n  <name>guilherme silveira<\/name>\\n <\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\", new Address(\"R. Vergueiro\")), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order).include(\"client\", \"client.address\").serialize();\n\t\tassertThat(result(), containsString(\"\\\"street\\\": \\\"R. Vergueiro\\\"\"));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyExcludeChildField() {\n//\t\tString expectedResult = \"<order>\\n<client>\\n<\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserialization.from(order).include(\"client\").exclude(\"client.name\").serialize();\n\t\tassertThat(result(), containsString(\"\\\"client\\\"\"));\n\t\tassertThat(result(), not(containsString(\"guilherme silveira\")));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyIncludeListChildFields() {\n//\t\tString expectedResult = \"<order>\\n<client>\\n<\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\",\n\t\t\t\tnew Item(\"any item\", 12.99));\n\t\tserialization.from(order).include(\"items\").serialize();\n\t\tassertThat(result(), containsString(\"\\\"items\\\"\"));\n\t\tassertThat(result(), containsString(\"\\\"name\\\": \\\"any item\\\"\"));\n\t\tassertThat(result(), containsString(\"\\\"price\\\": 12.99\"));\n\t}\n\t@Test\n\tpublic void shouldOptionallyExcludeFieldsFromIncludedListChildFields() {\n//\t\tString expectedResult = \"<order>\\n<client>\\n<\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\",\n\t\t\t\tnew Item(\"any item\", 12.99));\n\t\tserialization.from(order).include(\"items\").exclude(\"items.price\").serialize();\n\t\tassertThat(result(), containsString(\"\\\"items\\\"\"));\n\t\tassertThat(result(), containsString(\"\\\"name\\\": \\\"any item\\\"\"));\n\t\tassertThat(result(), not(containsString(\"12.99\")));\n\t}\n\n\tprivate String result() {\n\t\treturn new String(stream.toByteArray());\n\t}\n\n\n}\n","lineNo":35}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.serialization;\n\nimport java.io.Writer;\nimport java.lang.reflect.Field;\nimport java.util.Collection;\nimport java.util.Map.Entry;\n\nimport net.vidageek.mirror.dsl.Mirror;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\n\nimport com.google.common.collect.LinkedListMultimap;\nimport com.google.common.collect.Multimap;\nimport com.thoughtworks.xstream.XStream;\n\n/**\n * A Xml Serializer based on XStream\n * @author Lucas Cavalcanti\n * @since 3.0.2\n */\npublic class XStreamXmlSerializer implements BasicSerializer {\n\n\tprivate final XStream xstream;\n\tprivate final Writer writer;\n\tprivate Object toSerialize;\n\tprivate final TypeNameExtractor extractor;\n\tprivate final Multimap<Class<?>, String> excludes = LinkedListMultimap.create();\n\n\tpublic XStreamXmlSerializer(XStream xstream, Writer writer, TypeNameExtractor extractor) {\n\t\tthis.xstream = xstream;\n\t\tthis.writer = writer;\n\t\tthis.extractor = extractor;\n\t}\n\n\tprivate boolean isPrimitive(Class<?> type) {\n\t\treturn (type.isPrimitive() || type.getName().startsWith(\"java\") || type.isEnum()) &&\n\t\t\t!Collection.class.isAssignableFrom(type);\n\t}\n\n\tpublic BasicSerializer exclude(String... names) {\n\t\tfor (String name : names) {\n\t\t\txstream.omitField(getParentTypeFor(name), getNameFor(name));\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate String getNameFor(String name) {\n\t\tString[] path = name.split(\"\\\\.\");\n\t\treturn path[path.length-1];\n\t}\n\n\tprivate Class<?> getParentTypeFor(String name) {\n\t\tClass<?> type = toSerialize.getClass();\n\t\tString[] path = name.split(\"\\\\.\");\n\t\tfor (int i = 0; i < path.length - 1; i++) {\n\t\t\ttype = new Mirror().on(type).reflect().field(path[i]).getType();\n\t\t}\n\t\treturn type;\n\t}\n\n\tpublic <T> BasicSerializer from(T object) {\n\t\tif (object == null) {\n\t\t\tthrow new NullPointerException(\"You can't serialize null objects\");\n\t\t}\n\t\tif (Collection.class.isInstance(object)) {\n\t\t\tthrow new IllegalArgumentException(\"It's not possible to serialize colections yet. \" +\n\t\t\t\t\t\"Create a class that wraps this collections by now.\");\n\t\t}\n\t\tClass<?> type = object.getClass();\n\t\tString name = extractor.nameFor(type);\n\t\txstream.alias(name, type);\n\t\texcludeNonPrimitiveFields(type);\n\t\tthis.toSerialize = object;\n\t\treturn this;\n\t}\n\n\tprivate void excludeNonPrimitiveFields(Class<?> type) {\n\t\tfor (Field field : new Mirror().on(type).reflectAll().fields()) {\n\t\t\tif (!isPrimitive(field.getType())) {\n\t\t\t\texcludes.put(type, field.getName());\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic BasicSerializer include(String... fields) {\n\t\tfor (String field : fields) {\n\t\t\tClass<?> parentType = getParentTypeFor(field);\n\t\t\tString fieldName = getNameFor(field);\n\t\t\tClass<?> fieldType = new Mirror().on(parentType).reflect().field(fieldName).getType();\n\n\t\t\tif (!excludes.containsKey(fieldType)) {\n\t\t\t\texcludeNonPrimitiveFields(fieldType);\n\t\t\t}\n\t\t\texcludes.remove(parentType, fieldName);\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic void serialize() {\n\t\tfor (Entry<Class<?>, String> exclude : excludes.entries()) {\n\t\t\txstream.omitField(exclude.getKey(), exclude.getValue());\n\t\t}\n\t\txstream.toXML(toSerialize, writer);\n\t}\n\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.serialization;\n\nimport java.io.Writer;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Collection;\nimport java.util.Map.Entry;\n\nimport net.vidageek.mirror.dsl.Mirror;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\n\nimport com.google.common.collect.LinkedListMultimap;\nimport com.google.common.collect.Multimap;\nimport com.thoughtworks.xstream.XStream;\n\n/**\n * A Xml Serializer based on XStream\n * @author Lucas Cavalcanti\n * @since 3.0.2\n */\npublic class XStreamXmlSerializer implements BasicSerializer {\n\n\tprivate final XStream xstream;\n\tprivate final Writer writer;\n\tprivate Object toSerialize;\n\tprivate final TypeNameExtractor extractor;\n\tprivate final Multimap<Class<?>, String> excludes = LinkedListMultimap.create();\n\n\tpublic XStreamXmlSerializer(XStream xstream, Writer writer, TypeNameExtractor extractor) {\n\t\tthis.xstream = xstream;\n\t\tthis.writer = writer;\n\t\tthis.extractor = extractor;\n\t}\n\n\tprivate boolean isPrimitive(Class<?> type) {\n\t\treturn (type.isPrimitive() || type.getName().startsWith(\"java\") || type.isEnum()) &&\n\t\t\t!Collection.class.isAssignableFrom(type);\n\t}\n\n\tpublic BasicSerializer exclude(String... names) {\n\t\tfor (String name : names) {\n\t\t\txstream.omitField(getParentTypeFor(name), getNameFor(name));\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate String getNameFor(String name) {\n\t\tString[] path = name.split(\"\\\\.\");\n\t\treturn path[path.length-1];\n\t}\n\n\tprivate Class<?> getParentTypeFor(String name) {\n\t\tClass<?> type = toSerialize.getClass();\n\t\tString[] path = name.split(\"\\\\.\");\n\t\tfor (int i = 0; i < path.length - 1; i++) {\n\t\t\ttype = getActualType(new Mirror().on(type).reflect().field(path[i]).getGenericType());\n\t\t}\n\t\treturn type;\n\t}\n\n\tpublic <T> BasicSerializer from(T object) {\n\t\tif (object == null) {\n\t\t\tthrow new NullPointerException(\"You can't serialize null objects\");\n\t\t}\n\t\tif (Collection.class.isInstance(object)) {\n\t\t\tthrow new IllegalArgumentException(\"It's not possible to serialize colections yet. \" +\n\t\t\t\t\t\"Create a class that wraps this collections by now.\");\n\t\t}\n\t\tClass<?> type = object.getClass();\n\t\tString name = extractor.nameFor(type);\n\t\txstream.alias(name, type);\n\t\texcludeNonPrimitiveFields(type);\n\t\tthis.toSerialize = object;\n\t\treturn this;\n\t}\n\n\tprivate void excludeNonPrimitiveFields(Class<?> type) {\n\t\tfor (Field field : new Mirror().on(type).reflectAll().fields()) {\n\t\t\tif (!isPrimitive(field.getType())) {\n\t\t\t\texcludes.put(type, field.getName());\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic BasicSerializer include(String... fields) {\n\t\tfor (String field : fields) {\n\t\t\tClass<?> parentType = getParentTypeFor(field);\n\t\t\tString fieldName = getNameFor(field);\n\t\t\tType genericType = new Mirror().on(parentType).reflect().field(fieldName).getGenericType();\n\t\t\tClass<?> fieldType = getActualType(genericType);\n\t\t\tif (isCollection(genericType)) {\n\t\t\t\txstream.alias(extractor.nameFor(fieldType), fieldType);\n\t\t\t}\n\t\t\tif (!excludes.containsKey(fieldType)) {\n\t\t\t\texcludeNonPrimitiveFields(fieldType);\n\t\t\t}\n\t\t\texcludes.remove(parentType, fieldName);\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate Class<?> getActualType(Type genericType) {\n\t\tif (genericType instanceof ParameterizedType) {\n\t\t\tParameterizedType type = (ParameterizedType) genericType;\n\t\t\tif (isCollection(type)) {\n\t\t\t\treturn (Class<?>) type.getActualTypeArguments()[0];\n\t\t\t}\n\t\t}\n\t\treturn (Class<?>) genericType;\n\t}\n\n\tprivate boolean isCollection(Type type) {\n\t\tif (type instanceof ParameterizedType) {\n\t\t\tParameterizedType ptype = (ParameterizedType) type;\n\t\t\treturn Collection.class.isAssignableFrom((Class<?>) ptype.getRawType());\n\t\t}\n\t\treturn Collection.class.isAssignableFrom((Class<?>) type);\n\t}\n\n\tpublic void serialize() {\n\t\tfor (Entry<Class<?>, String> exclude : excludes.entries()) {\n\t\t\txstream.omitField(exclude.getKey(), exclude.getValue());\n\t\t}\n\t\txstream.toXML(toSerialize, writer);\n\t}\n\n\n}\n","lineNo":105}
{"Smelly Sample":"package br.com.caelum.vraptor.serialization;\n\nimport java.io.Writer;\nimport java.lang.reflect.Field;\nimport java.util.Collection;\nimport java.util.Map.Entry;\n\nimport net.vidageek.mirror.dsl.Mirror;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\n\nimport com.google.common.collect.LinkedListMultimap;\nimport com.google.common.collect.Multimap;\nimport com.thoughtworks.xstream.XStream;\n\npublic class XStreamXmlSerializer implements XmlSerializer {\n\n\tprivate final XStream xstream;\n\tprivate final Writer writer;\n\tprivate Object toSerialize;\n\tprivate final TypeNameExtractor extractor;\n\tprivate final Multimap<Class<?>, String> excludes = LinkedListMultimap.create();\n\n\tpublic XStreamXmlSerializer(XStream xstream, Writer writer, TypeNameExtractor extractor) {\n\t\tthis.xstream = xstream;\n\t\tthis.writer = writer;\n\t\tthis.extractor = extractor;\n\t}\n\n\tprivate boolean isPrimitive(Class<?> type) {\n\t\treturn (type.isPrimitive() || type.getName().startsWith(\"java\") || type.isEnum()) &&\n\t\t\t!Collection.class.isAssignableFrom(type);\n\t}\n\n\tpublic XmlSerializer exclude(String... names) {\n\t\tfor (String name : names) {\n\t\t\txstream.omitField(getTypeFor(name), getNameFor(name));\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate String getNameFor(String name) {\n\t\tString[] path = name.split(\"\\\\.\");\n\t\treturn path[path.length-1];\n\t}\n\n\tprivate Class<?> getTypeFor(String name) {\n\t\tClass<?> type = toSerialize.getClass();\n\t\tString[] path = name.split(\"\\\\.\");\n\t\tfor (int i = 0; i < path.length - 1; i++) {\n\t\t\ttype = new Mirror().on(type).reflect().field(path[i]).getType();\n\t\t}\n\t\treturn type;\n\t}\n\n\tpublic <T> XmlSerializer from(T object) {\n\t\tif (object == null) {\n\t\t\tthrow new NullPointerException(\"You can't serialize null objects\");\n\t\t}\n\t\tif (Collection.class.isInstance(object)) {\n\t\t\tthrow new IllegalArgumentException(\"It's not possible to serialize colections yet. \" +\n\t\t\t\t\t\"Create a class that wraps this collections by now.\");\n\t\t}\n\t\tClass<?> type = object.getClass();\n\t\tString name = extractor.nameFor(type);\n\t\txstream.alias(name, type);\n\t\texcludeNonPrimitiveFields(type);\n\t\tthis.toSerialize = object;\n\t\treturn this;\n\t}\n\n\tprivate void excludeNonPrimitiveFields(Class<?> type) {\n\t\tfor (Field field : new Mirror().on(type).reflectAll().fields()) {\n\t\t\tif (!isPrimitive(field.getType())) {\n\t\t\t\texcludes.put(type, field.getName());\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic XmlSerializer include(String... fields) {\n\t\tfor (String field : fields) {\n\t\t\texcludes.remove(toSerialize.getClass(), field);\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic void serialize() {\n\t\tfor (Entry<Class<?>, String> exclude : excludes.entries()) {\n\t\t\txstream.omitField(exclude.getKey(), exclude.getValue());\n\t\t}\n\t\txstream.toXML(toSerialize, writer);\n\t}\n\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.serialization;\n\nimport java.io.Writer;\nimport java.lang.reflect.Field;\nimport java.util.Collection;\nimport java.util.Map.Entry;\n\nimport net.vidageek.mirror.dsl.Mirror;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\n\nimport com.google.common.collect.LinkedListMultimap;\nimport com.google.common.collect.Multimap;\nimport com.thoughtworks.xstream.XStream;\n\npublic class XStreamXmlSerializer implements XmlSerializer {\n\n\tprivate final XStream xstream;\n\tprivate final Writer writer;\n\tprivate Object toSerialize;\n\tprivate final TypeNameExtractor extractor;\n\tprivate final Multimap<Class<?>, String> excludes = LinkedListMultimap.create();\n\n\tpublic XStreamXmlSerializer(XStream xstream, Writer writer, TypeNameExtractor extractor) {\n\t\tthis.xstream = xstream;\n\t\tthis.writer = writer;\n\t\tthis.extractor = extractor;\n\t}\n\n\tprivate boolean isPrimitive(Class<?> type) {\n\t\treturn (type.isPrimitive() || type.getName().startsWith(\"java\") || type.isEnum()) &&\n\t\t\t!Collection.class.isAssignableFrom(type);\n\t}\n\n\tpublic XmlSerializer exclude(String... names) {\n\t\tfor (String name : names) {\n\t\t\txstream.omitField(getParentTypeFor(name), getNameFor(name));\n\t\t}\n\t\treturn this;\n\t}\n\n\tprivate String getNameFor(String name) {\n\t\tString[] path = name.split(\"\\\\.\");\n\t\treturn path[path.length-1];\n\t}\n\n\tprivate Class<?> getParentTypeFor(String name) {\n\t\tClass<?> type = toSerialize.getClass();\n\t\tString[] path = name.split(\"\\\\.\");\n\t\tfor (int i = 0; i < path.length - 1; i++) {\n\t\t\ttype = new Mirror().on(type).reflect().field(path[i]).getType();\n\t\t}\n\t\treturn type;\n\t}\n\n\tpublic <T> XmlSerializer from(T object) {\n\t\tif (object == null) {\n\t\t\tthrow new NullPointerException(\"You can't serialize null objects\");\n\t\t}\n\t\tif (Collection.class.isInstance(object)) {\n\t\t\tthrow new IllegalArgumentException(\"It's not possible to serialize colections yet. \" +\n\t\t\t\t\t\"Create a class that wraps this collections by now.\");\n\t\t}\n\t\tClass<?> type = object.getClass();\n\t\tString name = extractor.nameFor(type);\n\t\txstream.alias(name, type);\n\t\texcludeNonPrimitiveFields(type);\n\t\tthis.toSerialize = object;\n\t\treturn this;\n\t}\n\n\tprivate void excludeNonPrimitiveFields(Class<?> type) {\n\t\tfor (Field field : new Mirror().on(type).reflectAll().fields()) {\n\t\t\tif (!isPrimitive(field.getType())) {\n\t\t\t\texcludes.put(type, field.getName());\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic XmlSerializer include(String... fields) {\n\t\tfor (String field : fields) {\n\t\t\tClass<?> parentType = getParentTypeFor(field);\n\t\t\tString fieldName = getNameFor(field);\n\t\t\tClass<?> fieldType = new Mirror().on(parentType).reflect().field(fieldName).getType();\n\n\t\t\tif (!excludes.containsKey(fieldType)) {\n\t\t\t\texcludeNonPrimitiveFields(fieldType);\n\t\t\t}\n\t\t\texcludes.remove(parentType, fieldName);\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic void serialize() {\n\t\tfor (Entry<Class<?>, String> exclude : excludes.entries()) {\n\t\t\txstream.omitField(exclude.getKey(), exclude.getValue());\n\t\t}\n\t\txstream.toXML(toSerialize, writer);\n\t}\n\n\n}\n","lineNo":82}
{"Smelly Sample":"package br.com.caelum.vraptor.serialization;\n\nimport java.io.Writer;\nimport java.util.Collection;\n\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\n\nimport com.thoughtworks.xstream.XStream;\n\npublic class XStreamXmlSerializer implements XmlSerializer {\n\n\tprivate final XStream xstream;\n\tprivate final Writer writer;\n\tprivate Object toSerialize;\n\tprivate final TypeNameExtractor extractor;\n\n\tpublic XStreamXmlSerializer(XStream xstream, Writer writer, TypeNameExtractor extractor) {\n\t\tthis.xstream = xstream;\n\t\tthis.writer = writer;\n\t\tthis.extractor = extractor;\n\t}\n\n\tpublic XmlSerializer addMethod(String methodName) {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\tpublic XmlSerializer exclude(String... names) {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\tpublic <T> XmlSerializer from(T object) {\n\t\tif (object == null) {\n\t\t\tthrow new NullPointerException(\"You can't serialize null objects\");\n\t\t}\n\t\tString name = extractor.nameFor(object.getClass());\n\t\txstream.alias(name, object.getClass());\n\t\tthis.toSerialize = object;\n\t\treturn this;\n\t}\n\n\tpublic XmlSerializer from(String prefix, Collection collection) {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\tpublic XmlSerializer include(String fieldName) {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\tpublic XmlSerializer namespace(String uri, String prefix) {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\tpublic void serialize() {\n\t\txstream.toXML(toSerialize, writer);\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.serialization;\n\nimport java.io.Writer;\nimport java.lang.reflect.Field;\nimport java.util.Collection;\nimport java.util.Map.Entry;\n\nimport net.vidageek.mirror.dsl.Mirror;\nimport br.com.caelum.vraptor.interceptor.TypeNameExtractor;\n\nimport com.google.common.collect.LinkedListMultimap;\nimport com.google.common.collect.Multimap;\nimport com.thoughtworks.xstream.XStream;\n\npublic class XStreamXmlSerializer implements XmlSerializer {\n\n\tprivate final XStream xstream;\n\tprivate final Writer writer;\n\tprivate Object toSerialize;\n\tprivate final TypeNameExtractor extractor;\n\tprivate final Multimap<Class<?>, String> excludes = LinkedListMultimap.create();\n\n\tpublic XStreamXmlSerializer(XStream xstream, Writer writer, TypeNameExtractor extractor) {\n\t\tthis.xstream = xstream;\n\t\tthis.writer = writer;\n\t\tthis.extractor = extractor;\n\t}\n\n\tprivate boolean isPrimitive(Class<?> type) {\n\t\treturn (type.isPrimitive() || type.getName().startsWith(\"java\") || type.isEnum()) &&\n\t\t\t!Collection.class.isAssignableFrom(type);\n\t}\n\tpublic XmlSerializer addMethod(String methodName) {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\tpublic XmlSerializer exclude(String... names) {\n\t\tfor (String name : names) {\n\t\t\txstream.omitField(toSerialize.getClass(), name);\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic <T> XmlSerializer from(T object) {\n\t\tif (object == null) {\n\t\t\tthrow new NullPointerException(\"You can't serialize null objects\");\n\t\t}\n\t\tClass<?> type = object.getClass();\n\t\tString name = extractor.nameFor(type);\n\t\txstream.alias(name, type);\n\t\texcludeNonPrimitiveFields(type);\n\t\tthis.toSerialize = object;\n\t\treturn this;\n\t}\n\n\tprivate void excludeNonPrimitiveFields(Class<?> type) {\n\t\tfor (Field field : new Mirror().on(type).reflectAll().fields()) {\n\t\t\tif (!isPrimitive(field.getType())) {\n\t\t\t\texcludes.put(type, field.getName());\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic XmlSerializer from(String prefix, Collection collection) {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\tpublic XmlSerializer include(String fieldName) {\n\t\texcludes.remove(toSerialize.getClass(), fieldName);\n\t\treturn this;\n\t}\n\n\tpublic XmlSerializer namespace(String uri, String prefix) {\n\t\t// TODO Auto-generated method stub\n\t\treturn null;\n\t}\n\n\tpublic void serialize() {\n\t\tfor (Entry<Class<?>, String> exclude : excludes.entries()) {\n\t\t\txstream.omitField(exclude.getKey(), exclude.getValue());\n\t\t}\n\t\txstream.toXML(toSerialize, writer);\n\t}\n\n}\n","lineNo":49}
{"Smelly Sample":"package br.com.caelum.vraptor.serialization;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.config.Configuration;\nimport br.com.caelum.vraptor.interceptor.DefaultTypeNameExtractor;\nimport br.com.caelum.vraptor.rest.Restfulie;\nimport br.com.caelum.vraptor.rest.StateResource;\nimport br.com.caelum.vraptor.rest.Transition;\n\nimport com.thoughtworks.xstream.XStream;\n\npublic class XStreamXmlSerializerTest {\n\n\n\tprivate XmlSerializer serializer;\n\tprivate ByteArrayOutputStream stream;\n\tprivate Configuration config;\n\n\t@Before\n    public void setup() {\n        this.stream = new ByteArrayOutputStream();\n        this.config = new Configuration() {\n\t\t\tpublic String getApplicationPath() {\n\t\t\t\treturn \"http://localhost\";\n\t\t\t}\n        };\n        this.serializer = new XStreamXmlSerializer(new XStream(), new OutputStreamWriter(stream), new DefaultTypeNameExtractor());\n    }\n\n\n\tpublic static class Client {\n\t\tString name;\n\t\tpublic Client(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\tpublic static class Order {\n\t\tClient client;\n\t\tdouble price;\n\t\tString comments;\n\t\tpublic Order(Client client, double price, String comments) {\n\t\t\tthis.client = client;\n\t\t\tthis.price = price;\n\t\t\tthis.comments = comments;\n\t\t}\n\t\tpublic String nice() {\n\t\t\treturn \"nice output\";\n\t\t}\n\n\t}\n\tpublic static class AdvancedOrder extends Order{\n\n\t\tprivate final String notes;\n\n\t\tpublic AdvancedOrder(Client client, double price, String comments, String notes) {\n\t\t\tsuper(client, price, comments);\n\t\t\tthis.notes = notes;\n\t\t}\n\n\t}\n\n\t@Test\n\tpublic void shouldSerializeAllBasicFields() {\n\t\tString expectedResult = \"<order>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\tpublic static enum Type { basic, advanced }\n\tclass BasicOrder extends Order {\n\t\tpublic BasicOrder(Client client, double price, String comments, Type type) {\n\t\t\tsuper(client, price, comments);\n\t\t\tthis.type = type;\n\t\t}\n\t\tprivate final Type type;\n\t}\n\n\t@Test\n\tpublic void shouldSerializeEnumFields() {\n\t\tString expectedResult = \"<basic_order>\\n  <type>basic<\/type>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/basic_order>\";\n\t\tOrder order = new BasicOrder(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\", Type.basic);\n\t\tserializer.from(order).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\n\t@Test\n\tpublic void shouldSerializeCollection() {\n\t\tString expectedResult = \"<order>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\texpectedResult += expectedResult;\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(Arrays.asList(order, order)).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldSerializeCollectionWithPrefixTag() {\n\t\tString expectedResult = \"<order>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\texpectedResult += expectedResult;\n\t\texpectedResult = \"<orders>\" + expectedResult + \"<\/orders>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(\"orders\", Arrays.asList(order, order)).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldSerializeCollectionWithPrefixTagAndNamespace() {\n\t\tString expectedResult = \"<o:order>\\n  <o:price>15.0<\/o:price>\\n  <o:comments>pack it nicely, please<\/o:comments>\\n<\/o:order>\";\n\t\texpectedResult += expectedResult;\n\t\texpectedResult = \"<o:orders xmlns:o=\\\"http://www.caelum.com.br/order\\\">\" + expectedResult + \"<\/o:orders>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(\"orders\", Arrays.asList(order, order)).namespace(\"http://www.caelum.com.br/order\",\"o\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldSerializeParentFields() {\n\t\tString expectedResult = \"<advanced_order>\\n  <notes>complex package<\/notes>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/advanced_order>\";\n\t\tOrder order = new AdvancedOrder(null, 15.0, \"pack it nicely, please\", \"complex package\");\n\t\tserializer.from(order).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyExcludeFields() {\n\t\tString expectedResult = \"<order>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).exclude(\"price\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyIncludeMethodReturn() {\n\t\tString expectedResult = \"<order>\\n<nice>nice output<\/nice><\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).exclude(\"price\",\"comments\").addMethod(\"nice\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyIncludeChildField() {\n\t\tString expectedResult = \"<order>\\n<client>\\n  <name>guilherme silveira<\/name>\\n<\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).include(\"client\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyExcludeChildField() {\n\t\tString expectedResult = \"<order>\\n<client>\\n<\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).include(\"client\").exclude(\"name\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldIncludeNamespaces() {\n\t\tString expectedResult = \"<o:order xmlns:o=\\\"http://www.caelum.com.br/order\\\">\\n  <o:price>15.0<\/o:price>\\n  <o:comments>pack it nicely, please<\/o:comments>\\n<\/o:order>\";\n\t\tOrder order = new Order(null, 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).namespace(\"http://www.caelum.com.br/order\",\"o\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\tprivate String result() {\n\t\treturn new String(stream.toByteArray());\n\t}\n\n\tclass Process implements StateResource {\n\t\tprivate final Transition transition;\n\t\tpublic Process(Transition transition) {\n\t\t\tthis.transition = transition;\n\t\t}\n\t\tpublic List<Transition> getFollowingTransitions(Restfulie restfulie) {\n\t\t\treturn Arrays.asList(transition);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void shouldSerializeAtomLinksIfStateControlExists() {\n\t\tfinal Transition transition = new Transition() {\n\t\t\tpublic String getName() {\n\t\t\t\treturn \"initialize\";\n\t\t\t}\n\t\t\tpublic String getUri() {\n\t\t\t\treturn \"/my_link\";\n\t\t\t}\n\t\t\tpublic boolean matches(Method method) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t\tfinal Process p = new Process(transition);\n\t\tString expectedResult = \"<process>\\n  <atom:link href=\\\"http://localhost/my_link\\\" rel=\\\"initialize\\\" xmlns:atom=\\\"http://www.w3.org/2005/Atom\\\" /><\/process>\";\n\t\tserializer.from(p).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.serialization;\n\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.OutputStreamWriter;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.config.Configuration;\nimport br.com.caelum.vraptor.interceptor.DefaultTypeNameExtractor;\nimport br.com.caelum.vraptor.rest.Restfulie;\nimport br.com.caelum.vraptor.rest.StateResource;\nimport br.com.caelum.vraptor.rest.Transition;\n\nimport com.thoughtworks.xstream.XStream;\n\npublic class XStreamXmlSerializerTest {\n\n\n\tprivate XmlSerializer serializer;\n\tprivate ByteArrayOutputStream stream;\n\tprivate Configuration config;\n\n\t@Before\n    public void setup() {\n        this.stream = new ByteArrayOutputStream();\n        this.config = new Configuration() {\n\t\t\tpublic String getApplicationPath() {\n\t\t\t\treturn \"http://localhost\";\n\t\t\t}\n        };\n        this.serializer = new XStreamXmlSerializer(new XStream(), new OutputStreamWriter(stream), new DefaultTypeNameExtractor());\n    }\n\n\n\tpublic static class Client {\n\t\tString name;\n\t\tpublic Client(String name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\tpublic static class Order {\n\t\tClient client;\n\t\tdouble price;\n\t\tString comments;\n\t\tpublic Order(Client client, double price, String comments) {\n\t\t\tthis.client = client;\n\t\t\tthis.price = price;\n\t\t\tthis.comments = comments;\n\t\t}\n\t\tpublic String nice() {\n\t\t\treturn \"nice output\";\n\t\t}\n\n\t}\n\tpublic static class AdvancedOrder extends Order{\n\n\t\tprivate final String notes;\n\n\t\tpublic AdvancedOrder(Client client, double price, String comments, String notes) {\n\t\t\tsuper(client, price, comments);\n\t\t\tthis.notes = notes;\n\t\t}\n\n\t}\n\n\t@Test\n\tpublic void shouldSerializeAllBasicFields() {\n\t\tString expectedResult = \"<order>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\tpublic static enum Type { basic, advanced }\n\tclass BasicOrder extends Order {\n\t\tpublic BasicOrder(Client client, double price, String comments, Type type) {\n\t\t\tsuper(client, price, comments);\n\t\t\tthis.type = type;\n\t\t}\n\t\tprivate final Type type;\n\t}\n\n\t@Test\n\tpublic void shouldSerializeEnumFields() {\n//\t\tString expectedResult = \"<basicOrder>\\n  <type>basic<\/type>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/basicOrder>\";\n\t\tOrder order = new BasicOrder(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\", Type.basic);\n\t\tserializer.from(order).serialize();\n\t\tString result = result();\n\t\tassertThat(result, containsString(\"<type>basic<\/type>\"));\n\t}\n\n\n\t@Test\n\t@Ignore(\"It makes sense?\")\n\tpublic void shouldSerializeCollection() {\n\t\tString expectedResult = \"<order>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\texpectedResult += expectedResult;\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(Arrays.asList(order, order)).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldSerializeCollectionWithPrefixTag() {\n\t\tString expectedResult = \"<order>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\texpectedResult += expectedResult;\n\t\texpectedResult = \"<orders>\" + expectedResult + \"<\/orders>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(\"orders\", Arrays.asList(order, order)).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldSerializeCollectionWithPrefixTagAndNamespace() {\n\t\tString expectedResult = \"<o:order>\\n  <o:price>15.0<\/o:price>\\n  <o:comments>pack it nicely, please<\/o:comments>\\n<\/o:order>\";\n\t\texpectedResult += expectedResult;\n\t\texpectedResult = \"<o:orders xmlns:o=\\\"http://www.caelum.com.br/order\\\">\" + expectedResult + \"<\/o:orders>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(\"orders\", Arrays.asList(order, order)).namespace(\"http://www.caelum.com.br/order\",\"o\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldSerializeParentFields() {\n//\t\tString expectedResult = \"<advancedOrder>\\n  <notes>complex package<\/notes>\\n  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/advancedOrder>\";\n\t\tOrder order = new AdvancedOrder(null, 15.0, \"pack it nicely, please\", \"complex package\");\n\t\tserializer.from(order).serialize();\n\t\tassertThat(result(), containsString(\"<notes>complex package<\/notes>\"));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyExcludeFields() {\n\t\tString expectedResult = \"<order>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).exclude(\"price\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyIncludeMethodReturn() {\n\t\tString expectedResult = \"<order>\\n<nice>nice output<\/nice><\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).exclude(\"price\",\"comments\").addMethod(\"nice\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyIncludeChildField() {\n//\t\tString expectedResult = \"<order>\\n<client>\\n  <name>guilherme silveira<\/name>\\n <\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).include(\"client\").serialize();\n\t\tassertThat(result(), containsString(\"<name>guilherme silveira<\/name>\"));\n\t}\n\n\t@Test\n\tpublic void shouldOptionallyExcludeChildField() {\n\t\tString expectedResult = \"<order>\\n<client>\\n<\/client>  <price>15.0<\/price>\\n  <comments>pack it nicely, please<\/comments>\\n<\/order>\";\n\t\tOrder order = new Order(new Client(\"guilherme silveira\"), 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).include(\"client\").exclude(\"name\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\t@Test\n\tpublic void shouldIncludeNamespaces() {\n\t\tString expectedResult = \"<o:order xmlns:o=\\\"http://www.caelum.com.br/order\\\">\\n  <o:price>15.0<\/o:price>\\n  <o:comments>pack it nicely, please<\/o:comments>\\n<\/o:order>\";\n\t\tOrder order = new Order(null, 15.0, \"pack it nicely, please\");\n\t\tserializer.from(order).namespace(\"http://www.caelum.com.br/order\",\"o\").serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\tprivate String result() {\n\t\treturn new String(stream.toByteArray());\n\t}\n\n\tclass Process implements StateResource {\n\t\tprivate final Transition transition;\n\t\tpublic Process(Transition transition) {\n\t\t\tthis.transition = transition;\n\t\t}\n\t\tpublic List<Transition> getFollowingTransitions(Restfulie restfulie) {\n\t\t\treturn Arrays.asList(transition);\n\t\t}\n\t}\n\n\t@Test\n\tpublic void shouldSerializeAtomLinksIfStateControlExists() {\n\t\tfinal Transition transition = new Transition() {\n\t\t\tpublic String getName() {\n\t\t\t\treturn \"initialize\";\n\t\t\t}\n\t\t\tpublic String getUri() {\n\t\t\t\treturn \"/my_link\";\n\t\t\t}\n\t\t\tpublic boolean matches(Method method) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t\tfinal Process p = new Process(transition);\n\t\tString expectedResult = \"<process>\\n  <atom:link href=\\\"http://localhost/my_link\\\" rel=\\\"initialize\\\" xmlns:atom=\\\"http://www.w3.org/2005/Atom\\\" /><\/process>\";\n\t\tserializer.from(p).serialize();\n\t\tassertThat(result(), is(equalTo(expectedResult)));\n\t}\n\n\n}\n","lineNo":98}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.http.MutableResponse.RedirectListener;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Interceptor that handles flash scope.\n * @author Lucas Cavalcanti\n * @author Adriano Almeida\n * @since 3.0.2\n */\npublic class FlashInterceptor implements Interceptor {\n\n\tfinal static String FLASH_INCLUDED_PARAMETERS = \"br.com.caelum.vraptor.flash.parameters\";\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(FlashInterceptor.class);\n\n\tprivate final HttpSession session;\n\tprivate final Result result;\n\tprivate final MutableResponse response;\n\n\tpublic FlashInterceptor(HttpSession session, Result result, MutableResponse response) {\n\t\tthis.session = session;\n\t\tthis.result = result;\n\t\tthis.response = response;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn true;\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tMap<String, Object> parameters = (Map<String, Object>) session.getAttribute(FLASH_INCLUDED_PARAMETERS);\n\t\tif (parameters != null) {\n\t\t\tsession.removeAttribute(FLASH_INCLUDED_PARAMETERS);\n\t\t\tfor (Entry<String, Object> parameter : parameters.entrySet()) {\n\t\t\t\tresult.include(parameter.getKey(), parameter.getValue());\n\t\t\t}\n\t\t}\n\t\tresponse.addRedirectListener(new RedirectListener() {\n\t\t\tpublic void beforeRedirect() {\n\t\t\t\ttry {\n\t\t\t\t\tsession.setAttribute(FLASH_INCLUDED_PARAMETERS, result.included());\n\t\t\t\t} catch (IllegalStateException e) {\n\t\t\t\t\tLOGGER.warn(\"HTTP Session was invalidated. It is not possible to include \" +\n\t\t\t\t\t\t\t\"Result parameters on Flash Scope\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tstack.next(method, resourceInstance);\n\n\t}\n\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableResponse;\nimport br.com.caelum.vraptor.http.MutableResponse.RedirectListener;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Interceptor that handles flash scope.\n * @author Lucas Cavalcanti\n * @author Adriano Almeida\n * @since 3.0.2\n */\npublic class FlashInterceptor implements Interceptor {\n\n\tfinal static String FLASH_INCLUDED_PARAMETERS = \"br.com.caelum.vraptor.flash.parameters\";\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(FlashInterceptor.class);\n\n\tprivate final HttpSession session;\n\tprivate final Result result;\n\tprivate final MutableResponse response;\n\n\tpublic FlashInterceptor(HttpSession session, Result result, MutableResponse response) {\n\t\tthis.session = session;\n\t\tthis.result = result;\n\t\tthis.response = response;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn true;\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tMap<String, Object> parameters = (Map<String, Object>) session.getAttribute(FLASH_INCLUDED_PARAMETERS);\n\t\tif (parameters != null) {\n\t\t\tsession.removeAttribute(FLASH_INCLUDED_PARAMETERS);\n\t\t\tfor (Entry<String, Object> parameter : parameters.entrySet()) {\n\t\t\t\tresult.include(parameter.getKey(), parameter.getValue());\n\t\t\t}\n\t\t}\n\t\tresponse.addRedirectListener(new RedirectListener() {\n\t\t\tpublic void beforeRedirect() {\n\t\t\t\ttry {\n\t\t\t\t\tMap<String, Object> included = result.included();\n\t\t\t\t\tif (!included.isEmpty()) {\n\t\t\t\t\t\tsession.setAttribute(FLASH_INCLUDED_PARAMETERS, included);\n\t\t\t\t\t}\n\t\t\t\t} catch (IllegalStateException e) {\n\t\t\t\t\tLOGGER.warn(\"HTTP Session was invalidated. It is not possible to include \" +\n\t\t\t\t\t\t\t\"Result parameters on Flash Scope\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tstack.next(method, resourceInstance);\n\n\t}\n\n\n}\n","lineNo":70}
{"Smelly Sample":"package br.com.caelum.vraptor.view;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class XmlSerializer {\n\t\n\tprivate Writer writer;\n\tprivate Object analyzing;\n\tprivate final List<String> excludes = new ArrayList<String>();\n\tprivate final Map<String, XmlSerializer> includes = new HashMap<String, XmlSerializer>();\n\tprivate final XmlSerializer parent;\n\n\tpublic XmlSerializer(OutputStream output) {\n\t\tthis(new OutputStreamWriter(output));\n\t}\n\t\n\tpublic XmlSerializer(XmlSerializer parent, Writer writer) {\n\t\tthis.parent = parent;\n\t\tthis.writer = writer;\n\t}\n\n\tpublic XmlSerializer(Writer writer) {\n\t\tthis(null, writer);\n\t}\n\n\tpublic <T> XmlSerializer from(T object) {\n\t\tthis.analyzing = object;\n\t\treturn this;\n\t}\n\tprivate void parseFields(Object object, Class type) throws IOException {\n\t\tif(type.equals(Object.class)) {\n\t\t\treturn;\n\t\t}\n\t\tField[] fields = type.getDeclaredFields();\n\t\ttry {\n\t\t\tfor (Field field : fields) {\n\t\t\t\tfield.setAccessible(true);\n\t\t\t\tXmlSerializer serializer = includes.get(field.getName());\n\t\t\t\tif(serializer!=null) {\n\t\t\t\t\tserializer.from(field.get(object)).serializeForReal();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tboolean shouldExclude = excludes.contains(field.getName());\n\t\t\t\tif(!shouldExclude && (field.getType().isPrimitive() || field.getType().equals(String.class))) {\n\t\t\t\t\t\tObject result = field.get(object);\n\t\t\t\t\t\twriter.write(\"  \" + startTag(field.getName()) + result + endTag(field.getName()) + \"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new SerializationException(\"Unable to serialize \" + object, e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new SerializationException(\"Unable to serialize \" + object, e);\n\t\t}\n\t\tparseFields(object, type.getSuperclass());\n\t}\n\n\tprivate String simpleNameFor(String name) {\n\t\tif(name.length()==1) {\n\t\t\treturn name.toLowerCase();\n\t\t}\n\t\tStringBuilder content = new StringBuilder();\n\t\tcontent.append(Character.toLowerCase(name.charAt(0)));\n\t\tfor(int i=1;i<name.length();i++) {\n\t\t\tchar c = name.charAt(i);\n\t\t\tif(Character.isUpperCase(c)) {\n\t\t\t\tcontent.append(\"_\");\n\t\t\t\tcontent.append(Character.toLowerCase(c));\n\t\t\t} else {\n\t\t\t\tcontent.append(c);\n\t\t\t}\n\t\t}\n\t\treturn content.toString();\n\t}\n\n\tprivate String endTag(String name) {\n\t\treturn \"<\/\" + name + \">\";\n\t}\n\n\tprivate String startTag(String name) {\n\t\treturn \"<\" + name + \">\";\n\t}\n\n\tpublic XmlSerializer exclude(String... names) {\n\t\tfor(String fieldName : names) {\n\t\t\tthis.excludes .add(fieldName);\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic void serialize() {\n\t\tif(this.parent!=null) {\n\t\t\tparent.serialize();\n\t\t\treturn;\n\t\t}\n\t\tserializeForReal();\n\t}\n\n\tprivate void serializeForReal() {\n\t\tString name = simpleNameFor(analyzing.getClass().getSimpleName());\n\t\ttry {\n\t\t\twriter.write(\"<\" + name + \">\\n\");\n\t\t\tparseFields(analyzing, analyzing.getClass());\n\t\t\twriter.write(\"<\/\" + name + \">\");\n\t\t\twriter.flush();\n\t\t} catch (SecurityException e) {\n\t\t\tthrow new SerializationException(\"Unable to serialize \" + analyzing, e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new SerializationException(\"Unable to serialize \" + analyzing, e);\n\t\t}\n\t}\n\n\tpublic XmlSerializer include(String fieldName) {\n\t\tXmlSerializer serializer = new XmlSerializer(this, writer);\n\t\tthis.includes.put(fieldName, serializer);\n\t\treturn serializer;\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.view;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Writer;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class XmlSerializer {\n\t\n\tprivate Writer writer;\n\tprivate Object analyzing;\n\tprivate final List<String> excludes = new ArrayList<String>();\n\tprivate final Map<String, XmlSerializer> includes = new HashMap<String, XmlSerializer>();\n\tprivate final XmlSerializer parent;\n\tprivate final List<String> methods = new ArrayList<String>();\n\n\tpublic XmlSerializer(OutputStream output) {\n\t\tthis(new OutputStreamWriter(output));\n\t}\n\t\n\tpublic XmlSerializer(XmlSerializer parent, Writer writer) {\n\t\tthis.parent = parent;\n\t\tthis.writer = writer;\n\t}\n\n\tpublic XmlSerializer(Writer writer) {\n\t\tthis(null, writer);\n\t}\n\n\tpublic <T> XmlSerializer from(T object) {\n\t\tthis.analyzing = object;\n\t\treturn this;\n\t}\n\tprivate void parseFields(Object object, Class type) throws IOException {\n\t\tif(type.equals(Object.class)) {\n\t\t\treturn;\n\t\t}\n\t\tField[] fields = type.getDeclaredFields();\n\t\ttry {\n\t\t\tfor (Field field : fields) {\n\t\t\t\tfield.setAccessible(true);\n\t\t\t\tXmlSerializer serializer = includes.get(field.getName());\n\t\t\t\tif(serializer!=null) {\n\t\t\t\t\tserializer.from(field.get(object)).serializeForReal();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tboolean shouldExclude = excludes.contains(field.getName());\n\t\t\t\tif(!shouldExclude && (field.getType().isPrimitive() || field.getType().equals(String.class))) {\n\t\t\t\t\t\tObject result = field.get(object);\n\t\t\t\t\t\twriter.write(\"  \" + startTag(field.getName()) + result + endTag(field.getName()) + \"\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IllegalArgumentException e) {\n\t\t\tthrow new SerializationException(\"Unable to serialize \" + object, e);\n\t\t} catch (IllegalAccessException e) {\n\t\t\tthrow new SerializationException(\"Unable to serialize \" + object, e);\n\t\t}\n\t\tparseFields(object, type.getSuperclass());\n\t}\n\n\tprivate String simpleNameFor(String name) {\n\t\tif(name.length()==1) {\n\t\t\treturn name.toLowerCase();\n\t\t}\n\t\tStringBuilder content = new StringBuilder();\n\t\tcontent.append(Character.toLowerCase(name.charAt(0)));\n\t\tfor(int i=1;i<name.length();i++) {\n\t\t\tchar c = name.charAt(i);\n\t\t\tif(Character.isUpperCase(c)) {\n\t\t\t\tcontent.append(\"_\");\n\t\t\t\tcontent.append(Character.toLowerCase(c));\n\t\t\t} else {\n\t\t\t\tcontent.append(c);\n\t\t\t}\n\t\t}\n\t\treturn content.toString();\n\t}\n\n\tprivate String endTag(String name) {\n\t\treturn \"<\/\" + name + \">\";\n\t}\n\n\tprivate String startTag(String name) {\n\t\treturn \"<\" + name + \">\";\n\t}\n\n\tpublic XmlSerializer exclude(String... names) {\n\t\tfor(String fieldName : names) {\n\t\t\tthis.excludes .add(fieldName);\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic void serialize() {\n\t\tif(this.parent!=null) {\n\t\t\tparent.serialize();\n\t\t\treturn;\n\t\t}\n\t\tserializeForReal();\n\t}\n\n\tprivate void serializeForReal() {\n\t\tClass<? extends Object> baseType = analyzing.getClass();\n\t\tString name = simpleNameFor(baseType.getSimpleName());\n\t\ttry {\n\t\t\twriter.write(\"<\" + name + \">\\n\");\n\t\t\tparseFields(analyzing, baseType);\n\t\t\tfor(String methodName : this.methods) {\n\t\t\t\tMethod method = findMethod(baseType, methodName);\n\t\t\t\tif(method==null) {\n\t\t\t\t\tthrow new SerializationException(\"Unable to find method \" + methodName + \" while inspecting \" + analyzing);\n\t\t\t\t}\n\t\t\t\twriter.write(startTag(methodName) + method.invoke(analyzing) + endTag(methodName));\n\t\t\t}\n\t\t\twriter.write(\"<\/\" + name + \">\");\n\t\t\twriter.flush();\n\t\t} catch (Exception e) {\n\t\t\tthrow new SerializationException(\"Unable to serialize \" + analyzing, e);\n\t\t}\n\t}\n\n\tprivate Method findMethod(Class<? extends Object> type,\n\t\t\tString name) {\n\t\t// guilherme: careful, we want to later invoke this method with parameters to inject possible\n\t\t// atom/hypermedia aware xml constructors\n\t\tfor(Method m : type.getDeclaredMethods()) {\n\t\t\tif(m.getName().equals(name)) {\n\t\t\t\treturn m;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic XmlSerializer include(String fieldName) {\n\t\tXmlSerializer serializer = new XmlSerializer(this, writer);\n\t\tthis.includes.put(fieldName, serializer);\n\t\treturn serializer;\n\t}\n\n\tpublic XmlSerializer addMethod(String methodName) {\n\t\tthis.methods.add(methodName);\n\t\treturn this;\n\t}\n\n}\n","lineNo":110}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n * \thttp://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.lang.reflect.Type;\nimport java.math.BigDecimal;\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Vector;\n\nimport junit.framework.Assert;\n\nimport org.jmock.Expectations;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class OutjectResultTest {\n\n\tprivate VRaptorMockery mockery;\n\tprivate Result result;\n\tprivate MethodInfo info;\n\tprivate OutjectResult interceptor;\n\tprivate ResourceMethod method;\n\tprivate Object instance;\n\tprivate InterceptorStack stack;\n\n\t@Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.result = mockery.mock(Result.class);\n\t\tthis.info = mockery.mock(MethodInfo.class);\n\t\tthis.instance = null;\n\t\tthis.method = mockery.mock(ResourceMethod.class);\n\t\tthis.stack = mockery.mock(InterceptorStack.class);\n\t\tthis.interceptor = new OutjectResult(result, info);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(stack).next(method, instance);\n\t\t\t}\n\t\t});\n\t}\n\n\tinterface MyComponent {\n\t\tString returnsAString();\n\t\tList<String> returnsStrings();\n\t\tvoid noReturn();\n\t}\n\n\t@Test\n\tpublic void shouldOutjectWithASimpleTypeName() throws NoSuchMethodException {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(method).getMethod(); will(returnValue(MyComponent.class.getMethod(\"returnsAString\")));\n\t\t\t\tone(info).getResult(); will(returnValue(\"myString\"));\n\t\t\t\tone(result).include(\"string\", \"myString\");\n\t\t\t}\n\t\t});\n\t\tinterceptor.intercept(stack, method, instance);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t@Test\n\tpublic void shouldOutjectACollectionAsAList() throws NoSuchMethodException {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(method).getMethod(); will(returnValue(MyComponent.class.getMethod(\"returnsStrings\")));\n\t\t\t\tone(info).getResult(); will(returnValue(\"myString\"));\n\t\t\t\tone(result).include(\"stringList\", \"myString\");\n\t\t\t}\n\t\t});\n\t\tinterceptor.intercept(stack, method, instance);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t@Test\n\tpublic void shouldNotOutjectIfThereIsNoReturnType() throws NoSuchMethodException {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(method).getMethod(); will(returnValue(MyComponent.class.getMethod(\"noReturn\")));\n\t\t\t}\n\t\t});\n\t\tinterceptor.intercept(stack, method, instance);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\n\tstatic class AClass {}\n\n\t@Test\n\tpublic void shouldDecapitalizeSomeCharsUntilItFindsOneUppercased() throws NoSuchMethodException {\n\t\tAssert.assertEquals(\"urlClassLoader\",interceptor.nameFor(URLClassLoader.class));\n\t\tAssert.assertEquals(\"bigDecimal\",interceptor.nameFor(BigDecimal.class));\n\t\tAssert.assertEquals(\"string\",interceptor.nameFor(String.class));\n\t\tAssert.assertEquals(\"aClass\",interceptor.nameFor(AClass.class));\n\t\tAssert.assertEquals(\"url\",interceptor.nameFor(URL.class));\n\t}\n\n\n\tArrayList<URLClassLoader> urls;\n\tHashSet<BigDecimal> bigs;\n\tHashSet<? extends BigDecimal> bigsLimited;\n\tHashSet<? super BigDecimal> bigsLimited2;\n\tHashSet<?> objects;\n\tHashSet bigsOld;\n\tVector<String> strings;\n\tClass<String> clazz;\n\n\t@Test\n\tpublic void shouldDecapitalizeSomeCharsUntilItFindsOneUppercasedForListsAndArrays() throws NoSuchMethodException, SecurityException, NoSuchFieldException {\n\t\tAssert.assertEquals(\"stringList\",interceptor.nameFor(getField(\"strings\")));\n\t\tAssert.assertEquals(\"bigDecimalList\",interceptor.nameFor(getField(\"bigs\")));\n\t\tAssert.assertEquals(\"hashSet\",interceptor.nameFor(getField(\"bigsOld\")));\n\t\tAssert.assertEquals(\"class\",interceptor.nameFor(getField(\"clazz\")));\n\t\tAssert.assertEquals(\"aClassList\",interceptor.nameFor(AClass[].class));\n\t\tAssert.assertEquals(\"urlClassLoaderList\",interceptor.nameFor(getField(\"urls\")));\n\t}\n\n\t@Test\n\tpublic void shouldDecapitalizeSomeCharsUntilItFindsOneUppercasedForListsAndArraysForBoundedGenericElements() throws NoSuchMethodException, SecurityException, NoSuchFieldException {\n\t\tAssert.assertEquals(\"bigDecimalList\",interceptor.nameFor(getField(\"bigsLimited\")));\n\t\tAssert.assertEquals(\"bigDecimalList\",interceptor.nameFor(getField(\"bigsLimited2\")));\n\t\tAssert.assertEquals(\"objectList\",interceptor.nameFor(getField(\"objects\")));\n\t}\n\n\n\tprivate Type getField(String string) throws SecurityException, NoSuchFieldException {\n\t\treturn this.getClass().getDeclaredField(string).getGenericType();\n\t}\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * \thttp://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.lang.reflect.Method;\nimport java.util.List;\n\nimport org.jmock.Expectations;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class OutjectResultTest {\n\n\tprivate VRaptorMockery mockery;\n\tprivate Result result;\n\tprivate MethodInfo info;\n\tprivate OutjectResult interceptor;\n\tprivate ResourceMethod method;\n\tprivate Object instance;\n\tprivate InterceptorStack stack;\n\tprivate TypeNameExtractor extractor;\n\n\t@Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.result = mockery.mock(Result.class);\n\t\tthis.info = mockery.mock(MethodInfo.class);\n\t\tthis.instance = null;\n\t\tthis.method = mockery.mock(ResourceMethod.class);\n\t\tthis.stack = mockery.mock(InterceptorStack.class);\n\t\tthis.extractor = mockery.mock(TypeNameExtractor.class);\n\n\t\tthis.interceptor = new OutjectResult(result, info, extractor);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(stack).next(method, instance);\n\t\t\t}\n\t\t});\n\t}\n\n\tinterface MyComponent {\n\t\tString returnsAString();\n\t\tList<String> returnsStrings();\n\t\tvoid noReturn();\n\t}\n\n\t@Test\n\tpublic void shouldOutjectWithASimpleTypeName() throws NoSuchMethodException {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(method).getMethod(); will(returnValue(MyComponent.class.getMethod(\"returnsAString\")));\n\t\t\t\tone(info).getResult(); will(returnValue(\"myString\"));\n\n\t\t\t\tone(extractor).nameFor(String.class); will(returnValue(\"string\"));\n\n\t\t\t\tone(result).include(\"string\", \"myString\");\n\t\t\t}\n\t\t});\n\t\tinterceptor.intercept(stack, method, instance);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t@Test\n\tpublic void shouldOutjectACollectionAsAList() throws NoSuchMethodException {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tMethod myComponentMethod = MyComponent.class.getMethod(\"returnsStrings\");\n\t\t\t\tone(method).getMethod(); will(returnValue(myComponentMethod));\n\t\t\t\tone(info).getResult(); will(returnValue(\"myString\"));\n\t\t\t\tone(extractor).nameFor(myComponentMethod.getGenericReturnType()); will(returnValue(\"stringList\"));\n\t\t\t\tone(result).include(\"stringList\", \"myString\");\n\t\t\t}\n\t\t});\n\t\tinterceptor.intercept(stack, method, instance);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t@Test\n\tpublic void shouldNotOutjectIfThereIsNoReturnType() throws NoSuchMethodException {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(method).getMethod(); will(returnValue(MyComponent.class.getMethod(\"noReturn\")));\n\t\t\t}\n\t\t});\n\t\tinterceptor.intercept(stack, method, instance);\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n}\n","lineNo":89}
{"Smelly Sample":"package br.com.caelum.vraptor.view;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\nimport static br.com.caelum.vraptor.view.Results.page;\n\nimport java.util.ArrayList;\n\nimport net.vidageek.mirror.dsl.Mirror;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.View;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.util.test.MockResult;\nimport br.com.caelum.vraptor.validator.Message;\n\npublic class DefaultRefererResult implements RefererResult {\n\n\tprivate final MutableRequest request;\n\tprivate final Result result;\n\tprivate final Router router;\n\tprivate final ParametersProvider provider;\n\tprivate final Localization localization;\n\n\tpublic DefaultRefererResult(Result result, MutableRequest request, Router router,\n\t\t\t\tParametersProvider provider, Localization localization) {\n\t\tthis.result = result;\n\t\tthis.request = request;\n\t\tthis.router = router;\n\t\tthis.provider = provider;\n\t\tthis.localization = localization;\n\t}\n\tpublic FallbackResult forward() {\n\t\tString referer = getReferer();\n\t\tif (referer == null) {\n\t\t\treturn new DefaultFallbackResult();\n\t\t}\n\t\tResourceMethod method = router.parse(referer, HttpMethod.GET, request);\n\t\tif (method == null) {\n\t\t\tresult.use(page()).forward(referer);\n\t\t} else {\n\t\t\tObject instance = result.use(logic()).forwardTo(method.getResource().getType());\n\t\t\tnew Mirror().on(instance).invoke().method(method.getMethod())\n\t\t\t\t.withArgs(provider.getParametersFor(method, new ArrayList<Message>(), localization.getBundle()));\n\t\t}\n\t\treturn new NullFallbackResult();\n\t}\n\n\tpublic FallbackResult redirect() {\n\t\tString referer = getReferer();\n\t\tif (referer == null) {\n\t\t\treturn new DefaultFallbackResult();\n\t\t}\n\t\treturn new NullFallbackResult();\n\t}\n\n\tprivate String getReferer() {\n\t\tString referer = request.getHeader(\"Referer\");\n\t\tif (referer == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tString path = request.getContextPath();\n\t\treturn referer.substring(referer.indexOf(path) + path.length());\n\t}\n\n\tprivate static class NullFallbackResult implements FallbackResult{\n\t\tpublic <T extends View> T or(Class<T> view) {\n\t\t\treturn new MockResult().use(view);\n\t\t}\n\t}\n\tprivate class DefaultFallbackResult implements FallbackResult {\n\t\tpublic <T extends View> T or(Class<T> view) {\n\t\t\treturn result.use(view);\n\t\t}\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.view;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\nimport static br.com.caelum.vraptor.view.Results.page;\n\nimport java.util.ArrayList;\n\nimport net.vidageek.mirror.dsl.Mirror;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.Message;\n\npublic class DefaultRefererResult implements RefererResult {\n\n\tprivate final MutableRequest request;\n\tprivate final Result result;\n\tprivate final Router router;\n\tprivate final ParametersProvider provider;\n\tprivate final Localization localization;\n\n\tpublic DefaultRefererResult(Result result, MutableRequest request, Router router,\n\t\t\t\tParametersProvider provider, Localization localization) {\n\t\tthis.result = result;\n\t\tthis.request = request;\n\t\tthis.router = router;\n\t\tthis.provider = provider;\n\t\tthis.localization = localization;\n\t}\n\n\tpublic void forward() throws IllegalStateException {\n\t\tString referer = getReferer();\n\n\t\tResourceMethod method = router.parse(referer, HttpMethod.GET, request);\n\t\tif (method == null) {\n\t\t\tresult.use(page()).forward(referer);\n\t\t} else {\n\t\t\texecuteMethod(method, result.use(logic()).forwardTo(method.getResource().getType()));\n\t\t}\n\t}\n\n\tprivate void executeMethod(ResourceMethod method, Object instance) {\n\t\tnew Mirror().on(instance).invoke().method(method.getMethod())\n\t\t\t.withArgs(provider.getParametersFor(method, new ArrayList<Message>(), localization.getBundle()));\n\t}\n\n\tpublic void redirect() throws IllegalStateException {\n\t\tString referer = getReferer();\n\t\tResourceMethod method = router.parse(referer, HttpMethod.GET, request);\n\t\tif (method == null) {\n\t\t\tresult.use(page()).redirect(referer);\n\t\t} else {\n\t\t\texecuteMethod(method, result.use(logic()).redirectTo(method.getResource().getType()));\n\t\t}\n\t}\n\n\tprivate String getReferer() {\n\t\tString referer = request.getHeader(\"Referer\");\n\t\tif (referer == null) {\n\t\t\tthrow new IllegalStateException(\"The Referer header was not specified\");\n\t\t}\n\n\t\tString path = request.getContextPath();\n\t\treturn referer.substring(referer.indexOf(path) + path.length());\n\t}\n\n}\n","lineNo":53}
{"Smelly Sample":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n * \thttp://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */\npackage br.com.caelum.vraptor.http;\n\nimport java.lang.reflect.AccessibleObject;\nimport java.util.Arrays;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\n\nimport com.thoughtworks.paranamer.BytecodeReadingParanamer;\nimport com.thoughtworks.paranamer.CachingParanamer;\nimport com.thoughtworks.paranamer.ParameterNamesNotFoundException;\nimport com.thoughtworks.paranamer.Paranamer;\n\n/**\n * Paranamer based parameter name provider provides parameter names based on\n * their local variable name during compile time. Information is retrieved using\n * paranamer's mechanism.\n *\n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class ParanamerNameProvider implements ParameterNameProvider {\n    private final ParameterNameProvider delegate = new DefaultParameterNameProvider();\n    private final Paranamer info = new CachingParanamer(new BytecodeReadingParanamer());\n\n    private static final Logger logger = LoggerFactory.getLogger(ParanamerNameProvider.class);\n\n    public String[] parameterNamesFor(AccessibleObject method) {\n        try {\n            String[] parameterNames = info.lookupParameterNames(method);\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Found parameter names with paranamer for \" + method + \" as \" + Arrays.toString(parameterNames));\n            }\n            return parameterNames;\n        } catch (ParameterNamesNotFoundException e) {\n            return delegate.parameterNamesFor(method);\n        }\n    }\n\n}\n","Method after Refactoring":"/***\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); \n * you may not use this file except in compliance with the License. \n * You may obtain a copy of the License at \n * \n * \thttp://www.apache.org/licenses/LICENSE-2.0 \n * \n * Unless required by applicable law or agreed to in writing, software \n * distributed under the License is distributed on an \"AS IS\" BASIS, \n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. \n * See the License for the specific language governing permissions and \n * limitations under the License. \n */\npackage br.com.caelum.vraptor.http;\n\nimport java.lang.reflect.AccessibleObject;\nimport java.util.Arrays;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\n\nimport com.thoughtworks.paranamer.BytecodeReadingParanamer;\nimport com.thoughtworks.paranamer.CachingParanamer;\nimport com.thoughtworks.paranamer.ParameterNamesNotFoundException;\nimport com.thoughtworks.paranamer.Paranamer;\n\n/**\n * Paranamer based parameter name provider provides parameter names based on\n * their local variable name during compile time. Information is retrieved using\n * paranamer's mechanism.\n *\n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class ParanamerNameProvider implements ParameterNameProvider {\n    private final ParameterNameProvider delegate = new DefaultParameterNameProvider();\n    private final Paranamer info = new CachingParanamer(new BytecodeReadingParanamer());\n\n    private static final Logger logger = LoggerFactory.getLogger(ParanamerNameProvider.class);\n\n    public String[] parameterNamesFor(AccessibleObject method) {\n        try {\n            String[] parameterNames = info.lookupParameterNames(method);\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Found parameter names with paranamer for \" + method + \" as \" + Arrays.toString(parameterNames));\n            }\n            \n            String[] defensiveCopy = Arrays.copyOf(parameterNames, parameterNames.length);\n            return defensiveCopy;\n        } catch (ParameterNamesNotFoundException e) {\n            return delegate.parameterNamesFor(method);\n        }\n    }\n\n}\n","lineNo":53}
{"Smelly Sample":"package br.com.caelum.vraptor.mydvds.controller;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.mydvds.dao.DvdDao;\nimport br.com.caelum.vraptor.mydvds.interceptor.UserInfo;\nimport br.com.caelum.vraptor.mydvds.model.Dvd;\nimport br.com.caelum.vraptor.mydvds.model.DvdCopy;\nimport br.com.caelum.vraptor.mydvds.model.DvdType;\nimport br.com.caelum.vraptor.mydvds.model.User;\nimport br.com.caelum.vraptor.util.test.MockResult;\nimport br.com.caelum.vraptor.util.test.MockValidator;\nimport br.com.caelum.vraptor.validator.ValidationError;\n\n/**\n * Test class for DvdController.\n * @author Lucas Cavalcanti\n *\n */\npublic class DvdsCopiesControllerTest {\n\n\n\tprivate Mockery mockery;\n\tprivate HttpSession session;\n\tprivate UserInfo userInfo;\n\tprivate MockResult result;\n\tprivate DvdDao dao;\n\tprivate DvdsController controller;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tmockery = new Mockery();\n\n\t\tdao = mockery.mock(DvdDao.class);\n\t\tsession = mockery.mock(HttpSession.class);\n\n\t\t//ignoring session\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(session).getAttribute(UserInfo.CURRENT_USER);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(session);\n\t\t\t}\n\t\t});\n\n\t\tuserInfo = new UserInfo(session);\n\t\tuserInfo.login(new User());\n\n\t\tresult = new MockResult();\n\t\tValidator validator = new MockValidator();\n\n\t\tcontroller = new DvdsController(dao, userInfo, result, validator);\n\t}\n\n\t@Test\n\tpublic void addingAValidDvd() throws Exception {\n\t\tDvd dvd = new Dvd();\n\t\tdvd.setDescription(\"A random description\");\n\t\tdvd.setTitle(\"Once upon a time\");\n\t\tdvd.setType(DvdType.VIDEO);\n\n\t\twillAddTheDvd(dvd);\n\n\t\tcontroller.add(dvd, null);\n\n\t}\n\t@Test(expected=ValidationError.class)\n\tpublic void addingAnInvalidDvd() throws Exception {\n\t\tDvd dvd = new Dvd();\n\t\tdvd.setDescription(\"short\");\n\t\tdvd.setTitle(\"Once upon a time\");\n\t\tdvd.setType(DvdType.VIDEO);\n\n\t\twillNotAddTheDvd(dvd);\n\n\t\tcontroller.add(dvd, null);\n\n\t}\n\n\tprivate void willNotAddTheDvd(final Dvd dvd) {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tnever(dao).add(dvd);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void willAddTheDvd(final Dvd dvd) {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(dao).add(dvd);\n\t\t\t\tone(dao).add(new DvdCopy(userInfo.getUser(), dvd));\n\t\t\t}\n\t\t});\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.mydvds.controller;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.mydvds.dao.DvdDao;\nimport br.com.caelum.vraptor.mydvds.dao.UserDao;\nimport br.com.caelum.vraptor.mydvds.interceptor.UserInfo;\nimport br.com.caelum.vraptor.mydvds.model.Dvd;\nimport br.com.caelum.vraptor.mydvds.model.DvdCopy;\nimport br.com.caelum.vraptor.mydvds.model.User;\nimport br.com.caelum.vraptor.util.test.MockResult;\nimport br.com.caelum.vraptor.util.test.MockValidator;\nimport br.com.caelum.vraptor.validator.ValidationError;\n\n/**\n * Test class for DvdController.\n * @author Lucas Cavalcanti\n *\n */\npublic class DvdsCopiesControllerTest {\n\n\n\tprivate Mockery mockery;\n\tprivate HttpSession session;\n\tprivate UserInfo userInfo;\n\tprivate MockResult result;\n\tprivate DvdDao dao;\n\tprivate DvdCopiesController controller;\n\tprivate UserDao userDao;\n\n\t@Before\n\tpublic void setUp() throws Exception {\n\t\tmockery = new Mockery();\n\n\t\tdao = mockery.mock(DvdDao.class);\n\t\tuserDao = mockery.mock(UserDao.class);\n\t\tsession = mockery.mock(HttpSession.class);\n\n\t\t//ignoring session\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(session).getAttribute(UserInfo.CURRENT_USER);\n\t\t\t\twill(returnValue(null));\n\n\t\t\t\tignoring(session);\n\t\t\t\tignoring(userDao);\n\t\t\t}\n\t\t});\n\n\t\tuserInfo = new UserInfo(session);\n\t\tUser user = new User();\n\t\tuserInfo.login(user);\n\n\t\tresult = new MockResult();\n\t\tValidator validator = new MockValidator();\n\n\t\tcontroller = new DvdCopiesController(dao, userDao, userInfo, result, validator);\n\t}\n\n\t@Test\n\tpublic void addingAValidDvd() throws Exception {\n\t\tDvd dvd = new Dvd();\n\t\tdvd.setId(2l);\n\n\t\twillAddTheDvdCopy(dvd);\n\n\t\tcontroller.addToMyList(userInfo.getUser(), dvd);\n\n\t}\n\t@Test(expected=ValidationError.class)\n\tpublic void addingAnDvdCopyWhenUserIsNotLoggedIn() throws Exception {\n\t\tDvd dvd = new Dvd();\n\t\tdvd.setId(2l);\n\n\t\twillNotAddTheDvdCopy(dvd);\n\n\t\tUser user = new User();\n\t\tuser.setLogin(\"abbb\");\n\t\tcontroller.addToMyList(user, dvd);\n\n\t}\n\n\tprivate void willNotAddTheDvdCopy(final Dvd dvd) {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tnever(dao).add(with(any(DvdCopy.class)));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void willAddTheDvdCopy(final Dvd dvd) {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(dao).add(with(any(DvdCopy.class)));\n\t\t\t}\n\t\t});\n\t}\n}\n","lineNo":57}
{"Smelly Sample":"package br.com.caelum.vraptor.mydvds.dao;\n\nimport java.util.List;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.mydvds.model.User;\n\n/**\n * Data Access Object of User entity.\n */\n@Component\npublic class UserDao {\n\n\tprivate final Session session;\n\n\t/**\n\t * Creates a new UserDao. You can receive dependencies through constructor,\n\t * because this class is annotated with @Component. This class can be used\n\t * as dependency of another class, as well.\n\t * @param session Hibernate's Session.\n\t */\n\tpublic UserDao(Session session) {\n\t\tthis.session = session;\n\t}\n\n\t/**\n\t * Finds an user by login and password.\n\t *\n\t * @param login\n\t * @param password\n\t * @return found user if it is unique\n\t * @throws HibernateException, if there are more than one user\n\t */\n\tpublic User search(String login, String password) {\n\t\tString hql = \"from User u where u.login = :login and u.password = :password\";\n\n\t\tQuery query = session.createQuery(hql)\n\t\t\t.setParameter(\"login\", login)\n\t\t\t.setParameter(\"password\", password);\n\n\t\treturn (User) query.uniqueResult();\n\t}\n\n\t/**\n\t * Adds the user on database\n\t *\n\t * @param user\n\t */\n\tpublic void add(User user) {\n\t\tsession.save(user);\n\t}\n\n\t/**\n\t * Synchronize the user data with the database. Any not saved modification on user will be\n\t * overwritten.\n\t *\n\t * @param user\n\t */\n\tpublic void refresh(User user) {\n\t\tsession.refresh(user);\n\t}\n\n\t/**\n\t * Update the user on database.\n\t * @param user\n\t */\n\tpublic void update(User user) {\n\t\tsession.update(user);\n\t}\n\n\t/**\n\t * Retrieves all users from database.\n\t *\n\t * @return\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<User> listAll() {\n\t\treturn session.createCriteria(User.class).list();\n\t}\n\n\t/**\n\t * Checks if there is already an user with given login.\n\t *\n\t * @param login\n\t * @return true if there exists a user\n\t */\n\tpublic boolean containsUserWithLogin(String login) {\n\t\t//cria uma query HQL para verificar,\n\t\t//HQL: \"from User as user where user.login = :login\"\n\t\t//query devolve uma lista e\n\t\t//verifique se a lista está vazía\n\t\treturn !session.createQuery(\"from User user where user.login = :login\")\n\t\t\t\t.setParameter(\"login\", login).list().isEmpty();\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.mydvds.dao;\n\nimport java.util.List;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.mydvds.model.User;\n\n/**\n * Data Access Object of User entity.\n */\n@Component\npublic class UserDao {\n\n\tprivate final Session session;\n\n\t/**\n\t * Creates a new UserDao. You can receive dependencies through constructor,\n\t * because this class is annotated with @Component. This class can be used\n\t * as dependency of another class, as well.\n\t * @param session Hibernate's Session.\n\t */\n\tpublic UserDao(Session session) {\n\t\tthis.session = session;\n\t}\n\n\t/**\n\t * Finds an user by login and password.\n\t *\n\t * @param login\n\t * @param password\n\t * @return found user if it is unique\n\t * @throws HibernateException, if there are more than one user\n\t */\n\tpublic User find(String login, String password) {\n\t\tString hql = \"from User u where u.login = :login and u.password = :password\";\n\n\t\tQuery query = session.createQuery(hql)\n\t\t\t.setParameter(\"login\", login)\n\t\t\t.setParameter(\"password\", password);\n\n\t\treturn (User) query.uniqueResult();\n\t}\n\n\t/**\n\t * Adds the user on database\n\t *\n\t * @param user\n\t */\n\tpublic void add(User user) {\n\t\tsession.save(user);\n\t}\n\n\t/**\n\t * Synchronize the user data with the database. Any not saved modification on user will be\n\t * overwritten.\n\t *\n\t * @param user\n\t */\n\tpublic void refresh(User user) {\n\t\tsession.refresh(user);\n\t}\n\n\t/**\n\t * Update the user on database.\n\t * @param user\n\t */\n\tpublic void update(User user) {\n\t\tsession.update(user);\n\t}\n\n\t/**\n\t * Retrieves all users from database.\n\t *\n\t * @return\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<User> listAll() {\n\t\treturn session.createCriteria(User.class).list();\n\t}\n\n\t/**\n\t * Checks if there is already an user with given login.\n\t *\n\t * @param login\n\t * @return true if there exists a user\n\t */\n\tpublic boolean containsUserWithLogin(String login) {\n\t\tString hql = \"from User user where user.login = :login\";\n\t\tQuery query = session.createQuery(hql).setParameter(\"login\", login);\n\n\t\treturn !query.list().isEmpty();\n\t}\n\n}\n","lineNo":92}
{"Smelly Sample":"package br.com.caelum.vraptor.mydvds.dao;\n\nimport java.util.List;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.mydvds.model.User;\n\n/**\n * Data Access Object of User entity.\n */\n@Component\npublic class UserDao {\n\n\tprivate final Session session;\n\n\t/**\n\t * Creates a new UserDao. You can receive dependencies through constructor,\n\t * because this class is annotated with @Component. This class can be used\n\t * as dependency of another class, as well.\n\t * @param session Hibernate's Session.\n\t */\n\tpublic UserDao(Session session) {\n\t\tthis.session = session;\n\t}\n\n\t/**\n\t * Finds an user by login and password.\n\t *\n\t * @param login\n\t * @param password\n\t * @return found user if it is unique\n\t * @throws HibernateException, if there are more than one user\n\t */\n\tpublic User search(String login, String password) {\n\t\tString hql = \"from User u where u.login = :login and u.password = :password\";\n\n\t\tQuery query = session.createQuery(hql)\n\t\t\t.setParameter(\"login\", login)\n\t\t\t.setParameter(\"password\", password);\n\n\t\treturn (User) query.uniqueResult();\n\t}\n\n\t/**\n\t * Adds the user on database\n\t *\n\t * @param user\n\t */\n\tpublic void add(User user) {\n\t\tsession.save(user);\n\t}\n\n\t/**\n\t * Synchronize the user data with the database. Any not saved modification on user will be\n\t * overwritten.\n\t *\n\t * @param user\n\t */\n\tpublic void refresh(User user) {\n\t\tsession.refresh(user);\n\t}\n\n\t/**\n\t * Update the user on database.\n\t * @param user\n\t */\n\tpublic void update(User user) {\n\t\tsession.update(user);\n\t}\n\n\t/**\n\t * Retrieves all users from database.\n\t *\n\t * @return\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<User> listAll() {\n\t\treturn session.createCriteria(User.class).list();\n\t}\n\n\t/**\n\t * Checks if there is already an user with given login.\n\t *\n\t * @param login\n\t * @return true if there exists a user\n\t */\n\tpublic boolean containsUserWithLogin(String login) {\n\t\t//cria uma query HQL para verificar,\n\t\t//HQL: \"from User as user where user.login = :login\"\n\t\t//query devolve uma lista e\n\t\t//verifique se a lista está vazía\n\t\treturn !session.createQuery(\"from User user where user.login = :login\")\n\t\t\t\t.setParameter(\"login\", login).list().isEmpty();\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.mydvds.dao;\n\nimport java.util.List;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.Query;\nimport org.hibernate.Session;\n\nimport br.com.caelum.vraptor.ioc.Component;\nimport br.com.caelum.vraptor.mydvds.model.User;\n\n/**\n * Data Access Object of User entity.\n */\n@Component\npublic class UserDao {\n\n\tprivate final Session session;\n\n\t/**\n\t * Creates a new UserDao. You can receive dependencies through constructor,\n\t * because this class is annotated with @Component. This class can be used\n\t * as dependency of another class, as well.\n\t * @param session Hibernate's Session.\n\t */\n\tpublic UserDao(Session session) {\n\t\tthis.session = session;\n\t}\n\n\t/**\n\t * Finds an user by login and password.\n\t *\n\t * @param login\n\t * @param password\n\t * @return found user if it is unique\n\t * @throws HibernateException, if there are more than one user\n\t */\n\tpublic User find(String login, String password) {\n\t\tString hql = \"from User u where u.login = :login and u.password = :password\";\n\n\t\tQuery query = session.createQuery(hql)\n\t\t\t.setParameter(\"login\", login)\n\t\t\t.setParameter(\"password\", password);\n\n\t\treturn (User) query.uniqueResult();\n\t}\n\n\t/**\n\t * Adds the user on database\n\t *\n\t * @param user\n\t */\n\tpublic void add(User user) {\n\t\tsession.save(user);\n\t}\n\n\t/**\n\t * Synchronize the user data with the database. Any not saved modification on user will be\n\t * overwritten.\n\t *\n\t * @param user\n\t */\n\tpublic void refresh(User user) {\n\t\tsession.refresh(user);\n\t}\n\n\t/**\n\t * Update the user on database.\n\t * @param user\n\t */\n\tpublic void update(User user) {\n\t\tsession.update(user);\n\t}\n\n\t/**\n\t * Retrieves all users from database.\n\t *\n\t * @return\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic List<User> listAll() {\n\t\treturn session.createCriteria(User.class).list();\n\t}\n\n\t/**\n\t * Checks if there is already an user with given login.\n\t *\n\t * @param login\n\t * @return true if there exists a user\n\t */\n\tpublic boolean containsUserWithLogin(String login) {\n\t\tString hql = \"from User user where user.login = :login\";\n\t\tQuery query = session.createQuery(hql).setParameter(\"login\", login);\n\n\t\treturn !query.list().isEmpty();\n\t}\n\n}\n","lineNo":93}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.WildcardType;\nimport java.util.Collection;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * Outjects the result of the method invocation to the desired result\n *\n * @author guilherme silveira\n */\npublic class OutjectResult implements Interceptor {\n\n\tprivate final Result result;\n\tprivate final MethodInfo info;\n\n\tpublic OutjectResult(Result result, MethodInfo info) {\n\t\tthis.result = result;\n\t\tthis.info = info;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn method.getResource().getType().isAnnotationPresent(Resource.class);\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tType returnType = method.getMethod().getGenericReturnType();\n\t\tif (!returnType.equals(void.class)) {\n\t\t\tresult.include(nameFor(returnType), this.info.getResult());\n\t\t}\n\t\tstack.next(method, resourceInstance);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tString nameFor(Type generic) {\n\t\tif (generic instanceof ParameterizedType) {\n\t\t\tParameterizedType type = (ParameterizedType) generic;\n\t\t\tClass raw = (Class) type.getRawType();\n\t\t\tif (Collection.class.isAssignableFrom(raw)) {\n\t\t\t\treturn nameFor(type.getActualTypeArguments()[0]) + \"List\";\n\t\t\t}\n\t\t\treturn nameFor(raw);\n\t\t}\n\n\t\tif (generic instanceof WildcardType) {\n\t\t\tWildcardType wild = (WildcardType) generic;\n\t\t\tif ((wild.getLowerBounds().length != 0)) {\n\t\t\t\treturn nameFor(wild.getLowerBounds()[0]);\n\t\t\t}\n\t\t\telse return nameFor(wild.getUpperBounds()[0]);\n\t\t}\n\n\t\tClass raw = (Class) generic;\n\n\n\t\tif (raw.isArray()) {\n\t\t\treturn nameFor(raw.getComponentType()) + \"List\";\n\t\t}\n\n\t\treturn Info.decapitalize(raw.getSimpleName());\n\t}\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.WildcardType;\nimport java.util.Collection;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * Outjects the result of the method invocation to the desired result\n *\n * @author guilherme silveira\n */\npublic class OutjectResult implements Interceptor {\n\n\tprivate final Result result;\n\tprivate final MethodInfo info;\n\n\tpublic OutjectResult(Result result, MethodInfo info) {\n\t\tthis.result = result;\n\t\tthis.info = info;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn method.getResource().getType().isAnnotationPresent(Resource.class);\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tType returnType = method.getMethod().getGenericReturnType();\n\t\tif (!returnType.equals(void.class)) {\n\t\t\tresult.include(nameFor(returnType), this.info.getResult());\n\t\t}\n\t\tstack.next(method, resourceInstance);\n\t}\n\n\t/*\n\t * TODO: externalize as an application Component\n\t * and maybe use a cache.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tString nameFor(Type generic) {\n\t\tif (generic instanceof ParameterizedType) {\n\t\t\tParameterizedType type = (ParameterizedType) generic;\n\t\t\tClass raw = (Class) type.getRawType();\n\t\t\tif (Collection.class.isAssignableFrom(raw)) {\n\t\t\t\treturn nameFor(type.getActualTypeArguments()[0]) + \"List\";\n\t\t\t}\n\t\t\treturn nameFor(raw);\n\t\t}\n\n\t\tif (generic instanceof WildcardType) {\n\t\t\tWildcardType wild = (WildcardType) generic;\n\t\t\tif ((wild.getLowerBounds().length != 0)) {\n\t\t\t\treturn nameFor(wild.getLowerBounds()[0]);\n\t\t\t}\n\t\t\telse return nameFor(wild.getUpperBounds()[0]);\n\t\t}\n\n\t\tClass raw = (Class) generic;\n\n\n\t\tif (raw.isArray()) {\n\t\t\treturn nameFor(raw.getComponentType()) + \"List\";\n\t\t}\n\n\t\tString name = raw.getSimpleName();\n\n\t\t// common case: SomeClass -> someClass\n\t\tif(Character.isLowerCase(name.charAt(1))) {\n\t\t\treturn Info.decapitalize(name);\n\t\t}\n\n\t\t// different case: URLClassLoader -> urlClassLoader\n\t\tfor (int i = 1; i < name.length(); i++) {\n\t\t\tif(Character.isLowerCase(name.charAt(i))) {\n\t\t\t\treturn name.substring(0, i-1).toLowerCase()+name.substring(i-1, name.length());\n\t\t\t}\n\t\t}\n\n\t\t// all uppercase: URL -> url\n\t\treturn name.toLowerCase();\n\t}\n\n}\n","lineNo":101}
{"Smelly Sample":"package org.vraptor.mydvds.logic;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.vraptor.mydvds.dao.DaoFactory;\nimport org.vraptor.mydvds.interceptor.UserInfo;\nimport org.vraptor.mydvds.model.User;\n\nimport br.com.caelum.vraptor.Get;\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.Post;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.validator.Hibernate;\nimport br.com.caelum.vraptor.validator.Validations;\nimport br.com.caelum.vraptor.view.Results;\n\n/**\n * A classe NewUser, nome do componente \"user\". Será interceptada pelo <code>DaoInterceptor<\/code> e\n * <code>TransactionInterceptor<\/code> .\n */\n@Resource\npublic class UserController {\n\n\tprivate final DaoFactory factory;\n    private final Validator validator;\n    private final Result result;\n    private final UserInfo userInfo;\n\n\t/**\n\t * Cria o componente e injeta a fábrica de daos pelo construtor.\n\t *\n\t * Podemos usar injeção pelo construtor por causa do\n\t * <code>DaoInterceptor.class<\/code> que cria e ejeta a fábrica.\n\t *\n\t * @param factory fábrica de daos\n\t */\n\tpublic UserController(Result result, DaoFactory factory, Validator validator, UserInfo userInfo) {\n\t\tthis.result = result;\n        this.factory = factory;\n        this.validator = validator;\n        this.userInfo = userInfo;\n\t}\n\n\t@Get\n\tpublic void home() {\n\t    factory.getUserDao().refresh(userInfo.getUser());\n\t    result.use(Results.page()).forward();\n\t}\n\n\t@Get\n\tpublic void list() {\n        List<User> users = new ArrayList<User>();\n        // search by hand example\n        List<User> usersFromDatabase = this.factory.getUserDao().listAll();\n        for (User user : usersFromDatabase) {\n            User newUser = new User();\n            newUser.setId(user.getId());\n            newUser.setName(user.getName());\n            users.add(newUser);\n        }\n\n        result.include(\"users\", users);\n        result.use(Results.page()).forward();\n    }\n\n\t/**\n\t * URL: \t\t\t/user\n\t * View ok:\t\t\tadd.jsp\n\t *\n\t * The \"user\" parameter will be populated with the request parameters, for example:\n\t *\n\t * \t\t/user?user.name=\"Nico\"&user.login=\"555555\"\n\t *\n\t * automatically populates the name and login parameters from the user object with values Nico and 555555\n\t *\n\t * O método adiciona o usuário no banco de dados.\n\t */\n\t@Path(\"/user\")\n\t@Post\n\tpublic void add(User user) {\n\t    result.include(\"user\", user);\n\t    validateAdd(user);\n\n\t\tthis.factory.getUserDao().add(user);\n\t\tresult.use(Results.page()).forward();\n\t}\n\n\t/**\n\t * Validation with VRaptor.\n\t */\n\tpublic void validateAdd(final User user) {\n\t\tvalidator.checking(new Validations() {{\n\t\t    // checks if there is already an user with the specified login\n\t\t    that(!factory.getUserDao().containsUserWithLogin(user.getLogin()), \"login\", \"login_already_exists\");\n\n\t\t    // calls Hibernate Validator for the user object\n\t\t    and(Hibernate.validate(user));\n\t\t}});\n\n\t\tvalidator.onErrorUse(Results.page()).forward(\"index.jsp\");\n\t}\n\n}\n","Method after Refactoring":"package org.vraptor.mydvds.logic;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.vraptor.mydvds.dao.DaoFactory;\nimport org.vraptor.mydvds.interceptor.UserInfo;\nimport org.vraptor.mydvds.model.User;\n\nimport br.com.caelum.vraptor.Get;\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.Post;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.validator.Hibernate;\nimport br.com.caelum.vraptor.validator.Validations;\nimport br.com.caelum.vraptor.view.Results;\n\n/**\n * The resource <code>UserController<\/code> handles all user operations,\n * such as adding new users, listing all users, and so on.\n */\n@Resource\npublic class UserController {\n\n\tprivate final DaoFactory factory;\n    private final Validator validator;\n    private final Result result;\n    private final UserInfo userInfo;\n\n\t/**\n\t * Receives dependencies through the constructor.\n\t *\n\t * @param result VRaptor result handler.\n     * @param validator VRaptor validator.\n     * @param factory dao factory.\n     * @param userInfo info on the logged user.\n\t */\n\tpublic UserController(Result result, Validator validator, DaoFactory factory, UserInfo userInfo) {\n\t\tthis.result = result;\n\t\tthis.validator = validator;\n        this.factory = factory;\n        this.userInfo = userInfo;\n\t}\n\n\t/**\n\t * Accepts HTTP GET requests.\n\t * URL:  /home\n\t * View: /WEB-INF/jsp/user/home.jsp\n\t *\n\t * Shows user's home page containing his Dvd collection.\n\t */\n\t@Path(\"/home\")\n\t@Get\n\tpublic void home() {\n\t    factory.getUserDao().refresh(userInfo.getUser());\n\t}\n\n\t/**\n     * Accepts HTTP GET requests.\n     * URL:  /users (only GET requests for this URL)\n     * View: /WEB-INF/jsp/user/list.jsp\n     *\n     * Lists all users.\n     */\n\t@Path(\"/users\")\n\t@Get\n\tpublic void list() {\n        List<User> users = new ArrayList<User>();\n        // search by hand example\n        List<User> usersFromDatabase = this.factory.getUserDao().listAll();\n        for (User user : usersFromDatabase) {\n            User newUser = new User();\n            newUser.setId(user.getId());\n            newUser.setName(user.getName());\n            users.add(newUser);\n        }\n\n        result.include(\"users\", users);\n        result.use(Results.page()).forward();\n    }\n\n\t/**\n\t * Accepts HTTP POST requests.\n\t * URL:\t /users\n\t * View: /WEB-INF/jsp/user/add.jsp\n\t *\n\t * The \"user\" parameter will be populated with the request parameters, for example:\n\t *\n\t * \t\t/user?user.name=\"Nico\"&user.login=\"555555\"\n\t *\n\t * automatically populates the name and login parameters on the user object with values Nico and 555555.\n\t *\n\t * Adds new users to the database.\n\t */\n\t@Path(\"/users\")\n\t@Post\n\tpublic void add(User user) {\n\t    if (user == null) {\n\t        return;\n\t    }\n\n\t    result.include(\"user\", user);\n\t    validateAdd(user);\n\n\t\tthis.factory.getUserDao().add(user);\n\t\tresult.use(Results.logic()).redirectTo(UserController.class).userAdded(user);\n\t}\n\n\t/**\n\t * Shows the page with information when a user is successfully added.\n\t */\n\t@Get\n\tpublic void userAdded(User user) {\n\t    result.include(\"user\", user);\n\t}\n\n\t/**\n\t * Accepts HTTP GET requests.\n\t * URL:  /users/id (for example, /users/42 shows information on the user with id 42)\n\t * View: /WEB-INF/jsp/user/view.jsp\n\t *\n\t * Shows information on the specified user.\n\t * @param user\n\t */\n\t@Path(\"/users/{user.id}\")\n\t@Get\n\tpublic void view(User user) {\n\t    this.factory.getUserDao().refresh(user);\n\t    result.include(\"user\", user);\n\t}\n\n    /**\n\t * Validation with VRaptor.\n\t * Validates user data.\n\t */\n\tprivate void validateAdd(final User user) {\n\t\tvalidator.checking(new Validations() {{\n\t\t    // checks if there is already an user with the specified login\n\t\t    boolean loginDoesNotExist = !factory.getUserDao().containsUserWithLogin(user.getLogin());\n\n            that(loginDoesNotExist, \"login\", \"login_already_exists\");\n\n\t\t    // calls Hibernate Validator for the user instance\n\t\t    and(Hibernate.validate(user));\n\t\t}});\n\n\t\t// redirects to the index page if any validation errors occur.\n\t\tvalidator.onErrorUse(Results.page()).of(LoginController.class).index();\n\t}\n\n}\n","lineNo":141}
{"Smelly Sample":"package br.com.caelum.vraptor.interceptor.multipart;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.FileItemFactory;\nimport org.apache.commons.fileupload.FileUploadBase;\nimport org.apache.commons.fileupload.FileUploadException;\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.apache.commons.fileupload.servlet.ServletRequestContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.interceptor.Interceptor;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * An interceptor which handles multipart requests.<br>\n * Provided parameters are injected through RequestParameters.set and uploaded\n * files are made available through\n *\n * @author Guilherme Silveira\n */\n@RequestScoped\npublic class MultipartInterceptor implements Interceptor {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(MultipartInterceptor.class);\n\n\tprivate final long sizeLimit;\n\n\tprivate final HttpServletRequest request;\n\n\tprivate final MutableRequest parameters;\n\n\tprivate final MultipartConfig config;\n\n\tpublic MultipartInterceptor(HttpServletRequest request, MutableRequest parameters, MultipartConfig config)\n\t\t\tthrows IOException {\n\t\tthis.request = request;\n\t\tthis.parameters = parameters;\n\t\tthis.sizeLimit = config.getSizeLimit();\n\t\tthis.config = config;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object instance) throws InterceptionException {\n\t\t// TODO ugly, just for now until next release\n\t\tif (!accepts(method)) {\n\t\t\tstack.next(method, instance);\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug(\"Trying to parse multipart request.\");\n\n\t\tFile temporaryDirectory = config.getDirectory();\n\n\t\tFileItemFactory factory = createFactoryForDiskBasedFileItems(temporaryDirectory);\n\n\t\tServletFileUpload fileUploadHandler = new ServletFileUpload(factory);\n\n\t\tfileUploadHandler.setSizeMax(sizeLimit);\n\n\t\tList<FileItem> fileItems;\n\t\ttry {\n\t\t\tfileItems = fileUploadHandler.parseRequest(request);\n\t\t} catch (FileUploadException e) {\n\t\t\tlogger.warn(\"There was some problem parsing this multipart request, \"\n\t\t\t\t\t+ \"or someone is not sending a RFC1867 compatible multipart request.\", e);\n\t\t\tstack.next(method, instance);\n\t\t\treturn;\n\t\t}\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Found [\" + fileItems.size() + \"] attributes in the multipart form submission. Parsing them.\");\n\t\t}\n\n\t\tnew MultipartItemsProcessor(fileItems, request, parameters).process();\n\n\t\tstack.next(method, instance);\n\n\t\t// TODO should we delete the temporary files afterwards or onExit as\n\t\t// done by now? maybe also a config in .properties\n\n\t}\n\n\tprivate static FileItemFactory createFactoryForDiskBasedFileItems(File temporaryDirectory) {\n\t\t// TODO: may create MemoryFileItemFactory, based on a config!\n\t\t// this is mandatory for environments as Google App Engine\n\t\tDiskFileItemFactory factory = new DiskFileItemFactory(4096 * 16, temporaryDirectory);\n\t\tlogger.debug(\"Using repository [\" + factory.getRepository() + \"] for file upload\");\n\t\treturn factory;\n\t}\n\n\t/**\n\t * Will intercept the request if apache file upload says that this request\n\t * is multipart\n\t */\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn FileUploadBase.isMultipartContent(new ServletRequestContext(request));\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.interceptor.multipart;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.FileItemFactory;\nimport org.apache.commons.fileupload.FileUploadBase;\nimport org.apache.commons.fileupload.FileUploadException;\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.apache.commons.fileupload.servlet.ServletRequestContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.interceptor.Interceptor;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * An interceptor which handles multipart requests.<br>\n * Provided parameters are injected through RequestParameters.set and uploaded\n * files are made available through\n *\n * @author Guilherme Silveira\n */\n@RequestScoped\npublic class MultipartInterceptor implements Interceptor {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(MultipartInterceptor.class);\n\n\tprivate final long sizeLimit;\n\n\tprivate final HttpServletRequest request;\n\n\tprivate final MutableRequest parameters;\n\n\tprivate final MultipartConfig config;\n\n\tpublic MultipartInterceptor(HttpServletRequest request, MutableRequest parameters, MultipartConfig config)\n\t\t\tthrows IOException {\n\t\tthis.request = request;\n\t\tthis.parameters = parameters;\n\t\tthis.sizeLimit = config.getSizeLimit();\n\t\tthis.config = config;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object instance) throws InterceptionException {\n\t\t// TODO ugly, just for now until next release\n\t\tif (!accepts(method)) {\n\t\t\tstack.next(method, instance);\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug(\"Trying to parse multipart request.\");\n\n\t\tFile temporaryDirectory = config.getDirectory();\n\n\t\tFileItemFactory factory = createFactoryForDiskBasedFileItems(temporaryDirectory);\n\n\t\tServletFileUpload fileUploadHandler = new ServletFileUpload(factory);\n\n\t\tfileUploadHandler.setSizeMax(sizeLimit);\n\n\t\tList<FileItem> fileItems;\n\t\ttry {\n\t\t\tfileItems = fileUploadHandler.parseRequest(request);\n\t\t} catch (FileUploadException e) {\n\t\t\tlogger.warn(\"There was some problem parsing this multipart request, \"\n\t\t\t\t\t+ \"or someone is not sending a RFC1867 compatible multipart request.\", e);\n\t\t\tstack.next(method, instance);\n\t\t\treturn;\n\t\t}\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Found [\" + fileItems.size() + \"] attributes in the multipart form submission. Parsing them.\");\n\t\t}\n\n\t\tnew MultipartItemsProcessor(fileItems, request, parameters).process();\n\n\t\tstack.next(method, instance);\n\n\t\t// TODO should we delete the temporary files afterwards or onExit as\n\t\t// done by now? maybe also a config in .properties\n\n\t}\n\n\tprivate static FileItemFactory createFactoryForDiskBasedFileItems(File temporaryDirectory) {\n\t\t// TODO: may use all memory (Integer.MAX_VALUE), based on a config!\n\t\t// this is mandatory for environments as Google App Engine\n\t\tint thresholdForUsingDiskInsteadOfMemory = 1024 * 10;\n\t\tDiskFileItemFactory factory = new DiskFileItemFactory(thresholdForUsingDiskInsteadOfMemory, temporaryDirectory);\n\t\tlogger.debug(\"Using repository [\" + factory.getRepository() + \"] for file upload\");\n\t\treturn factory;\n\t}\n\n\t/**\n\t * Will intercept the request if apache file upload says that this request\n\t * is multipart\n\t */\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn FileUploadBase.isMultipartContent(new ServletRequestContext(request));\n\t}\n\n}\n","lineNo":98}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceClass;\n\n/**\n * The default parser routes creator uses the path annotation to create rules.\n * Note that methods are only registered to be public accessible if the type is\n * annotated with @Resource.\n *\n * @author guilherme silveira\n */\n@ApplicationScoped\npublic class PathAnnotationRoutesParser implements RoutesParser {\n\n    private final Proxifier proxifier;\n\tprivate final TypeFinder finder;\n\n    public PathAnnotationRoutesParser(Proxifier proxifier, TypeFinder finder) {\n        this.proxifier = proxifier;\n\t\tthis.finder = finder;\n    }\n\n    public List<Route> rulesFor(ResourceClass resource) {\n        List<Route> routes = new ArrayList<Route>();\n        Class<?> baseType = resource.getType();\n        registerRulesFor(baseType, baseType, routes);\n        return routes;\n    }\n\n    private void registerRulesFor(Class<?> actualType, Class<?> baseType, List<Route> routes) {\n        if (actualType.equals(Object.class)) {\n            return;\n        }\n        for (Method javaMethod : actualType.getDeclaredMethods()) {\n            if (isEligible(javaMethod)) {\n                String uri = getUriFor(javaMethod, baseType);\n                RouteBuilder rule = new RouteBuilder(proxifier, finder, uri);\n                for (HttpMethod m : HttpMethod.values()) {\n                    if (javaMethod.isAnnotationPresent(m.getAnnotation())) {\n                        rule.with(m);\n                    }\n                }\n                if (javaMethod.isAnnotationPresent(Path.class)) {\n                \trule.withPriority(javaMethod.getAnnotation(Path.class).priority());\n                }\n                rule.is(baseType, javaMethod);\n                routes.add(rule.build());\n            }\n        }\n        registerRulesFor(actualType.getSuperclass(), baseType, routes);\n    }\n\n    private boolean isEligible(Method javaMethod) {\n        return Modifier.isPublic(javaMethod.getModifiers()) && !Modifier.isStatic(javaMethod.getModifiers());\n    }\n\n    private String getUriFor(Method javaMethod, Class<?> type) {\n        if (javaMethod.isAnnotationPresent(Path.class)) {\n            return javaMethod.getAnnotation(Path.class).value();\n        }\n        return extractControllerFromName(type.getSimpleName()) + \"/\" + javaMethod.getName();\n    }\n\n    private String extractControllerFromName(String baseName) {\n        baseName = lowerFirstCharacter(baseName);\n        if (baseName.endsWith(\"Controller\")) {\n            return \"/\" + baseName.substring(0, baseName.lastIndexOf(\"Controller\"));\n        }\n        return \"/\" + baseName;\n    }\n\n    private String lowerFirstCharacter(String baseName) {\n        return baseName.toLowerCase().substring(0, 1) + baseName.substring(1, baseName.length());\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceClass;\n\n/**\n * The default parser routes creator uses the path annotation to create rules.\n * Note that methods are only registered to be public accessible if the type is\n * annotated with @Resource.\n *\n * @author guilherme silveira\n */\n@ApplicationScoped\npublic class PathAnnotationRoutesParser implements RoutesParser {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(PathAnnotationRoutesParser.class);\n\n    private final Proxifier proxifier;\n\tprivate final TypeFinder finder;\n\n    public PathAnnotationRoutesParser(Proxifier proxifier, TypeFinder finder) {\n        this.proxifier = proxifier;\n\t\tthis.finder = finder;\n    }\n\n    public List<Route> rulesFor(ResourceClass resource) {\n        List<Route> routes = new ArrayList<Route>();\n        Class<?> baseType = resource.getType();\n        registerRulesFor(baseType, baseType, routes);\n        return routes;\n    }\n\n    private void registerRulesFor(Class<?> actualType, Class<?> baseType, List<Route> routes) {\n        if (actualType.equals(Object.class)) {\n            return;\n        }\n        for (Method javaMethod : actualType.getDeclaredMethods()) {\n            if (isEligible(javaMethod)) {\n                String uri = getUriFor(javaMethod, baseType);\n                RouteBuilder rule = new RouteBuilder(proxifier, finder, uri);\n                for (HttpMethod m : HttpMethod.values()) {\n                    if (javaMethod.isAnnotationPresent(m.getAnnotation())) {\n                        rule.with(m);\n                    }\n                }\n                if (javaMethod.isAnnotationPresent(Path.class)) {\n                \trule.withPriority(javaMethod.getAnnotation(Path.class).priority());\n                }\n                rule.is(baseType, javaMethod);\n                routes.add(rule.build());\n            }\n        }\n        registerRulesFor(actualType.getSuperclass(), baseType, routes);\n    }\n\n    private boolean isEligible(Method javaMethod) {\n        return Modifier.isPublic(javaMethod.getModifiers()) && !Modifier.isStatic(javaMethod.getModifiers());\n    }\n\n    private String getUriFor(Method javaMethod, Class<?> type) {\n        if (javaMethod.isAnnotationPresent(Path.class)) {\n            String uri = javaMethod.getAnnotation(Path.class).value();\n            if (!uri.startsWith(\"/\")) {\n            \tlogger.warn(\"All uris from @Path must start with a '/'. Please change it on \" + javaMethod);\n            \turi = \"/\" + uri;\n            }\n\t\t\treturn uri;\n        }\n        return extractControllerFromName(type.getSimpleName()) + \"/\" + javaMethod.getName();\n    }\n\n    private String extractControllerFromName(String baseName) {\n        baseName = lowerFirstCharacter(baseName);\n        if (baseName.endsWith(\"Controller\")) {\n            return \"/\" + baseName.substring(0, baseName.lastIndexOf(\"Controller\"));\n        }\n        return \"/\" + baseName;\n    }\n\n    private String lowerFirstCharacter(String baseName) {\n        return baseName.toLowerCase().substring(0, 1) + baseName.substring(1, baseName.length());\n    }\n\n}\n","lineNo":100}
{"Smelly Sample":"package br.com.caelum.vraptor.interceptor.multipart;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.FileItemFactory;\nimport org.apache.commons.fileupload.FileUploadBase;\nimport org.apache.commons.fileupload.FileUploadException;\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.apache.commons.fileupload.servlet.ServletRequestContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.interceptor.Interceptor;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * An interceptor which handles multipart requests.<br>\n * Provided parameters are injected through RequestParameters.set and uploaded\n * files are made available through\n *\n * @author Guilherme Silveira\n */\n@RequestScoped\npublic class MultipartInterceptor implements Interceptor {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(MultipartInterceptor.class);\n\n\tprivate final long sizeLimit;\n\n\tprivate final HttpServletRequest request;\n\n\tprivate final MutableRequest parameters;\n\n\tprivate final MultipartConfig config;\n\n\tpublic MultipartInterceptor(HttpServletRequest request, MutableRequest parameters, MultipartConfig config)\n\t\t\tthrows IOException {\n\t\tthis.request = request;\n\t\tthis.parameters = parameters;\n\t\tthis.sizeLimit = config.getSizeLimit();\n\t\tthis.config = config;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object instance) throws InterceptionException {\n\t\t// TODO ugly, just for now until next release\n\t\tif (!accepts(method)) {\n\t\t\tstack.next(method, instance);\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug(\"Trying to parse multipart request.\");\n\n\t\tFile temporaryDirectory = config.getDirectory();\n\n\t\tFileItemFactory factory = createFactoryForDiskBasedFileItems(temporaryDirectory);\n\n\t\tServletFileUpload fileUploadHandler = new ServletFileUpload(factory);\n\n\t\tfileUploadHandler.setSizeMax(sizeLimit);\n\n\t\tList<FileItem> fileItems;\n\t\ttry {\n\t\t\tfileItems = fileUploadHandler.parseRequest(request);\n\t\t} catch (FileUploadException e) {\n\t\t\tlogger.warn(\"There was some problem parsing this multipart request, \"\n\t\t\t\t\t+ \"or someone is not sending a RFC1867 compatible multipart request.\", e);\n\t\t\tstack.next(method, instance);\n\t\t\treturn;\n\t\t}\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Found [\" + fileItems.size() + \"] attributes in the multipart form submission. Parsing them.\");\n\t\t}\n\n\t\tnew MultipartItemsProcessor(fileItems, request, parameters).process();\n\n\t\tstack.next(method, instance);\n\n\t\t// TODO should we delete the temporary files afterwards or onExit as\n\t\t// done by now? maybe also a config in .properties\n\n\t}\n\n\tprivate static FileItemFactory createFactoryForDiskBasedFileItems(File temporaryDirectory) {\n\t\t// TODO: may create MemoryFileItemFactory, based on a config!\n\t\t// this is mandatory for environments as Google App Engine\n\t\tDiskFileItemFactory factory = new DiskFileItemFactory(4096 * 16, temporaryDirectory);\n\t\tlogger.debug(\"Using repository [\" + factory.getRepository() + \"] for file upload\");\n\t\treturn factory;\n\t}\n\n\t/**\n\t * Will intercept the request if apache file upload says that this request\n\t * is multipart\n\t */\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn FileUploadBase.isMultipartContent(new ServletRequestContext(request));\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.interceptor.multipart;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.FileItemFactory;\nimport org.apache.commons.fileupload.FileUploadBase;\nimport org.apache.commons.fileupload.FileUploadException;\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.apache.commons.fileupload.servlet.ServletRequestContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.interceptor.Interceptor;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * An interceptor which handles multipart requests.<br>\n * Provided parameters are injected through RequestParameters.set and uploaded\n * files are made available through\n *\n * @author Guilherme Silveira\n */\n@RequestScoped\npublic class MultipartInterceptor implements Interceptor {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(MultipartInterceptor.class);\n\n\tprivate final long sizeLimit;\n\n\tprivate final HttpServletRequest request;\n\n\tprivate final MutableRequest parameters;\n\n\tprivate final MultipartConfig config;\n\n\tpublic MultipartInterceptor(HttpServletRequest request, MutableRequest parameters, MultipartConfig config)\n\t\t\tthrows IOException {\n\t\tthis.request = request;\n\t\tthis.parameters = parameters;\n\t\tthis.sizeLimit = config.getSizeLimit();\n\t\tthis.config = config;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object instance) throws InterceptionException {\n\t\t// TODO ugly, just for now until next release\n\t\tif (!accepts(method)) {\n\t\t\tstack.next(method, instance);\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.debug(\"Trying to parse multipart request.\");\n\n\t\tFile temporaryDirectory = config.getDirectory();\n\n\t\tFileItemFactory factory = createFactoryForDiskBasedFileItems(temporaryDirectory);\n\n\t\tServletFileUpload fileUploadHandler = new ServletFileUpload(factory);\n\n\t\tfileUploadHandler.setSizeMax(sizeLimit);\n\n\t\tList<FileItem> fileItems;\n\t\ttry {\n\t\t\tfileItems = fileUploadHandler.parseRequest(request);\n\t\t} catch (FileUploadException e) {\n\t\t\tlogger.warn(\"There was some problem parsing this multipart request, \"\n\t\t\t\t\t+ \"or someone is not sending a RFC1867 compatible multipart request.\", e);\n\t\t\tstack.next(method, instance);\n\t\t\treturn;\n\t\t}\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Found [\" + fileItems.size() + \"] attributes in the multipart form submission. Parsing them.\");\n\t\t}\n\n\t\tnew MultipartItemsProcessor(fileItems, request, parameters).process();\n\n\t\tstack.next(method, instance);\n\n\t\t// TODO should we delete the temporary files afterwards or onExit as\n\t\t// done by now? maybe also a config in .properties\n\n\t}\n\n\tprivate static FileItemFactory createFactoryForDiskBasedFileItems(File temporaryDirectory) {\n\t\t// TODO: may use all memory (Integer.MAX_VALUE), based on a config!\n\t\t// this is mandatory for environments as Google App Engine\n\t\tint thresholdForUsingDiskInsteadOfMemory = 1024 * 10;\n\t\tDiskFileItemFactory factory = new DiskFileItemFactory(thresholdForUsingDiskInsteadOfMemory, temporaryDirectory);\n\t\tlogger.debug(\"Using repository [\" + factory.getRepository() + \"] for file upload\");\n\t\treturn factory;\n\t}\n\n\t/**\n\t * Will intercept the request if apache file upload says that this request\n\t * is multipart\n\t */\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn FileUploadBase.isMultipartContent(new ServletRequestContext(request));\n\t}\n\n}\n","lineNo":98}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc;\n\nimport static br.com.caelum.vraptor.VRaptorMatchers.canHandle;\nimport static br.com.caelum.vraptor.VRaptorMatchers.hasOneCopyOf;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.hasItem;\nimport static org.hamcrest.Matchers.instanceOf;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.not;\nimport static org.hamcrest.Matchers.notNullValue;\nimport static org.hamcrest.Matchers.sameInstance;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.hamcrest.MatcherAssert;\nimport org.jmock.Mockery;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.extra.ForwardToDefaultViewInterceptor;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval;\nimport br.com.caelum.vraptor.http.route.NoRoutesConfiguration;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartInterceptor;\nimport br.com.caelum.vraptor.ioc.fixture.ComponentFactoryInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.ConverterInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.CustomComponentInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.CustomComponentWithLifecycleInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.InterceptorInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.ResourceInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.ComponentFactoryInTheClasspath.Provided;\nimport br.com.caelum.vraptor.reflection.CacheBasedTypeCreator;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceNotFoundHandler;\nimport br.com.caelum.vraptor.view.LogicResult;\nimport br.com.caelum.vraptor.view.PageResult;\nimport br.com.caelum.vraptor.view.PathResolver;\n\n/**\n * Acceptance test that checks if the container is capable of giving all\n * required components.\n *\n * @author Guilherme Silveira\n */\n@Ignore\npublic abstract class GenericContainerTest {\n\n    protected Mockery mockery;\n\n    protected ContainerProvider provider;\n\n    protected ServletContext context;\n\n    protected abstract ContainerProvider getProvider();\n\n    protected abstract <T> T executeInsideRequest(WhatToDo<T> execution);\n\n    protected abstract void configureExpectations();\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void canProvideAllApplicationScopedComponents() {\n        List<Class<?>> components = Arrays.asList(ServletContext.class, UrlToResourceTranslator.class,\n                Router.class, TypeCreator.class, InterceptorRegistry.class, ParameterNameProvider.class,\n                Converters.class, EmptyElementsRemoval.class, NoRoutesConfiguration.class,\n                ResourceNotFoundHandler.class);\n        checkAvailabilityFor(true, components);\n        checkAvailabilityFor(true, BaseComponents.getApplicationScoped().keySet());\n        mockery.assertIsSatisfied();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void canProvideAllRequestScopedComponents() {\n        List<Class<?>> components = Arrays.asList(HttpServletRequest.class, HttpServletResponse.class,\n                RequestInfo.class, HttpSession.class, ParametersInstantiatorInterceptor.class,\n                InterceptorListPriorToExecutionExtractor.class, URLParameterExtractorInterceptor.class,\n                InterceptorStack.class, RequestExecution.class, ResourceLookupInterceptor.class,\n                InstantiateInterceptor.class, Result.class, ExecuteMethodInterceptor.class,\n                PageResult.class, ParametersProvider.class, MethodInfo.class, Validator.class,\n                PathResolver.class, ForwardToDefaultViewInterceptor.class, LogicResult.class,\n                MultipartInterceptor.class, DownloadInterceptor.class);\n        checkAvailabilityFor(false, components);\n        checkAvailabilityFor(false, BaseComponents.getRequestScoped().keySet());\n        mockery.assertIsSatisfied();\n    }\n\n    @ApplicationScoped\n    public static class MyAppComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyAppBasedComponents() {\n    \tcheckAvailabilityFor(true, MyAppComponent.class, MyAppComponent.class);\n    \tmockery.assertIsSatisfied();\n    }\n\n\n    @Test\n\tpublic void shouldProvideCachedComponents() throws Exception {\n    \tTypeCreator creator = getFromContainer(TypeCreator.class);\n    \tassertThat(creator, is(instanceOf(CacheBasedTypeCreator.class)));\n\t}\n\n    @ApplicationScoped\n    public static class MyAppComponentWithLifecycle {\n    \tpublic int calls = 0;\n\n    \t@PreDestroy\n    \tpublic void z() {\n    \t\tcalls++;\n    \t}\n    }\n\n    @Test\n\tpublic void callsPredestroyExactlyOneTime() throws Exception {\n\t\tMyAppComponentWithLifecycle component = registerAndGetFromContainer(MyAppComponentWithLifecycle.class, MyAppComponentWithLifecycle.class);\n\t\tassertThat(0, is(equalTo(component.calls)));\n\t\tprovider.stop();\n\t\tassertThat(1, is(equalTo(component.calls)));\n\t\tprovider = getProvider();\n\t\tprovider.start(context); //In order to tearDown ok\n\t}\n\n    @Component\n    public static class MyRequestComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyRequestBasedComponents() {\n        checkAvailabilityFor(false, MyRequestComponent.class, MyRequestComponent.class);\n        mockery.assertIsSatisfied();\n    }\n\n    @Component\n    public static class DependentOnSomethingFromComponentFactory {\n        private final NeedsCustomInstantiation dependency;\n\n        public DependentOnSomethingFromComponentFactory(NeedsCustomInstantiation dependency) {\n            this.dependency = dependency;\n        }\n    }\n\n\n    @Test\n    public void supportsComponentFactoriesForCustomInstantiation() {\n        // TODO the registered component is only available in the next request with Pico. FIX IT!\n        registerAndGetFromContainer(Container.class, TheComponentFactory.class);\n\n        TheComponentFactory factory = registerAndGetFromContainer(TheComponentFactory.class, null);\n        assertThat(factory, is(notNullValue()));\n\n        NeedsCustomInstantiation component = registerAndGetFromContainer(NeedsCustomInstantiation.class, null);\n        assertThat(component, is(notNullValue()));\n\n        registerAndGetFromContainer(DependentOnSomethingFromComponentFactory.class, DependentOnSomethingFromComponentFactory.class);\n\n        DependentOnSomethingFromComponentFactory dependent = registerAndGetFromContainer(DependentOnSomethingFromComponentFactory.class, null);\n        assertThat(dependent, is(notNullValue()));\n        assertThat(dependent.dependency, is(notNullValue()));\n    }\n\n    @Before\n    public void setup() throws Exception {\n        this.mockery = new Mockery();\n        this.context = mockery.mock(ServletContext.class, \"servlet context\");\n        configureExpectations();\n        provider = getProvider();\n        provider.start(context);\n    }\n\n    @After\n    public void tearDown() {\n        provider.stop();\n        provider = null;\n    }\n\n    private <T> void checkAvailabilityFor(final boolean shouldBeTheSame, final Class<T> component,\n                                          final Class<? super T> componentToRegister) {\n\n        T firstInstance = registerAndGetFromContainer(component, componentToRegister);\n        T secondInstance = executeInsideRequest(new WhatToDo<T>() {\n            public T execute(RequestInfo request, final int counter) {\n                return provider.provideForRequest(request, new Execution<T>() {\n                    public T insideRequest(Container secondContainer) {\n                        if (componentToRegister != null && !isAppScoped(secondContainer, componentToRegister)) {\n                            ComponentRegistry registry = secondContainer.instanceFor(ComponentRegistry.class);\n                            registry.register(componentToRegister, componentToRegister);\n                        }\n\n                        ResourceMethod secondMethod = mockery.mock(ResourceMethod.class, \"rm\" + counter);\n                        secondContainer.instanceFor(MethodInfo.class).setResourceMethod(secondMethod);\n                        return secondContainer.instanceFor(component);\n                    }\n                });\n\n            }\n        });\n\n        checkSimilarity(component, shouldBeTheSame, firstInstance, secondInstance);\n    }\n\n    protected <T> T registerAndGetFromContainer(final Class<T> componentToBeRetrieved, final Class<?> componentToRegister) {\n        return executeInsideRequest(new WhatToDo<T>() {\n            public T execute(RequestInfo request, final int counter) {\n\n                return provider.provideForRequest(request, new Execution<T>() {\n                    public T insideRequest(Container firstContainer) {\n                        if (componentToRegister != null) {\n                            ComponentRegistry registry = firstContainer.instanceFor(ComponentRegistry.class);\n                            registry.register(componentToRegister, componentToRegister);\n                        }\n                        ResourceMethod firstMethod = mockery.mock(ResourceMethod.class, \"rm\" + counter);\n                        firstContainer.instanceFor(MethodInfo.class).setResourceMethod(firstMethod);\n                        return firstContainer.instanceFor(componentToBeRetrieved);\n                    }\n                });\n\n            }\n        });\n    }\n\n    public <T> T getFromContainer(final Class<T> componentToBeRetrieved) {\n    \treturn executeInsideRequest(new WhatToDo<T>() {\n            public T execute(RequestInfo request, final int counter) {\n                return provider.provideForRequest(request, new Execution<T>() {\n                    public T insideRequest(Container firstContainer) {\n                        return firstContainer.instanceFor(componentToBeRetrieved);\n                    }\n                });\n            }\n        });\n    }\n\n    private boolean isAppScoped(Container secondContainer, Class<?> componentToRegister) {\n        return secondContainer.instanceFor(componentToRegister) != null;\n    }\n\n    private void checkSimilarity(Class<?> component, boolean shouldBeTheSame, Object firstInstance,\n                                 Object secondInstance) {\n        if (shouldBeTheSame) {\n            MatcherAssert.assertThat(\"Should be the same instance for \" + component.getName(), firstInstance,\n                    is(equalTo(secondInstance)));\n        } else {\n            MatcherAssert.assertThat(\"Should not be the same instance for \" + component.getName(), firstInstance,\n                    is(not(equalTo(secondInstance))));\n        }\n    }\n\n    protected void checkAvailabilityFor(boolean shouldBeTheSame, Collection<Class<?>> components) {\n        for (Class<?> component : components) {\n            checkAvailabilityFor(shouldBeTheSame, component, null);\n        }\n    }\n\n    @Component\n    static public class DisposableComponent {\n        private boolean destroyed;\n\n        @PreDestroy\n        public void preDestroy() {\n            this.destroyed = true;\n        }\n    }\n\n    @Component\n    static public class StartableComponent {\n        private boolean started;\n\n        @PostConstruct\n        public void postConstruct() {\n            this.started = true;\n        }\n    }\n\n    @Test\n    public void shouldDisposeAfterRequest() {\n        registerAndGetFromContainer(Container.class, DisposableComponent.class);\n        DisposableComponent comp = registerAndGetFromContainer(DisposableComponent.class, null);\n        assertTrue(comp.destroyed);\n    }\n\n    @Test\n    public void shouldStartBeforeRequestExecution() {\n        registerAndGetFromContainer(Container.class, StartableComponent.class);\n        StartableComponent comp = registerAndGetFromContainer(StartableComponent.class, null);\n        assertTrue(comp.started);\n    }\n\n    @Test\n\tpublic void canProvideComponentsInTheClasspath() throws Exception {\n    \tcheckAvailabilityFor(false, Collections.<Class<?>>singleton(CustomComponentInTheClasspath.class));\n\t}\n\n    @Test\n    public void shoudRegisterResourcesInRouter() {\n    \tRouter router = getFromContainer(Router.class);\n    \tassertThat(router.allRoutes(), hasItem(canHandle(ResourceInTheClasspath.class, ResourceInTheClasspath.class.getDeclaredMethods()[0])));\n    }\n\n    @Test\n    @Ignore(\"Nao passa com o spring. Tem q verificar, mas nao aparenta ser um blocker\")\n    public void shoudUseComponentFactoriesInTheClasspath() {\n    \tProvided object = getFromContainer(Provided.class);\n    \tassertThat(object, is(sameInstance(ComponentFactoryInTheClasspath.PROVIDED)));\n    }\n\n    @Test\n    public void shoudRegisterInterceptorsInInterceptorRegistry() {\n    \tInterceptorRegistry registry = getFromContainer(InterceptorRegistry.class);\n    \tassertThat(registry.all(), hasOneCopyOf(InterceptorInTheClasspath.class));\n    }\n\n    @Test\n    public void shoudCallPredestroyExactlyOneTimeForComponentsScannedFromTheClasspath() {\n    \tCustomComponentWithLifecycleInTheClasspath component = getFromContainer(CustomComponentWithLifecycleInTheClasspath.class);\n    \tassertThat(component.callsToPreDestroy, is(equalTo(0)));\n    \tprovider.stop();\n    \tassertThat(component.callsToPreDestroy, is(equalTo(1)));\n\n    \tresetProvider();\n    }\n\n    @Test\n    public void shoudCallPredestroyExactlyOneTimeForComponentFactoriesScannedFromTheClasspath() {\n    \tComponentFactoryInTheClasspath componentFactory = getFromContainer(ComponentFactoryInTheClasspath.class);\n    \tassertThat(componentFactory.callsToPreDestroy, is(equalTo(0)));\n    \tprovider.stop();\n    \tassertThat(componentFactory.callsToPreDestroy, is(equalTo(1)));\n\n    \tresetProvider();\n    }\n\n\t@Test\n\tpublic void shoudRegisterConvertersInConverters() {\n\t\texecuteInsideRequest(new WhatToDo<Converters>() {\n\t\t\tpublic Converters execute(RequestInfo request, final int counter) {\n\t\t\t\treturn provider.provideForRequest(request, new Execution<Converters>() {\n\t\t\t\t\tpublic Converters insideRequest(Container container) {\n\t\t\t\t\t\tConverters converters = container.instanceFor(Converters.class);\n\t\t\t\t\t\tConverter<?> converter = converters.to(Void.class, container);\n\t\t\t\t\t\tassertThat(converter, is(instanceOf(ConverterInTheClasspath.class)));\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected void resetProvider() {\n\t\tprovider = getProvider();\n\t\tprovider.start(context);\n\t}\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc;\n\nimport static br.com.caelum.vraptor.VRaptorMatchers.canHandle;\nimport static br.com.caelum.vraptor.VRaptorMatchers.hasOneCopyOf;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.hasItem;\nimport static org.hamcrest.Matchers.instanceOf;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.not;\nimport static org.hamcrest.Matchers.notNullValue;\nimport static org.hamcrest.Matchers.sameInstance;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.hamcrest.Matcher;\nimport org.hamcrest.MatcherAssert;\nimport org.jmock.Mockery;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.extra.ForwardToDefaultViewInterceptor;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval;\nimport br.com.caelum.vraptor.http.route.NoRoutesConfiguration;\nimport br.com.caelum.vraptor.http.route.Route;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartInterceptor;\nimport br.com.caelum.vraptor.ioc.fixture.ComponentFactoryInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.ConverterInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.CustomComponentInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.CustomComponentWithLifecycleInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.InterceptorInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.ResourceInTheClasspath;\nimport br.com.caelum.vraptor.ioc.fixture.ComponentFactoryInTheClasspath.Provided;\nimport br.com.caelum.vraptor.reflection.CacheBasedTypeCreator;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceNotFoundHandler;\nimport br.com.caelum.vraptor.view.LogicResult;\nimport br.com.caelum.vraptor.view.PageResult;\nimport br.com.caelum.vraptor.view.PathResolver;\n\n/**\n * Acceptance test that checks if the container is capable of giving all\n * required components.\n *\n * @author Guilherme Silveira\n */\n@Ignore\npublic abstract class GenericContainerTest {\n\n    protected Mockery mockery;\n\n    protected ContainerProvider provider;\n\n    protected ServletContext context;\n\n    protected abstract ContainerProvider getProvider();\n\n    protected abstract <T> T executeInsideRequest(WhatToDo<T> execution);\n\n    protected abstract void configureExpectations();\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void canProvideAllApplicationScopedComponents() {\n        List<Class<?>> components = Arrays.asList(ServletContext.class, UrlToResourceTranslator.class,\n                Router.class, TypeCreator.class, InterceptorRegistry.class, ParameterNameProvider.class,\n                Converters.class, EmptyElementsRemoval.class, NoRoutesConfiguration.class,\n                ResourceNotFoundHandler.class);\n        checkAvailabilityFor(true, components);\n        checkAvailabilityFor(true, BaseComponents.getApplicationScoped().keySet());\n        mockery.assertIsSatisfied();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void canProvideAllRequestScopedComponents() {\n        List<Class<?>> components = Arrays.asList(HttpServletRequest.class, HttpServletResponse.class,\n                RequestInfo.class, HttpSession.class, ParametersInstantiatorInterceptor.class,\n                InterceptorListPriorToExecutionExtractor.class, URLParameterExtractorInterceptor.class,\n                InterceptorStack.class, RequestExecution.class, ResourceLookupInterceptor.class,\n                InstantiateInterceptor.class, Result.class, ExecuteMethodInterceptor.class,\n                PageResult.class, ParametersProvider.class, MethodInfo.class, Validator.class,\n                PathResolver.class, ForwardToDefaultViewInterceptor.class, LogicResult.class,\n                MultipartInterceptor.class, DownloadInterceptor.class);\n        checkAvailabilityFor(false, components);\n        checkAvailabilityFor(false, BaseComponents.getRequestScoped().keySet());\n        mockery.assertIsSatisfied();\n    }\n\n    @ApplicationScoped\n    public static class MyAppComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyAppBasedComponents() {\n    \tcheckAvailabilityFor(true, MyAppComponent.class, MyAppComponent.class);\n    \tmockery.assertIsSatisfied();\n    }\n\n\n    @Test\n\tpublic void shouldProvideCachedComponents() throws Exception {\n    \tTypeCreator creator = getFromContainer(TypeCreator.class);\n    \tassertThat(creator, is(instanceOf(CacheBasedTypeCreator.class)));\n\t}\n\n    @ApplicationScoped\n    public static class MyAppComponentWithLifecycle {\n    \tpublic int calls = 0;\n\n    \t@PreDestroy\n    \tpublic void z() {\n    \t\tcalls++;\n    \t}\n    }\n\n    @Test\n\tpublic void callsPredestroyExactlyOneTime() throws Exception {\n\t\tMyAppComponentWithLifecycle component = registerAndGetFromContainer(MyAppComponentWithLifecycle.class, MyAppComponentWithLifecycle.class);\n\t\tassertThat(0, is(equalTo(component.calls)));\n\t\tprovider.stop();\n\t\tassertThat(1, is(equalTo(component.calls)));\n\t\tprovider = getProvider();\n\t\tprovider.start(context); //In order to tearDown ok\n\t}\n\n    @Component\n    public static class MyRequestComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyRequestBasedComponents() {\n        checkAvailabilityFor(false, MyRequestComponent.class, MyRequestComponent.class);\n        mockery.assertIsSatisfied();\n    }\n\n    @Component\n    public static class DependentOnSomethingFromComponentFactory {\n        private final NeedsCustomInstantiation dependency;\n\n        public DependentOnSomethingFromComponentFactory(NeedsCustomInstantiation dependency) {\n            this.dependency = dependency;\n        }\n    }\n\n\n    @Test\n    public void supportsComponentFactoriesForCustomInstantiation() {\n        // TODO the registered component is only available in the next request with Pico. FIX IT!\n        registerAndGetFromContainer(Container.class, TheComponentFactory.class);\n\n        TheComponentFactory factory = registerAndGetFromContainer(TheComponentFactory.class, null);\n        assertThat(factory, is(notNullValue()));\n\n        NeedsCustomInstantiation component = registerAndGetFromContainer(NeedsCustomInstantiation.class, null);\n        assertThat(component, is(notNullValue()));\n\n        registerAndGetFromContainer(DependentOnSomethingFromComponentFactory.class, DependentOnSomethingFromComponentFactory.class);\n\n        DependentOnSomethingFromComponentFactory dependent = registerAndGetFromContainer(DependentOnSomethingFromComponentFactory.class, null);\n        assertThat(dependent, is(notNullValue()));\n        assertThat(dependent.dependency, is(notNullValue()));\n    }\n\n    @Before\n    public void setup() throws Exception {\n        this.mockery = new Mockery();\n        this.context = mockery.mock(ServletContext.class, \"servlet context\");\n        configureExpectations();\n        provider = getProvider();\n        provider.start(context);\n    }\n\n    @After\n    public void tearDown() {\n        provider.stop();\n        provider = null;\n    }\n\n    private <T> void checkAvailabilityFor(final boolean shouldBeTheSame, final Class<T> component,\n                                          final Class<? super T> componentToRegister) {\n\n        T firstInstance = registerAndGetFromContainer(component, componentToRegister);\n        T secondInstance = executeInsideRequest(new WhatToDo<T>() {\n            public T execute(RequestInfo request, final int counter) {\n                return provider.provideForRequest(request, new Execution<T>() {\n                    public T insideRequest(Container secondContainer) {\n                        if (componentToRegister != null && !isAppScoped(secondContainer, componentToRegister)) {\n                            ComponentRegistry registry = secondContainer.instanceFor(ComponentRegistry.class);\n                            registry.register(componentToRegister, componentToRegister);\n                        }\n\n                        ResourceMethod secondMethod = mockery.mock(ResourceMethod.class, \"rm\" + counter);\n                        secondContainer.instanceFor(MethodInfo.class).setResourceMethod(secondMethod);\n                        return secondContainer.instanceFor(component);\n                    }\n                });\n\n            }\n        });\n\n        checkSimilarity(component, shouldBeTheSame, firstInstance, secondInstance);\n    }\n\n    protected <T> T registerAndGetFromContainer(final Class<T> componentToBeRetrieved, final Class<?> componentToRegister) {\n        return executeInsideRequest(new WhatToDo<T>() {\n            public T execute(RequestInfo request, final int counter) {\n\n                return provider.provideForRequest(request, new Execution<T>() {\n                    public T insideRequest(Container firstContainer) {\n                        if (componentToRegister != null) {\n                            ComponentRegistry registry = firstContainer.instanceFor(ComponentRegistry.class);\n                            registry.register(componentToRegister, componentToRegister);\n                        }\n                        ResourceMethod firstMethod = mockery.mock(ResourceMethod.class, \"rm\" + counter);\n                        firstContainer.instanceFor(MethodInfo.class).setResourceMethod(firstMethod);\n                        return firstContainer.instanceFor(componentToBeRetrieved);\n                    }\n                });\n\n            }\n        });\n    }\n\n    public <T> T getFromContainer(final Class<T> componentToBeRetrieved) {\n    \treturn executeInsideRequest(new WhatToDo<T>() {\n            public T execute(RequestInfo request, final int counter) {\n                return provider.provideForRequest(request, new Execution<T>() {\n                    public T insideRequest(Container firstContainer) {\n                        return firstContainer.instanceFor(componentToBeRetrieved);\n                    }\n                });\n            }\n        });\n    }\n\n    private boolean isAppScoped(Container secondContainer, Class<?> componentToRegister) {\n        return secondContainer.instanceFor(componentToRegister) != null;\n    }\n\n    private void checkSimilarity(Class<?> component, boolean shouldBeTheSame, Object firstInstance,\n                                 Object secondInstance) {\n        if (shouldBeTheSame) {\n            MatcherAssert.assertThat(\"Should be the same instance for \" + component.getName(), firstInstance,\n                    is(equalTo(secondInstance)));\n        } else {\n            MatcherAssert.assertThat(\"Should not be the same instance for \" + component.getName(), firstInstance,\n                    is(not(equalTo(secondInstance))));\n        }\n    }\n\n    protected void checkAvailabilityFor(boolean shouldBeTheSame, Collection<Class<?>> components) {\n        for (Class<?> component : components) {\n            checkAvailabilityFor(shouldBeTheSame, component, null);\n        }\n    }\n\n    @Component\n    static public class DisposableComponent {\n        private boolean destroyed;\n\n        @PreDestroy\n        public void preDestroy() {\n            this.destroyed = true;\n        }\n    }\n\n    @Component\n    static public class StartableComponent {\n        private boolean started;\n\n        @PostConstruct\n        public void postConstruct() {\n            this.started = true;\n        }\n    }\n\n    @Test\n    public void shouldDisposeAfterRequest() {\n        registerAndGetFromContainer(Container.class, DisposableComponent.class);\n        DisposableComponent comp = registerAndGetFromContainer(DisposableComponent.class, null);\n        assertTrue(comp.destroyed);\n    }\n\n    @Test\n    public void shouldStartBeforeRequestExecution() {\n        registerAndGetFromContainer(Container.class, StartableComponent.class);\n        StartableComponent comp = registerAndGetFromContainer(StartableComponent.class, null);\n        assertTrue(comp.started);\n    }\n\n    @Test\n\tpublic void canProvideComponentsInTheClasspath() throws Exception {\n    \tcheckAvailabilityFor(false, Collections.<Class<?>>singleton(CustomComponentInTheClasspath.class));\n\t}\n\n    @Test\n    public void shoudRegisterResourcesInRouter() {\n    \tRouter router = getFromContainer(Router.class);\n    \tMatcher<Iterable<? super Route>> hasItem = hasItem(canHandle(ResourceInTheClasspath.class, ResourceInTheClasspath.class.getDeclaredMethods()[0]));\n\t\tassertThat(router.allRoutes(), hasItem);\n    }\n\n    @Test\n    @Ignore(\"Nao passa com o spring. Tem q verificar, mas nao aparenta ser um blocker\")\n    public void shoudUseComponentFactoriesInTheClasspath() {\n    \tProvided object = getFromContainer(Provided.class);\n    \tassertThat(object, is(sameInstance(ComponentFactoryInTheClasspath.PROVIDED)));\n    }\n\n    @Test\n    public void shoudRegisterInterceptorsInInterceptorRegistry() {\n    \tInterceptorRegistry registry = getFromContainer(InterceptorRegistry.class);\n    \tassertThat(registry.all(), hasOneCopyOf(InterceptorInTheClasspath.class));\n    }\n\n    @Test\n    public void shoudCallPredestroyExactlyOneTimeForComponentsScannedFromTheClasspath() {\n    \tCustomComponentWithLifecycleInTheClasspath component = getFromContainer(CustomComponentWithLifecycleInTheClasspath.class);\n    \tassertThat(component.callsToPreDestroy, is(equalTo(0)));\n    \tprovider.stop();\n    \tassertThat(component.callsToPreDestroy, is(equalTo(1)));\n\n    \tresetProvider();\n    }\n\n    @Test\n    public void shoudCallPredestroyExactlyOneTimeForComponentFactoriesScannedFromTheClasspath() {\n    \tComponentFactoryInTheClasspath componentFactory = getFromContainer(ComponentFactoryInTheClasspath.class);\n    \tassertThat(componentFactory.callsToPreDestroy, is(equalTo(0)));\n    \tprovider.stop();\n    \tassertThat(componentFactory.callsToPreDestroy, is(equalTo(1)));\n\n    \tresetProvider();\n    }\n\n\t@Test\n\tpublic void shoudRegisterConvertersInConverters() {\n\t\texecuteInsideRequest(new WhatToDo<Converters>() {\n\t\t\tpublic Converters execute(RequestInfo request, final int counter) {\n\t\t\t\treturn provider.provideForRequest(request, new Execution<Converters>() {\n\t\t\t\t\tpublic Converters insideRequest(Container container) {\n\t\t\t\t\t\tConverters converters = container.instanceFor(Converters.class);\n\t\t\t\t\t\tConverter<?> converter = converters.to(Void.class, container);\n\t\t\t\t\t\tassertThat(converter, is(instanceOf(ConverterInTheClasspath.class)));\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected void resetProvider() {\n\t\tprovider = getProvider();\n\t\tprovider.start(context);\n\t}\n}\n","lineNo":366}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport static br.com.caelum.vraptor.VRaptorMatchers.canHandle;\nimport static org.hamcrest.Matchers.hasItem;\nimport static org.hamcrest.Matchers.instanceOf;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.notNullValue;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.assertTrue;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.spring.components.ConstructorInjection;\nimport br.com.caelum.vraptor.ioc.spring.components.CustomTranslator;\nimport br.com.caelum.vraptor.ioc.spring.components.DummyComponent;\nimport br.com.caelum.vraptor.ioc.spring.components.DummyConverter;\nimport br.com.caelum.vraptor.ioc.spring.components.DummyImplementation;\nimport br.com.caelum.vraptor.ioc.spring.components.DummyInterceptor;\nimport br.com.caelum.vraptor.ioc.spring.components.DummyResource;\nimport br.com.caelum.vraptor.ioc.spring.components.Foo;\nimport br.com.caelum.vraptor.ioc.spring.components.RequestScopedComponent;\nimport br.com.caelum.vraptor.ioc.spring.components.RequestScopedContract;\nimport br.com.caelum.vraptor.ioc.spring.components.SpecialImplementation;\nimport br.com.caelum.vraptor.test.HttpServletRequestMock;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\n\n/**\n * @author Fabio Kung\n */\npublic class SpringBasedContainerTest {\n    private SpringBasedContainer container;\n    private Mockery mockery;\n    private HttpServletRequestMock request;\n    private HttpSessionMock session;\n    private ServletContext servletContext;\n    private HttpServletResponse response;\n\n    @Before\n    public void initContainer() {\n        mockery = new Mockery();\n        servletContext = mockery.mock(ServletContext.class);\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(servletContext).getAttribute(\"org.springframework.web.context.WebApplicationContext.ROOT\");\n\t\t\t\twill(returnValue(null));\n\t\t\t}\n\t\t});\n\n        session = new HttpSessionMock(servletContext, \"session\");\n        request = new HttpServletRequestMock(session);\n        response = mockery.mock(HttpServletResponse.class);\n\n        VRaptorRequestHolder.setRequestForCurrentThread(new RequestInfo(servletContext, request, response));\n        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));\n        container = new SpringBasedContainer(\"br.com.caelum.vraptor.ioc.spring\");\n        container.start(servletContext);\n    }\n\n    @After\n    public void destroyContainer() {\n        container.stop();\n        container = null;\n        RequestContextHolder.resetRequestAttributes();\n        VRaptorRequestHolder.resetRequestForCurrentThread();\n    }\n\n    @Test\n    public void shouldScanAndRegisterAnnotatedBeans() {\n        DummyComponent component = container.instanceFor(DummyComponent.class);\n        assertNotNull(\"can instantiate\", component);\n        assertTrue(\"is the right implementation\", component instanceof DummyImplementation);\n    }\n\n    @Test\n    public void shouldSupportOtherStereotypeAnnotations() {\n        SpecialImplementation component = container.instanceFor(SpecialImplementation.class);\n        assertNotNull(\"can instantiate\", component);\n    }\n\n    @Test\n    public void shouldSupportConstructorInjection() {\n        ConstructorInjection component = container.instanceFor(ConstructorInjection.class);\n        assertNotNull(\"can instantiate\", component);\n        assertNotNull(\"inject dependencies\", component.getDependecy());\n    }\n\n    @Test\n    public void shouldProvideCurrentHttpRequest() {\n        ServletRequest httpRequest = container.instanceFor(ServletRequest.class);\n        assertNotNull(\"can provide request\", httpRequest);\n    }\n\n    @Test\n    public void shouldProvideCurrentVRaptorRequest() {\n        RequestInfo vraptorRequest = container.instanceFor(RequestInfo.class);\n        assertNotNull(\"can provide request\", vraptorRequest);\n    }\n\n    @Test\n    public void shouldProvideServletContext() {\n        ServletContext context = container.instanceFor(ServletContext.class);\n        assertNotNull(\"can provide ServletContext\", context);\n    }\n\n    @Test\n    public void shouldProvideTheContainer() {\n        Container itself = this.container.instanceFor(Container.class);\n        assertNotNull(\"can provide the container\", itself);\n    }\n\n    @Test\n    public void shouldSupportManualRegistration() {\n        this.container.register(RequestScopedContract.class, RequestScopedComponent.class);\n        RequestScopedContract requestScopedContract = this.container.instanceFor(RequestScopedContract.class);\n        assertNotNull(\"can provide manual registered components\", requestScopedContract);\n    }\n\n    @Test\n    public void shoudSupportCustomImplementationsForAlreadyRegisteredComponents() {\n        this.container.register(UrlToResourceTranslator.class, CustomTranslator.class);\n        UrlToResourceTranslator translator = this.container.instanceFor(UrlToResourceTranslator.class);\n        assertThat(translator, is(notNullValue()));\n        assertThat(translator, is(instanceOf(CustomTranslator.class)));\n\n    }\n\n    @Test\n    public void shoudRegisterResourcesInRouter() {\n    \tRouter router = container.instanceFor(Router.class);\n    \tassertThat(router.allRoutes(), hasItem(canHandle(DummyResource.class, DummyResource.class.getDeclaredMethods()[0])));\n    }\n\n    @Test\n    public void shoudRegisterConvertersInConverters() {\n    \tConverters converters = container.instanceFor(Converters.class);\n    \tConverter<?> converter = converters.to(Foo.class, container);\n\t\tassertThat(converter, is(instanceOf(DummyConverter.class)));\n    }\n\n    @Test\n    public void shoudRegisterInterceptorsInInterceptorRegistry() {\n    \tInterceptorRegistry registry = container.instanceFor(InterceptorRegistry.class);\n    \tassertThat(registry.all(), hasItem(DummyInterceptor.class));\n    }\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport static br.com.caelum.vraptor.VRaptorMatchers.canHandle;\nimport static org.hamcrest.Matchers.hasItem;\nimport static org.hamcrest.Matchers.instanceOf;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.notNullValue;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.assertTrue;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.hamcrest.Matcher;\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\n\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.http.route.Route;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.spring.components.ConstructorInjection;\nimport br.com.caelum.vraptor.ioc.spring.components.CustomTranslator;\nimport br.com.caelum.vraptor.ioc.spring.components.DummyComponent;\nimport br.com.caelum.vraptor.ioc.spring.components.DummyConverter;\nimport br.com.caelum.vraptor.ioc.spring.components.DummyImplementation;\nimport br.com.caelum.vraptor.ioc.spring.components.DummyInterceptor;\nimport br.com.caelum.vraptor.ioc.spring.components.DummyResource;\nimport br.com.caelum.vraptor.ioc.spring.components.Foo;\nimport br.com.caelum.vraptor.ioc.spring.components.RequestScopedComponent;\nimport br.com.caelum.vraptor.ioc.spring.components.RequestScopedContract;\nimport br.com.caelum.vraptor.ioc.spring.components.SpecialImplementation;\nimport br.com.caelum.vraptor.test.HttpServletRequestMock;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\n\n/**\n * @author Fabio Kung\n */\npublic class SpringBasedContainerTest {\n    private SpringBasedContainer container;\n    private Mockery mockery;\n    private HttpServletRequestMock request;\n    private HttpSessionMock session;\n    private ServletContext servletContext;\n    private HttpServletResponse response;\n\n    @Before\n    public void initContainer() {\n        mockery = new Mockery();\n        servletContext = mockery.mock(ServletContext.class);\n\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(servletContext).getAttribute(\"org.springframework.web.context.WebApplicationContext.ROOT\");\n\t\t\t\twill(returnValue(null));\n\t\t\t}\n\t\t});\n\n        session = new HttpSessionMock(servletContext, \"session\");\n        request = new HttpServletRequestMock(session);\n        response = mockery.mock(HttpServletResponse.class);\n\n        VRaptorRequestHolder.setRequestForCurrentThread(new RequestInfo(servletContext, request, response));\n        RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(request));\n        container = new SpringBasedContainer(\"br.com.caelum.vraptor.ioc.spring\");\n        container.start(servletContext);\n    }\n\n    @After\n    public void destroyContainer() {\n        container.stop();\n        container = null;\n        RequestContextHolder.resetRequestAttributes();\n        VRaptorRequestHolder.resetRequestForCurrentThread();\n    }\n\n    @Test\n    public void shouldScanAndRegisterAnnotatedBeans() {\n        DummyComponent component = container.instanceFor(DummyComponent.class);\n        assertNotNull(\"can instantiate\", component);\n        assertTrue(\"is the right implementation\", component instanceof DummyImplementation);\n    }\n\n    @Test\n    public void shouldSupportOtherStereotypeAnnotations() {\n        SpecialImplementation component = container.instanceFor(SpecialImplementation.class);\n        assertNotNull(\"can instantiate\", component);\n    }\n\n    @Test\n    public void shouldSupportConstructorInjection() {\n        ConstructorInjection component = container.instanceFor(ConstructorInjection.class);\n        assertNotNull(\"can instantiate\", component);\n        assertNotNull(\"inject dependencies\", component.getDependecy());\n    }\n\n    @Test\n    public void shouldProvideCurrentHttpRequest() {\n        ServletRequest httpRequest = container.instanceFor(ServletRequest.class);\n        assertNotNull(\"can provide request\", httpRequest);\n    }\n\n    @Test\n    public void shouldProvideCurrentVRaptorRequest() {\n        RequestInfo vraptorRequest = container.instanceFor(RequestInfo.class);\n        assertNotNull(\"can provide request\", vraptorRequest);\n    }\n\n    @Test\n    public void shouldProvideServletContext() {\n        ServletContext context = container.instanceFor(ServletContext.class);\n        assertNotNull(\"can provide ServletContext\", context);\n    }\n\n    @Test\n    public void shouldProvideTheContainer() {\n        Container itself = this.container.instanceFor(Container.class);\n        assertNotNull(\"can provide the container\", itself);\n    }\n\n    @Test\n    public void shouldSupportManualRegistration() {\n        this.container.register(RequestScopedContract.class, RequestScopedComponent.class);\n        RequestScopedContract requestScopedContract = this.container.instanceFor(RequestScopedContract.class);\n        assertNotNull(\"can provide manual registered components\", requestScopedContract);\n    }\n\n    @Test\n    public void shoudSupportCustomImplementationsForAlreadyRegisteredComponents() {\n        this.container.register(UrlToResourceTranslator.class, CustomTranslator.class);\n        UrlToResourceTranslator translator = this.container.instanceFor(UrlToResourceTranslator.class);\n        assertThat(translator, is(notNullValue()));\n        assertThat(translator, is(instanceOf(CustomTranslator.class)));\n\n    }\n\n    @Test\n    public void shoudRegisterResourcesInRouter() {\n    \tRouter router = container.instanceFor(Router.class);\n    \tMatcher<Iterable<? super Route>> hasItem = hasItem(canHandle(DummyResource.class, DummyResource.class.getDeclaredMethods()[0]));\n\t\tassertThat(router.allRoutes(), hasItem);\n    }\n\n    @Test\n    public void shoudRegisterConvertersInConverters() {\n    \tConverters converters = container.instanceFor(Converters.class);\n    \tConverter<?> converter = converters.to(Foo.class, container);\n\t\tassertThat(converter, is(instanceOf(DummyConverter.class)));\n    }\n\n    @Test\n    public void shoudRegisterInterceptorsInInterceptorRegistry() {\n    \tInterceptorRegistry registry = container.instanceFor(InterceptorRegistry.class);\n    \tassertThat(registry.all(), hasItem(DummyInterceptor.class));\n    }\n}\n","lineNo":178}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * A registry filled with interceptors to intercept requests.<br/>\n * Interceptors are queried wether they want to intercept a request through\n * their accepts method.\n *\n * @author Guilherme Silveira\n * @author Fabio Kung\n */\n@ApplicationScoped\npublic class DefaultInterceptorRegistry implements InterceptorRegistry {\n\n    private final List<Class<? extends Interceptor>> interceptors = new ArrayList<Class<? extends Interceptor>>();\n\n    public Interceptor[] interceptorsFor(ResourceMethod method, Container container) {\n        List<Interceptor> list = new ArrayList<Interceptor>();\n        for (Class<? extends Interceptor> type : interceptors) {\n            Interceptor instance = container.instanceFor(type);\n            if (instance.accepts(method)) {\n                list.add(instance);\n            }\n        }\n        return list.toArray(new Interceptor[list.size()]);\n    }\n\n    public void register(Class<? extends Interceptor>... interceptors) {\n        this.interceptors.addAll(Arrays.asList(interceptors));\n    }\n\n    public List<Class<? extends Interceptor>> all() {\n        return interceptors;\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.util.collections.Filters;\nimport br.com.caelum.vraptor.util.collections.Functions;\n\nimport com.google.common.collect.Collections2;\nimport com.google.common.collect.Lists;\n\n/**\n * A registry filled with interceptors to intercept requests.<br/>\n * Interceptors are queried wether they want to intercept a request through\n * their accepts method.\n *\n * @author Guilherme Silveira\n * @author Fabio Kung\n */\n@ApplicationScoped\npublic class DefaultInterceptorRegistry implements InterceptorRegistry {\n\n    private final List<Class<? extends Interceptor>> interceptors = new ArrayList<Class<? extends Interceptor>>();\n\n    public Interceptor[] interceptorsFor(ResourceMethod method, Container container) {\n\t\tList<Interceptor> list = Lists.transform(interceptors, Functions.<Interceptor>instanceWith(container));\n\t\tCollection<Interceptor> filtered = Collections2.filter(list, Filters.accepts(method));\n\t\treturn filtered.toArray(new Interceptor[0]);\n    }\n\n    public void register(Class<? extends Interceptor>... interceptors) {\n        this.interceptors.addAll(Arrays.asList(interceptors));\n    }\n\n    public List<Class<? extends Interceptor>> all() {\n        return interceptors;\n    }\n\n}\n","lineNo":61}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * A registry filled with interceptors to intercept requests.<br/>\n * Interceptors are queried wether they want to intercept a request through\n * their accepts method.\n *\n * @author Guilherme Silveira\n * @author Fabio Kung\n */\n@ApplicationScoped\npublic class DefaultInterceptorRegistry implements InterceptorRegistry {\n\n    private final List<Class<? extends Interceptor>> interceptors = new ArrayList<Class<? extends Interceptor>>();\n\n    public Interceptor[] interceptorsFor(ResourceMethod method, Container container) {\n        List<Interceptor> list = new ArrayList<Interceptor>();\n        for (Class<? extends Interceptor> type : interceptors) {\n            Interceptor instance = container.instanceFor(type);\n            if (instance.accepts(method)) {\n                list.add(instance);\n            }\n        }\n        return list.toArray(new Interceptor[list.size()]);\n    }\n\n    public void register(Class<? extends Interceptor>... interceptors) {\n        this.interceptors.addAll(Arrays.asList(interceptors));\n    }\n\n    public List<Class<? extends Interceptor>> all() {\n        return interceptors;\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.util.collections.Filters;\nimport br.com.caelum.vraptor.util.collections.Functions;\n\nimport com.google.common.collect.Collections2;\nimport com.google.common.collect.Lists;\n\n/**\n * A registry filled with interceptors to intercept requests.<br/>\n * Interceptors are queried wether they want to intercept a request through\n * their accepts method.\n *\n * @author Guilherme Silveira\n * @author Fabio Kung\n */\n@ApplicationScoped\npublic class DefaultInterceptorRegistry implements InterceptorRegistry {\n\n    private final List<Class<? extends Interceptor>> interceptors = new ArrayList<Class<? extends Interceptor>>();\n\n    public Interceptor[] interceptorsFor(ResourceMethod method, Container container) {\n\t\tList<Interceptor> list = Lists.transform(interceptors, Functions.<Interceptor>instanceWith(container));\n\t\tCollection<Interceptor> filtered = Collections2.filter(list, Filters.accepts(method));\n\t\treturn filtered.toArray(new Interceptor[0]);\n    }\n\n    public void register(Class<? extends Interceptor>... interceptors) {\n        this.interceptors.addAll(Arrays.asList(interceptors));\n    }\n\n    public List<Class<? extends Interceptor>> all() {\n        return interceptors;\n    }\n\n}\n","lineNo":60}
{"Smelly Sample":"package br.com.caelum.vraptor.ioc;\n\nimport java.lang.annotation.Annotation;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.Intercepts;\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.interceptor.Interceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.InterceptorSequence;\n\n@ApplicationScoped\npublic class InterceptorStereotypeHandler implements StereotypeHandler {\n\tprivate static final Logger logger = LoggerFactory.getLogger(InterceptorStereotypeHandler.class);\n\tprivate final InterceptorRegistry registry;\n\n\tpublic InterceptorStereotypeHandler(InterceptorRegistry registry) {\n\t\tthis.registry = registry;\n\t}\n\n\tpublic Class<? extends Annotation> stereotype() {\n\t\treturn Intercepts.class;\n\t}\n\n\tpublic void handle(Class<?> type) {\n\t\tif (Interceptor.class.isAssignableFrom(type)) {\n            registerInterceptor(type);\n        } else if (InterceptorSequence.class.isAssignableFrom(type)) {\n            registerInterceptorSequence(type);\n        } else {\n            throw new VRaptorException(\"Annotation \" + Intercepts.class + \" found in \" + type\n                    + \", but it is neither an Interceptor nor an InterceptorSequence.\");\n        }\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate void registerInterceptor(Class<?> type) {\n\t\tlogger.debug(\"Found interceptor for \" + type);\n\t\tClass<? extends Interceptor> interceptorType = (Class<? extends Interceptor>) type;\n\t\tregistry.register(interceptorType);\n\t}\n\t\n\t@SuppressWarnings(\"unchecked\")\n\tprivate void registerInterceptorSequence(Class<?> type) {\n\t\tlogger.debug(\"Found interceptor sequence for \" + type);\n\t\tClass<? extends InterceptorSequence> interceptorSequenceType = (Class<? extends InterceptorSequence>) type;\n\t\tregistry.register(parseSequence(interceptorSequenceType));\n\t}\n\n\tprivate Class<? extends Interceptor>[] parseSequence(Class<? extends InterceptorSequence> type) {\n\t\ttry {\n\t\t\tInterceptorSequence sequence = type.getConstructor().newInstance();\n\t\t\treturn sequence.getSequence();\n\t\t} catch (Exception e) {\n\t\t\tthrow new VRaptorException(\"Problem ocurred while instantiating an interceptor sequence\", e);\n\t\t}\n\t}\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.ioc;\n\nimport java.lang.annotation.Annotation;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.Intercepts;\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.interceptor.Interceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.InterceptorSequence;\n\n@ApplicationScoped\npublic class InterceptorStereotypeHandler implements StereotypeHandler {\n\tprivate static final Logger logger = LoggerFactory.getLogger(InterceptorStereotypeHandler.class);\n\tprivate final InterceptorRegistry registry;\n\tprivate final ComponentRegistry componentRegistry;\n\n\tpublic InterceptorStereotypeHandler(InterceptorRegistry registry, ComponentRegistry componentRegistry) {\n\t\tthis.registry = registry;\n\t\tthis.componentRegistry = componentRegistry;\n\t}\n\n\tpublic Class<? extends Annotation> stereotype() {\n\t\treturn Intercepts.class;\n\t}\n\n\tpublic void handle(Class<?> type) {\n\t\tif (Interceptor.class.isAssignableFrom(type)) {\n            registerInterceptor(type);\n        } else if (InterceptorSequence.class.isAssignableFrom(type)) {\n            registerInterceptorSequence(type);\n        } else {\n            throw new VRaptorException(\"Annotation \" + Intercepts.class + \" found in \" + type\n                    + \", but it is neither an Interceptor nor an InterceptorSequence.\");\n        }\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate void registerInterceptor(Class<?> type) {\n\t\tlogger.debug(\"Found interceptor for \" + type);\n\t\tClass<? extends Interceptor> interceptorType = (Class<? extends Interceptor>) type;\n\t\tregistry.register(interceptorType);\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate void registerInterceptorSequence(Class<?> type) {\n\t\tlogger.debug(\"Found interceptor sequence for \" + type);\n\t\tClass<? extends InterceptorSequence> interceptorSequenceType = (Class<? extends InterceptorSequence>) type;\n\t\tregistry.register(parseSequence(interceptorSequenceType));\n\t}\n\n\tprivate Class<? extends Interceptor>[] parseSequence(Class<? extends InterceptorSequence> type) {\n\t\ttry {\n\t\t\tInterceptorSequence sequence = type.getConstructor().newInstance();\n\t\t\tClass<? extends Interceptor>[] interceptors = sequence.getSequence();\n\t\t\tfor (Class<? extends Interceptor> interceptor : interceptors) {\n\t\t\t\tcomponentRegistry.deepRegister(interceptor);\n\t\t\t}\n\t\t\treturn interceptors;\n\t\t} catch (Exception e) {\n\t\t\tthrow new VRaptorException(\"Problem ocurred while instantiating an interceptor sequence\", e);\n\t\t}\n\t}\n}\n","lineNo":58}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.example;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport br.com.caelum.vraptor.Delete;\nimport br.com.caelum.vraptor.Get;\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.Post;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.example.dao.Repository;\nimport br.com.caelum.vraptor.validator.Hibernate;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.validator.Validations;\n\n@Resource\npublic class ClientsController {\n\n\tprivate final Result result;\n\n\tprivate final Repository repository;\n\n\tprivate final Validator validator;\n\n\tpublic ClientsController(Result result, Repository repository, Validator validator) {\n\t\tthis.result = result;\n\t\tthis.repository = repository;\n\t\tthis.validator = validator;\n\t}\n\n\t@Get\n\t@Path(\"/clients\")\n\tpublic Collection<Client> list() {\n\t\treturn repository.all();\n\t}\n\n\t@Post\n\t@Path(\"/clients\")\n\tpublic void add(final Client client) {\n\t\tvalidator.onError().goTo(ClientsController.class).list();\n\t\tif(client.getName().equals(\"guilherme\")) {\n\t\t\tvalidator.add(new ValidationMessage(\"\", \"ha!\"));\n\t\t}\n\t\tvalidator.validate();\n\t\tvalidator.checking(new Validations() {{\n\t\t\tthat(\"client\", \"should_not_be_null\", client != null);\n\t\t\tif(client != null) {\n\t\t\t\tthat(\"client\", \"should_not_be_null\", client.getAge() > 10);\n\t\t\t}\n\t\t\tand(Hibernate.validate(client));\n\t\t}});\n\t\trepository.add(client);\n\t}\n\n\n\n\n\n\n\n\n\n\t@Delete\n\t@Path(\"/clients/{client.id}\")\n\tpublic void delete(Client client) {\n\t\trepository.remove(client);\n\t\tresult.use(logic()).redirectTo(ClientsController.class).list();\n\t}\n\t\n\t@Get\n\t@Path(\"/clients/{client.id}\")\n\tpublic void view(Client client) {\n\t\tresult.include(\"client\", repository.find(client.getId()));\n\t}\n\n\tpublic void sendEmail() {\n\t\tresult.use(EmptyResult.class);\n\t}\n\n\tpublic void random() {\n\t\tArrayList<Client> all = new ArrayList<Client>(repository.all());\n\t\tClient client = all.get((int) (Math.random() * all.size()));\n\t\tresult.use(logic()).redirectTo(ClientsController.class).view(client);\n\t}\n\n\tpublic File download(Client client) {\n\t\treturn repository.find(client.getId()).getFile().getFile();\n\t}\n\n    public void form() {\n        // TODO\n    }\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.example;\n\nimport static br.com.caelum.vraptor.view.Results.logic;\nimport static org.hamcrest.Matchers.notNullValue;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Collection;\n\nimport br.com.caelum.vraptor.Delete;\nimport br.com.caelum.vraptor.Get;\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.Post;\nimport br.com.caelum.vraptor.Resource;\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.Validator;\nimport br.com.caelum.vraptor.example.dao.Repository;\nimport br.com.caelum.vraptor.validator.Hibernate;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.validator.Validations;\n\n@Resource\npublic class ClientsController {\n\n\tprivate final Result result;\n\n\tprivate final Repository repository;\n\n\tprivate final Validator validator;\n\n\tpublic ClientsController(Result result, Repository repository, Validator validator) {\n\t\tthis.result = result;\n\t\tthis.repository = repository;\n\t\tthis.validator = validator;\n\t}\n\n\t@Get\n\t@Path(\"/clients\")\n\tpublic Collection<Client> list() {\n\t\treturn repository.all();\n\t}\n\n\t@Post\n\t@Path(\"/clients\")\n\tpublic void add(final Client client) {\n\t\tvalidator.onError().goTo(ClientsController.class).list();\n\t\tif(client.getName().equals(\"guilherme\")) {\n\t\t\tvalidator.add(new ValidationMessage(\"\", \"ha!\"));\n\t\t}\n\t\tvalidator.validate();\n\t\tvalidator.checking(new Validations() {{\n\t\t\tthat(\"client\", \"should_not_be_null\", client != null);\n\t\t\tif(client != null) {\n\t\t\t\tthat(\"client\", \"should_not_be_null\", client.getAge() > 10);\n\t\t\t}\n\t\t\tand(Hibernate.validate(client));\n\t\t}});\n\t\trepository.add(client);\n\t}\n\n\t@Delete\n\t@Path(\"/clients/{client.id}\")\n\tpublic void delete(Client client) {\n\t\trepository.remove(client);\n\t\tresult.use(logic()).redirectTo(ClientsController.class).list();\n\t}\n\n\t@Get\n\t@Path(\"/clients/{client.id}\")\n\tpublic void view(Client client) {\n\t\tresult.include(\"client\", repository.find(client.getId()));\n\t}\n\n\tpublic void sendEmail() {\n\t\tresult.use(EmptyResult.class);\n\t}\n\n\tpublic void random() {\n\t\tArrayList<Client> all = new ArrayList<Client>(repository.all());\n\t\tClient client = all.get((int) (Math.random() * all.size()));\n\t\tresult.use(logic()).redirectTo(ClientsController.class).view(client);\n\t}\n\n\tpublic File download(Client client) {\n\t\tfinal Client found = repository.find(client.getId());\n\t\tvalidator.onError().goTo(ClientsController.class).view(client);\n\t\tvalidator.checking(new Validations() {{\n\t\t\tthat(found.getFile()).shouldBe(\"download\", \"client_without_file\", notNullValue());\n\t\t}});\n\t\treturn found.getFile().getFile();\n\t}\n\n    public void form() {\n        // TODO\n    }\n}\n","lineNo":114}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.DefaultResourceClass;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceClass;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * The default implementation of resource localization rules. It also uses a\n * Path annotation to discover path->method mappings using the supplied\n * ResourceAndMethodLookup.\n *\n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class DefaultRouter implements Router {\n\n\tprivate final Proxifier proxifier;\n\tprivate final Collection<Route> routes = new PriorityRoutesList();\n\tprivate final Set<ResourceClass> resources = new HashSet<ResourceClass>();\n\tprivate final RoutesParser routesParser;\n\tprivate final ParameterNameProvider provider;\n\tprivate final TypeCreator creator;\n\n\tpublic DefaultRouter(RoutesConfiguration config, RoutesParser resourceRoutesCreator,\n\t\t\tParameterNameProvider provider, Proxifier proxifier, TypeCreator creator) {\n\t\tthis.routesParser = resourceRoutesCreator;\n\t\tthis.provider = provider;\n\t\tthis.creator = creator;\n\t\tthis.proxifier = proxifier;\n\t\t// this resource should be kept here so it doesnt matter whether\n\t\t// the user uses a custom routes config\n\t\tRouteBuilder rule = new RouteBuilder(proxifier, \"/is_using_vraptor\");\n\t\ttry {\n\t\t\trule.is(VRaptorInfo.class).info();\n\t\t\tadd(rule.build());\n\t\t} catch (IOException e) {\n\t\t\t// ignorable\n\t\t}\n\t\tconfig.config(this);\n\t}\n\n\tprivate void add(List<Route> rules) {\n\t\tfor (Route r : rules) {\n\t\t\tadd(r);\n\t\t}\n\t}\n\n\tpublic Proxifier getProxifier() {\n\t\treturn proxifier;\n\t}\n\n\t/**\n\t * You can override this method to get notified by all added routes.\n\t */\n\tpublic void add(Route r) {\n\t\tResourceClass resource = r.getResource();\n\t\tif (resource != null) {\n\t\t\tthis.resources.add(resource);\n\t\t}\n\t\tthis.routes.add(r);\n\t}\n\n\tpublic ResourceMethod parse(String uri, HttpMethod method, MutableRequest request) {\n\t\tfor (Route rule : routes) {\n\t\t\tResourceMethod value = rule.matches(uri, method, request);\n\t\t\tif (value != null) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic Set<ResourceClass> allResources() {\n\t\t// TODO: defensive copy? (collections.unmodifiable)\n\t\treturn resources;\n\t}\n\n\tpublic void register(ResourceClass resource) {\n\t\tadd(this.routesParser.rulesFor(resource));\n\t}\n\n\tpublic <T> String urlFor(Class<T> type, Method method, Object... params) {\n\t\tfor (Route route : routes) {\n\t\t\tif (route.canHandle(type, method)) {\n\t\t\t\tString[] names = provider.parameterNamesFor(method);\n\t\t\t\tClass<?> parameterType = creator.typeFor(new DefaultResourceMethod(new DefaultResourceClass(type),\n\t\t\t\t\t\tmethod));\n\t\t\t\ttry {\n\t\t\t\t\tObject root = parameterType.getConstructor().newInstance();\n\t\t\t\t\tfor (int i = 0; i < names.length; i++) {\n\t\t\t\t\t\tMethod setter = findSetter(parameterType, \"set\" + Info.capitalize(names[i]));\n\t\t\t\t\t\tsetter.invoke(root, params[i]);\n\t\t\t\t\t}\n\t\t\t\t\treturn route.urlFor(type, method, root);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new VRaptorException(\"The selected route is invalid for redirection: \" + type.getName() + \".\"\n\t\t\t\t\t\t\t+ method.getName(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new RouteNotFoundException(\"The selected route is invalid for redirection: \" + type.getName() + \".\"\n\t\t\t\t+ method.getName());\n\t}\n\n\tprivate Method findSetter(Class<?> parameterType, String methodName) {\n\t\tfor (Method m : parameterType.getDeclaredMethods()) {\n\t\t\tif (m.getName().equals(methodName)) {\n\t\t\t\treturn m;\n\t\t\t}\n\t\t}\n\t\tthrow new VRaptorException(\n\t\t\t\t\"Unable to redirect using route as setter method for parameter setting was not created. \"\n\t\t\t\t\t\t+ \"Thats probably a bug on your type creator. \"\n\t\t\t\t\t\t+ \"If you are using the default type creator, notify VRaptor.\");\n\t}\n\n\tpublic List<Route> allRoutes() {\n\t\treturn Collections.unmodifiableList(new ArrayList<Route>(routes));\n\t}\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.DefaultResourceClass;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceClass;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\n\n/**\n * The default implementation of resource localization rules. It also uses a\n * Path annotation to discover path->method mappings using the supplied\n * ResourceAndMethodLookup.\n *\n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class DefaultRouter implements Router {\n\n\tprivate final Proxifier proxifier;\n\tprivate final Collection<Route> routes = new PriorityRoutesList();\n\tprivate final Set<ResourceClass> resources = new HashSet<ResourceClass>();\n\tprivate final RoutesParser routesParser;\n\tprivate final ParameterNameProvider provider;\n\tprivate final TypeCreator creator;\n\n\tpublic DefaultRouter(RoutesConfiguration config, RoutesParser resourceRoutesCreator,\n\t\t\tParameterNameProvider provider, Proxifier proxifier, TypeCreator creator) {\n\t\tthis.routesParser = resourceRoutesCreator;\n\t\tthis.provider = provider;\n\t\tthis.creator = creator;\n\t\tthis.proxifier = proxifier;\n\t\t// this resource should be kept here so it doesnt matter whether\n\t\t// the user uses a custom routes config\n\t\tRouteBuilder rule = new RouteBuilder(proxifier, \"/is_using_vraptor\");\n\t\ttry {\n\t\t\trule.is(VRaptorInfo.class).info();\n\t\t\tadd(rule.build());\n\t\t} catch (IOException e) {\n\t\t\t// ignorable\n\t\t}\n\t\tconfig.config(this);\n\t}\n\n\tprivate void add(List<Route> rules) {\n\t\tfor (Route r : rules) {\n\t\t\tadd(r);\n\t\t}\n\t}\n\n\tpublic Proxifier getProxifier() {\n\t\treturn proxifier;\n\t}\n\n\t/**\n\t * You can override this method to get notified by all added routes.\n\t */\n\tpublic void add(Route r) {\n\t\tResourceClass resource = r.getResource();\n\t\tif (resource != null) {\n\t\t\tthis.resources.add(resource);\n\t\t}\n\t\tthis.routes.add(r);\n\t}\n\n\tpublic ResourceMethod parse(String uri, HttpMethod method, MutableRequest request) {\n\t\tfor (Route rule : routes) {\n\t\t\tResourceMethod value = rule.matches(uri, method, request);\n\t\t\tif (value != null) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic Set<ResourceClass> allResources() {\n\t\t// TODO: defensive copy? (collections.unmodifiable)\n\t\treturn resources;\n\t}\n\n\tpublic void register(ResourceClass resource) {\n\t\tadd(this.routesParser.rulesFor(resource));\n\t}\n\n\tpublic <T> String urlFor(Class<T> type, Method method, Object... params) {\n\t\tfor (Route route : routes) {\n\t\t\tif (route.canHandle(type, method)) {\n\t\t\t\ttry {\n\t\t\t\t\tDefaultResourceMethod resourceMethod = new DefaultResourceMethod(new DefaultResourceClass(type), method);\n\t\t\t\t\treturn route.urlFor(type, method, creator.instanceWithParameters(resourceMethod, params));\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new VRaptorException(\"The selected route is invalid for redirection: \" + type.getName() + \".\"\n\t\t\t\t\t\t\t+ method.getName(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new RouteNotFoundException(\"The selected route is invalid for redirection: \" + type.getName() + \".\"\n\t\t\t\t+ method.getName());\n\t}\n\n\tpublic List<Route> allRoutes() {\n\t\treturn Collections.unmodifiableList(new ArrayList<Route>(routes));\n\t}\n\n}\n","lineNo":131}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.ComponentFactoryIntrospector;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.ioc.SessionScoped;\n\n/**\n * Provides containers, controlling all scopes and registering all different\n * components on their respective areas.\n *\n * @author Guilherme Silveira\n * @author Adriano Almeida\n * @author Sérgio Lopes\n */\npublic class PicoContainersProvider implements ComponentRegistry {\n\n    public static final String CONTAINER_SESSION_KEY = PicoContainersProvider.class.getName() + \".session\";\n\n    private static final Logger logger = LoggerFactory.getLogger(PicoContainersProvider.class);\n\n    private final Map<Class<?>, Class<?>> applicationScoped = new HashMap<Class<?>, Class<?>>();\n    private final Map<Class<?>, Class<?>> sessionScoped = new HashMap<Class<?>, Class<?>>();\n    private final Map<Class<?>, Class<?>> requestScoped = new HashMap<Class<?>, Class<?>>();\n    private final Map<Class<?>, Class<?>> bundledApplicationScoped = new HashMap<Class<?>, Class<?>>();\n    private final Map<Class<?>, Class<?>> bundledSessionScoped = new HashMap<Class<?>, Class<?>>();\n    private final Map<Class<?>, Class<?>> bundledRequestScoped = new HashMap<Class<?>, Class<?>>();\n    private final VRaptorPicoContainer appContainer;\n    private boolean initialized = false;\n\n    private final ComponentFactoryRegistry componentFactoryRegistry;\n\n    public PicoContainersProvider(VRaptorPicoContainer container, ComponentFactoryRegistry componentFactoryRegistry) {\n        this.appContainer = container;\n        this.componentFactoryRegistry = componentFactoryRegistry;\n    }\n\n    public void register(Class<?> requiredType, Class<?> type) {\n        register(requiredType, type, false);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void register(Class<?> requiredType, Class<?> type, boolean overridable) {\n        logger.debug(\"Registering \" + requiredType.getName() + \" with \" + type.getName());\n\n        if (alreadyRegistered(requiredType)) {\n            logger.debug(\"Overriding interface \" + requiredType.getName() + \" with \" + type.getName());\n        }\n\n        if (type.isAnnotationPresent(ApplicationScoped.class)) {\n            logger.debug(\"Registering \" + type.getName() + \" as an application component\");\n            if (overridable) {\n                this.bundledApplicationScoped.put(requiredType, type);\n            } else {\n                this.applicationScoped.put(requiredType, type);\n            }\n            if (initialized) {\n                logger.warn(\"VRaptor was already initialized, the contexts were created but you are registering a component.\"\n                        + \"This is nasty. The original component might already be in use.\"\n                        + \"Avoid doing it: \" + requiredType.getName());\n                this.appContainer.addComponent(requiredType, type);\n            }\n        } else if (type.isAnnotationPresent(SessionScoped.class)) {\n            logger.debug(\"Registering \" + type.getName() + \" a an session component\");\n            if (overridable) {\n                this.bundledSessionScoped.put(requiredType, type);\n            } else {\n                this.sessionScoped.put(requiredType, type);\n            }\n        } else {\n            // default behaviour: even without @RequestScoped\n            if (!type.isAnnotationPresent(RequestScoped.class)) {\n                logger.info(\"Class being registered as @RequestScoped, since there is no Scope annotation \" + type);\n            }\n            logger.debug(\"Registering \" + type.getName() + \" as a request component\");\n            if (overridable) {\n                this.bundledRequestScoped.put(requiredType, type);\n            } else {\n                this.requestScoped.put(requiredType, type);\n            }\n        }\n\n        if (ComponentFactory.class.isAssignableFrom(type) && !requiredType.equals(ComponentFactory.class)) {\n            componentFactoryRegistry.register((Class<? extends ComponentFactory<?>>) type);\n\n            if (type.isAnnotationPresent(ApplicationScoped.class) && initialized) {\n                if (initialized) {\n                    logger.warn(\"VRaptor was already initialized, the contexts were created but you are registering a component.\"\n                            + \"This is nasty. The original component might already be in use.\"\n                            + \"Avoid doing it: \" + requiredType.getName());\n                    Class<?> targetType = new ComponentFactoryIntrospector().targetTypeForComponentFactory(type);\n                    this.appContainer.addAdapter(new PicoComponentAdapter(targetType, (Class<? extends ComponentFactory<?>>) type));\n                }\n            }\n        }\n    }\n\n    private boolean alreadyRegistered(Class<?> interfaceType) {\n        for (Map<Class<?>, Class<?>> scope : new Map[]{bundledApplicationScoped, bundledSessionScoped, bundledRequestScoped}) {\n            if (scope.containsKey(interfaceType)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    PicoBasedContainer provide(RequestInfo request) {\n        HttpSession session = request.getRequest().getSession();\n        MutablePicoContainer sessionScope = (MutablePicoContainer) session.getAttribute(CONTAINER_SESSION_KEY);\n        if (sessionScope == null) {\n            sessionScope = createSessionContainer(session);\n        }\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Request components are \" + requestScoped);\n        }\n        VRaptorPicoContainer requestContainer = new VRaptorPicoContainer(sessionScope);\n        for (Class<?> requiredType : bundledRequestScoped.keySet()) {\n            requestContainer.addBundledComponent(requiredType, bundledRequestScoped.get(requiredType));\n        }\n        for (Class<?> requiredType : requestScoped.keySet()) {\n            requestContainer.addComponent(requiredType, requestScoped.get(requiredType));\n        }\n        requestContainer.addBundledComponent(request);\n        requestContainer.addBundledComponent(request.getRequest());\n        requestContainer.addBundledComponent(request.getResponse());\n\n        registerComponentFactories(requestContainer, componentFactoryRegistry.getRequestScopedComponentFactoryMap());\n\n        PicoBasedContainer adapter = new PicoBasedContainer(requestContainer, this.appContainer.getComponent(Router.class));\n        requestContainer.addBundledComponent(adapter);\n        return adapter;\n    }\n\n    private MutablePicoContainer createSessionContainer(HttpSession session) {\n        VRaptorPicoContainer sessionContainer = new VRaptorPicoContainer(this.appContainer);\n\n        sessionContainer.addBundledComponent(HttpSession.class, session);\n        session.setAttribute(CONTAINER_SESSION_KEY, sessionContainer);\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Session components are \" + sessionScoped);\n        }\n\n        for (Class<?> requiredType : bundledSessionScoped.keySet()) {\n            sessionContainer.addBundledComponent(requiredType, bundledSessionScoped.get(requiredType));\n        }\n\n        for (Class<?> requiredType : sessionScoped.keySet()) {\n            sessionContainer.addComponent(requiredType, sessionScoped.get(requiredType));\n        }\n\n        registerComponentFactories(sessionContainer, componentFactoryRegistry.getSessionScopedComponentFactoryMap());\n\n        sessionContainer.start();\n        return sessionContainer;\n    }\n\n    /**\n     * Registers all application scoped elements into the container.\n     */\n    public void init() {\n\n        for (Class<?> requiredType : bundledApplicationScoped.keySet()) {\n            Class<?> type = bundledApplicationScoped.get(requiredType);\n            logger.debug(\"Initializing application scope with \" + type);\n            this.appContainer.addBundledComponent(type);\n        }\n\n        for (Class<?> requiredType : applicationScoped.keySet()) {\n            Class<?> type = applicationScoped.get(requiredType);\n            logger.debug(\"Initializing application scope with \" + type);\n            this.appContainer.addComponent(type);\n        }\n\n        registerComponentFactories(appContainer, componentFactoryRegistry.getApplicationScopedComponentFactoryMap());\n\n        logger.debug(\"Session components to initialize: \" + sessionScoped.keySet());\n        logger.debug(\"Requets components to initialize: \" + requestScoped.keySet());\n        this.initialized = true;\n    }\n\n    /**\n     * Register all component factories found in classpath scanning\n     *\n     * @param container\n     * @param componentFactoryMap\n     */\n    private void registerComponentFactories(MutablePicoContainer container, Map<Class<?>, Class<? extends ComponentFactory>> componentFactoryMap) {\n        for (Class<?> targetType : componentFactoryMap.keySet()) {\n            container.addAdapter(new PicoComponentAdapter(targetType, componentFactoryMap.get(targetType)));\n        }\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.ComponentFactory;\nimport br.com.caelum.vraptor.ioc.ComponentFactoryIntrospector;\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.ioc.SessionScoped;\n\n/**\n * Provides containers, controlling all scopes and registering all different\n * components on their respective areas.\n *\n * @author Guilherme Silveira\n * @author Adriano Almeida\n * @author Sérgio Lopes\n */\npublic class PicoContainersProvider implements ComponentRegistry {\n\n    public static final String CONTAINER_SESSION_KEY = PicoContainersProvider.class.getName() + \".session\";\n\n    private static final Logger logger = LoggerFactory.getLogger(PicoContainersProvider.class);\n\n    private final Map<Class<?>, Class<?>> applicationScoped = new HashMap<Class<?>, Class<?>>();\n    private final Map<Class<?>, Class<?>> sessionScoped = new HashMap<Class<?>, Class<?>>();\n    private final Map<Class<?>, Class<?>> requestScoped = new HashMap<Class<?>, Class<?>>();\n    private final MutablePicoContainer appContainer;\n    private boolean initialized = false;\n\n    private final ComponentFactoryRegistry componentFactoryRegistry;\n\n    public PicoContainersProvider(MutablePicoContainer container, ComponentFactoryRegistry componentFactoryRegistry) {\n        this.appContainer = container;\n        this.componentFactoryRegistry = componentFactoryRegistry;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void register(Class<?> requiredType, Class<?> type) {\n        logger.debug(\"Registering \" + requiredType.getName() + \" with \" + type.getName());\n\n        boolean overriding = alreadyRegistered(requiredType);\n        if (overriding) {\n            logger.debug(\"Overriding interface \" + requiredType.getName() + \" with \" + type.getName());\n        }\n        if (type.isAnnotationPresent(ApplicationScoped.class)) {\n            logger.debug(\"Registering \" + type.getName() + \" as an application component\");\n            this.applicationScoped.put(requiredType, type);\n            if (initialized) {\n                logger.warn(\"VRaptor was already initialized, the contexts were created but you are registering a component.\"\n                        + \"This is nasty. The original component might already be in use.\"\n                        + \"Avoid doing it: \" + requiredType.getName());\n                this.appContainer.addComponent(requiredType, type);\n            }\n        } else if (type.isAnnotationPresent(SessionScoped.class)) {\n            logger.debug(\"Registering \" + type.getName() + \" a an session component\");\n            this.sessionScoped.put(requiredType, type);\n        } else {\n            // default behaviour: even without @RequestScoped\n            if (!type.isAnnotationPresent(RequestScoped.class)) {\n                logger.info(\"Class being registered as @RequestScoped, since there is no Scope annotation \" + type);\n            }\n            logger.debug(\"Registering \" + type.getName() + \" as a request component\");\n            this.requestScoped.put(requiredType, type);\n        }\n\n        if (ComponentFactory.class.isAssignableFrom(type) && !requiredType.equals(ComponentFactory.class)) {\n            componentFactoryRegistry.register((Class<? extends ComponentFactory<?>>) type);\n\n            if (type.isAnnotationPresent(ApplicationScoped.class) && initialized) {\n                if (initialized) {\n                    logger.warn(\"VRaptor was already initialized, the contexts were created but you are registering a component.\"\n                            + \"This is nasty. The original component might already be in use.\"\n                            + \"Avoid doing it: \" + requiredType.getName());\n                    Class<?> targetType = new ComponentFactoryIntrospector().targetTypeForComponentFactory(type);\n                    this.appContainer.addAdapter(new PicoComponentAdapter(targetType, (Class<? extends ComponentFactory<?>>) type));\n                }\n            }\n        }\n    }\n\n    private boolean alreadyRegistered(Class<?> interfaceType) {\n        for (Map<Class<?>, Class<?>> scope : new Map[]{applicationScoped, sessionScoped, requestScoped}) {\n            if (scope.containsKey(interfaceType)) {\n                scope.remove(interfaceType);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    PicoBasedContainer provide(RequestInfo request) {\n        HttpSession session = request.getRequest().getSession();\n        MutablePicoContainer sessionScope = (MutablePicoContainer) session.getAttribute(CONTAINER_SESSION_KEY);\n        if (sessionScope == null) {\n            sessionScope = createSessionContainer(session);\n        }\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Request components are \" + requestScoped);\n        }\n        MutablePicoContainer requestContainer = new VRaptorPicoContainer(sessionScope);\n        for (Class<?> requiredType : requestScoped.keySet()) {\n            requestContainer.addComponent(requiredType, requestScoped.get(requiredType));\n        }\n        requestContainer.addComponent(request).addComponent(request.getRequest()).addComponent(request.getResponse());\n\n        registerComponentFactories(requestContainer, componentFactoryRegistry.getRequestScopedComponentFactoryMap());\n\n        return new PicoBasedContainer(requestContainer, this.appContainer.getComponent(Router.class));\n    }\n\n    private MutablePicoContainer createSessionContainer(HttpSession session) {\n        MutablePicoContainer sessionContainer = new VRaptorPicoContainer(this.appContainer);\n\n        sessionContainer.addComponent(HttpSession.class, session);\n        session.setAttribute(CONTAINER_SESSION_KEY, sessionContainer);\n\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Session components are \" + sessionScoped);\n        }\n\n        for (Class<?> requiredType : sessionScoped.keySet()) {\n            sessionContainer.addComponent(requiredType, sessionScoped.get(requiredType));\n        }\n\n        registerComponentFactories(sessionContainer, componentFactoryRegistry.getSessionScopedComponentFactoryMap());\n\n        sessionContainer.start();\n        return sessionContainer;\n    }\n\n    /**\n     * Registers all application scoped elements into the container.\n     */\n    public void init() {\n\n        for (Class<?> requiredType : applicationScoped.keySet()) {\n            Class<?> type = applicationScoped.get(requiredType);\n            logger.debug(\"Initializing application scope with \" + type);\n            this.appContainer.addComponent(type);\n        }\n\n        registerComponentFactories(appContainer, componentFactoryRegistry.getApplicationScopedComponentFactoryMap());\n\n        logger.debug(\"Session components to initialize: \" + sessionScoped.keySet());\n        logger.debug(\"Requets components to initialize: \" + requestScoped.keySet());\n        this.initialized = true;\n    }\n\n    /**\n     * Register all component factories found in classpath scanning\n     *\n     * @param container\n     * @param componentFactoryMap\n     */\n    private void registerComponentFactories(MutablePicoContainer container, Map<Class<?>, Class<? extends ComponentFactory>> componentFactoryMap) {\n        for (Class<?> targetType : componentFactoryMap.keySet()) {\n            container.addAdapter(new PicoComponentAdapter(targetType, componentFactoryMap.get(targetType)));\n        }\n    }\n\n}\n","lineNo":85}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.extra.ForwardToDefaultViewInterceptor;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.OutjectResult;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.interceptor.multipart.DefaultMultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartInterceptor;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.view.DefaultLogicResult;\nimport br.com.caelum.vraptor.view.DefaultPageResult;\nimport br.com.caelum.vraptor.view.EmptyResult;\nimport br.com.caelum.vraptor.view.LogicResult;\nimport br.com.caelum.vraptor.view.PageResult;\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.servlet.ServletContext;\n\n/**\n * Managing internal components by using pico container.<br>\n * There is an extension point through the registerComponents method, which\n * allows one to give a customized container.\n *\n * @author Guilherme Silveira\n */\npublic class PicoProvider implements ContainerProvider {\n\n    private final MutablePicoContainer container;\n\n    private static final Logger logger = LoggerFactory.getLogger(PicoProvider.class);\n\n    public PicoProvider() {\n        this.container = new DefaultPicoContainer(new Caching(),\n                new JavaEE5LifecycleStrategy(new NullComponentMonitor()), null);\n        PicoContainersProvider containersProvider = new PicoContainersProvider(this.container);\n        this.container.addComponent(containersProvider);\n    }\n\n    /**\n     * Register extra components that your app wants to.\n     */\n    protected void registerBundledComponents(ComponentRegistry container) {\n        logger.debug(\"Registering base pico container related implementation components\");\n        for (Class<?> type : BaseComponents.getApplicationScoped()) {\n            singleInterfaceRegister(type, container);\n        }\n        for (Class<?> type : BaseComponents.getRequestScoped()) {\n            singleInterfaceRegister(type, container);\n        }\n        container.register(MultipartConfig.class, DefaultMultipartConfig.class);\n        container.register(ForwardToDefaultViewInterceptor.class, ForwardToDefaultViewInterceptor.class);\n        container.register(LogicResult.class, DefaultLogicResult.class);\n        container.register(PageResult.class, DefaultPageResult.class);\n        container.register(EmptyResult.class, EmptyResult.class);\n        container.register(OutjectResult.class, OutjectResult.class);\n        container.register(TypeCreator.class, AsmBasedTypeCreator.class);\n        container.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class);\n        container.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class);\n        container.register(InterceptorListPriorToExecutionExtractor.class,\n                InterceptorListPriorToExecutionExtractor.class);\n        container.register(DownloadInterceptor.class, DownloadInterceptor.class);\n        container.register(MultipartInterceptor.class, MultipartInterceptor.class);\n        container.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class);\n        container.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class);\n        container.register(InstantiateInterceptor.class, InstantiateInterceptor.class);\n        container.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class);\n        container.register(ResourceRegistrar.class, ResourceRegistrar.class);\n        container.register(ComponentRegistrar.class, ComponentRegistrar.class);\n        container.register(InterceptorRegistrar.class, InterceptorRegistrar.class);\n        container.register(ConverterRegistrar.class, ConverterRegistrar.class);\n        container.register(ComponentFactoryRegistry.class, DefaultComponentFactoryRegistry.class);\n        container.register(ComponentFactoryRegistrar.class, ComponentFactoryRegistrar.class);\n    }\n\n    private void singleInterfaceRegister(Class<?> type, ComponentRegistry registry) {\n        Class<?>[] interfaces = type.getInterfaces();\n        if (interfaces.length != 1) {\n            throw new IllegalArgumentException(\"Invalid registering of a type with more than one interface\"\n                    + \" being registered as a single interface component: \" + type.getName());\n        }\n        registry.register(interfaces[0], type);\n    }\n\n    public <T> T provideForRequest(RequestInfo request, Execution<T> execution) {\n        PicoBasedContainer container = null;\n        try {\n            container = getContainers().provide(request);\n            container.getContainer().start();\n            return execution.insideRequest(container);\n        } finally {\n            if (container != null) {\n                MutablePicoContainer picoContainer = container.getContainer();\n                picoContainer.stop();\n                picoContainer.dispose();\n            }\n        }\n    }\n\n    public void start(ServletContext context) {\n        registerBundledComponents(getContainers());\n        this.container.addComponent(context);\n        getContainers().init();\n\n        Scanner scanner = new ReflectionsScanner(context);\n        container.getComponent(ComponentRegistrar.class).registerFrom(scanner);\n        container.getComponent(ResourceRegistrar.class).registerFrom(scanner);\n        container.getComponent(InterceptorRegistrar.class).registerFrom(scanner);\n        container.getComponent(ConverterRegistrar.class).registerFrom(scanner);\n        container.getComponent(ComponentFactoryRegistrar.class).registerFrom(scanner);\n\n        container.start();\n    }\n\n    public void stop() {\n        container.stop();\n        container.dispose();\n    }\n\n    protected PicoContainersProvider getContainers() {\n        return this.container.getComponent(PicoContainersProvider.class);\n    }\n\n    protected MutablePicoContainer getContainer() {\n        return container;\n    }\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.extra.ForwardToDefaultViewInterceptor;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.OutjectResult;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.interceptor.multipart.DefaultMultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartInterceptor;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.view.DefaultLogicResult;\nimport br.com.caelum.vraptor.view.DefaultPageResult;\nimport br.com.caelum.vraptor.view.EmptyResult;\nimport br.com.caelum.vraptor.view.LogicResult;\nimport br.com.caelum.vraptor.view.PageResult;\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.servlet.ServletContext;\n\n/**\n * Managing internal components by using pico container.<br>\n * There is an extension point through the registerComponents method, which\n * allows one to give a customized container.\n *\n * @author Guilherme Silveira\n */\npublic class PicoProvider implements ContainerProvider {\n\n    private final MutablePicoContainer container;\n\n    private static final Logger logger = LoggerFactory.getLogger(PicoProvider.class);\n\n    public PicoProvider() {\n        this.container = new DefaultPicoContainer(new Caching(),\n                new JavaEE5LifecycleStrategy(new NullComponentMonitor()), null);\n        PicoContainersProvider containersProvider = new PicoContainersProvider(this.container);\n        this.container.addComponent(containersProvider);\n    }\n\n    /**\n     * Register extra components that your app wants to.\n     */\n    protected void registerBundledComponents(ComponentRegistry container) {\n        logger.debug(\"Registering base pico container related implementation components\");\n        for (Class<?> type : BaseComponents.getApplicationScoped()) {\n            singleInterfaceRegister(type, container);\n        }\n        for (Class<?> type : BaseComponents.getRequestScoped()) {\n            singleInterfaceRegister(type, container);\n        }\n        container.register(MultipartConfig.class, DefaultMultipartConfig.class);\n        container.register(ForwardToDefaultViewInterceptor.class, ForwardToDefaultViewInterceptor.class);\n        container.register(LogicResult.class, DefaultLogicResult.class);\n        container.register(PageResult.class, DefaultPageResult.class);\n        container.register(EmptyResult.class, EmptyResult.class);\n        container.register(OutjectResult.class, OutjectResult.class);\n        container.register(TypeCreator.class, AsmBasedTypeCreator.class);\n        container.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class);\n        container.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class);\n        container.register(InterceptorListPriorToExecutionExtractor.class,\n                InterceptorListPriorToExecutionExtractor.class);\n        container.register(DownloadInterceptor.class, DownloadInterceptor.class);\n        container.register(MultipartInterceptor.class, MultipartInterceptor.class);\n        container.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class);\n        container.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class);\n        container.register(InstantiateInterceptor.class, InstantiateInterceptor.class);\n        container.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class);\n        container.register(ResourceRegistrar.class, ResourceRegistrar.class);\n        container.register(InterceptorRegistrar.class, InterceptorRegistrar.class);\n        container.register(ConverterRegistrar.class, ConverterRegistrar.class);\n        container.register(ComponentFactoryRegistry.class, DefaultComponentFactoryRegistry.class);\n        container.register(ComponentFactoryRegistrar.class, ComponentFactoryRegistrar.class);\n    }\n\n    private void singleInterfaceRegister(Class<?> type, ComponentRegistry registry) {\n        Class<?>[] interfaces = type.getInterfaces();\n        if (interfaces.length != 1) {\n            throw new IllegalArgumentException(\"Invalid registering of a type with more than one interface\"\n                    + \" being registered as a single interface component: \" + type.getName());\n        }\n        registry.register(interfaces[0], type);\n    }\n\n    public <T> T provideForRequest(RequestInfo request, Execution<T> execution) {\n        PicoBasedContainer container = null;\n        try {\n            container = getContainers().provide(request);\n            container.getContainer().start();\n            return execution.insideRequest(container);\n        } finally {\n            if (container != null) {\n                MutablePicoContainer picoContainer = container.getContainer();\n                picoContainer.stop();\n                picoContainer.dispose();\n            }\n        }\n    }\n\n    public void start(ServletContext context) {\n        ComponentRegistry components = getContainers();\n        registerBundledComponents(components);\n\n        this.container.addComponent(context);\n\n        Scanner scanner = new ReflectionsScanner(context);\n        new ComponentRegistrar(components).registerFrom(scanner);\n\n        getContainers().init();\n\n        container.getComponent(ResourceRegistrar.class).registerFrom(scanner);\n        container.getComponent(InterceptorRegistrar.class).registerFrom(scanner);\n        container.getComponent(ConverterRegistrar.class).registerFrom(scanner);\n        container.getComponent(ComponentFactoryRegistrar.class).registerFrom(scanner);\n\n        container.start();\n    }\n\n    public void stop() {\n        container.stop();\n        container.dispose();\n    }\n\n    protected PicoContainersProvider getContainers() {\n        return this.container.getComponent(PicoContainersProvider.class);\n    }\n\n    protected MutablePicoContainer getContainer() {\n        return container;\n    }\n}\n","lineNo":147}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.ioc.GenericContainerTest;\nimport br.com.caelum.vraptor.ioc.WhatToDo;\nimport br.com.caelum.vraptor.test.HttpServletRequestMock;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\nimport org.jmock.Expectations;\nimport org.junit.Test;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class PicoProviderTest extends GenericContainerTest {\n    private int counter;\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void canProvidePicoSpecificApplicationScopedComponents() {\n        List<Class<?>> components = Arrays.asList(Scanner.class, ComponentRegistrar.class,\n                ComponentFactoryRegistrar.class, InterceptorRegistrar.class, ConverterRegistrar.class,\n                ResourceRegistrar.class);\n        checkAvailabilityFor(true, components);\n        mockery.assertIsSatisfied();\n    }\n\n    @Override\n    protected ContainerProvider getProvider() {\n        return new PicoProvider();\n    }\n\n    @Override\n    protected <T> T executeInsideRequest(WhatToDo<T> execution) {\n        HttpSessionMock session = new HttpSessionMock(context, \"session\" + ++counter);\n        HttpServletRequestMock request = new HttpServletRequestMock(session);\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"response\" + counter);\n        configureExpectations(request);\n        RequestInfo webRequest = new RequestInfo(context, request, response);\n        return execution.execute(webRequest, counter);\n    }\n\n    /**\n     * Children providers can set custom expectations on request.\n     */\n    protected void configureExpectations(HttpServletRequestMock request) {\n    }\n\n    /**\n     * Children providers can set custom expectations.\n     */\n    @Override\n    protected void configureExpectations() {\n        try {\n            mockery.checking(new Expectations() {\n                {\n                    File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n                    File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n                    tmp.mkdir();\n                    allowing(context).getRealPath(\"\");\n                    will(returnValue(tmp.getAbsolutePath()));\n                }\n            });\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.ioc.GenericContainerTest;\nimport br.com.caelum.vraptor.ioc.WhatToDo;\nimport br.com.caelum.vraptor.test.HttpServletRequestMock;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\nimport org.jmock.Expectations;\nimport org.junit.Test;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class PicoProviderTest extends GenericContainerTest {\n    private int counter;\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void canProvidePicoSpecificApplicationScopedComponents() {\n        List<Class<?>> components = Arrays.asList(Scanner.class, ComponentRegistrar.class,\n                ComponentFactoryRegistrar.class, InterceptorRegistrar.class, ConverterRegistrar.class,\n                ResourceRegistrar.class);\n        checkAvailabilityFor(true, components);\n        mockery.assertIsSatisfied();\n    }\n\n    @Override\n    protected ContainerProvider getProvider() {\n        return new PicoProvider();\n    }\n\n    @Override\n    protected <T> T executeInsideRequest(WhatToDo<T> execution) {\n        HttpSessionMock session = new HttpSessionMock(context, \"session\" + ++counter);\n        HttpServletRequestMock request = new HttpServletRequestMock(session);\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"response\" + counter);\n        configureExpectations(request);\n        RequestInfo webRequest = new RequestInfo(context, request, response);\n        return execution.execute(webRequest, counter);\n    }\n\n    /**\n     * Children providers can set custom expectations on request.\n     */\n    protected void configureExpectations(HttpServletRequestMock request) {\n    }\n\n    /**\n     * Children providers can set custom expectations.\n     */\n    @Override\n    protected void configureExpectations() {\n        try {\n            mockery.checking(new Expectations() {\n                {\n                    File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n                    File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n                    tmp.mkdir();\n                    File webInf = new File(tmp, \"WEB-INF\");\n                    webInf.mkdir();\n                    File webInfClasses = new File(webInf, \"classes\");\n                    webInfClasses.mkdir();\n\n                    allowing(context).getRealPath(\"/WEB-INF/classes/\");\n                    will(returnValue(webInfClasses.getAbsolutePath()));\n                }\n            });\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n","lineNo":90}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.ioc.GenericContainerTest;\nimport br.com.caelum.vraptor.ioc.WhatToDo;\nimport br.com.caelum.vraptor.test.HttpServletRequestMock;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\nimport org.jmock.Expectations;\nimport org.junit.Test;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class PicoProviderTest extends GenericContainerTest {\n    private int counter;\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void canProvidePicoSpecificApplicationScopedComponents() {\n        List<Class<?>> components = Arrays.asList(Scanner.class, ComponentRegistrar.class,\n                ComponentFactoryRegistrar.class, InterceptorRegistrar.class, ConverterRegistrar.class,\n                ResourceRegistrar.class);\n        checkAvailabilityFor(true, components);\n        mockery.assertIsSatisfied();\n    }\n\n    @Override\n    protected ContainerProvider getProvider() {\n        return new PicoProvider();\n    }\n\n    @Override\n    protected <T> T executeInsideRequest(WhatToDo<T> execution) {\n        HttpSessionMock session = new HttpSessionMock(context, \"session\" + ++counter);\n        HttpServletRequestMock request = new HttpServletRequestMock(session);\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"response\" + counter);\n        configureExpectations(request);\n        RequestInfo webRequest = new RequestInfo(context, request, response);\n        return execution.execute(webRequest, counter);\n    }\n\n    /**\n     * Children providers can set custom expectations on request.\n     */\n    protected void configureExpectations(HttpServletRequestMock request) {\n    }\n\n    /**\n     * Children providers can set custom expectations.\n     */\n    @Override\n    protected void configureExpectations() {\n        try {\n            mockery.checking(new Expectations() {\n                {\n                    File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n                    File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n                    tmp.mkdir();\n                    allowing(context).getRealPath(\"\");\n                    will(returnValue(tmp.getAbsolutePath()));\n                }\n            });\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.ioc.GenericContainerTest;\nimport br.com.caelum.vraptor.ioc.WhatToDo;\nimport br.com.caelum.vraptor.test.HttpServletRequestMock;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\nimport org.jmock.Expectations;\nimport org.junit.Test;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class PicoProviderTest extends GenericContainerTest {\n    private int counter;\n\n    @SuppressWarnings(\"unchecked\")\n    @Test\n    public void canProvidePicoSpecificApplicationScopedComponents() {\n        List<Class<?>> components = Arrays.asList(Scanner.class, ComponentRegistrar.class,\n                ComponentFactoryRegistrar.class, InterceptorRegistrar.class, ConverterRegistrar.class,\n                ResourceRegistrar.class);\n        checkAvailabilityFor(true, components);\n        mockery.assertIsSatisfied();\n    }\n\n    @Override\n    protected ContainerProvider getProvider() {\n        return new PicoProvider();\n    }\n\n    @Override\n    protected <T> T executeInsideRequest(WhatToDo<T> execution) {\n        HttpSessionMock session = new HttpSessionMock(context, \"session\" + ++counter);\n        HttpServletRequestMock request = new HttpServletRequestMock(session);\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"response\" + counter);\n        configureExpectations(request);\n        RequestInfo webRequest = new RequestInfo(context, request, response);\n        return execution.execute(webRequest, counter);\n    }\n\n    /**\n     * Children providers can set custom expectations on request.\n     */\n    protected void configureExpectations(HttpServletRequestMock request) {\n    }\n\n    /**\n     * Children providers can set custom expectations.\n     */\n    @Override\n    protected void configureExpectations() {\n        try {\n            mockery.checking(new Expectations() {\n                {\n                    File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n                    File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n                    tmp.mkdir();\n                    File webInf = new File(tmp, \"WEB-INF\");\n                    webInf.mkdir();\n                    File webInfClasses = new File(webInf, \"classes\");\n                    webInfClasses.mkdir();\n\n                    allowing(context).getRealPath(\"/WEB-INF/classes/\");\n                    will(returnValue(webInfClasses.getAbsolutePath()));\n                }\n            });\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n","lineNo":92}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.vraptor2;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.jmock.Expectations;\nimport org.junit.Test;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.ioc.GenericContainerTest;\nimport br.com.caelum.vraptor.ioc.WhatToDo;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\nimport br.com.caelum.vraptor.vraptor2.outject.OutjectionInterceptor;\n\npublic class ProviderTest extends GenericContainerTest {\n    private int counter;\n\n    @Test\n    public void canProvideVRaptor2SpecificApplicationScopedComponents() {\n        checkAvailabilityFor(true, Arrays.<Class<?>>asList(Config.class));\n    }\n\n    @Test\n    public void canProvideVRaptor2SpecificRequestScopedComponents() {\n        checkAvailabilityFor(false, Arrays.<Class<?>>asList(HibernateValidatorPluginInterceptor.class,\n                ValidatorInterceptor.class, ViewInterceptor.class, ComponentInfoProvider.class,\n                OutjectionInterceptor.class, AjaxInterceptor.class, ValidationErrors.class));\n    }\n\n    @Override\n\tprotected ContainerProvider getProvider() {\n        return new Provider();\n    }\n\n    @Override\n\tprotected <T> T executeInsideRequest(WhatToDo<T> execution) {\n        final HttpSessionMock session = new HttpSessionMock(context, \"session\" + ++counter);\n        final MutableRequest request = mockery.mock(MutableRequest.class, \"request\" + ++counter);\n        mockery.checking(new Expectations() {\n            {\n                allowing(request).getRequestURI(); will(returnValue(\"what.ever.request.uri\"));\n                allowing(request).getSession(); will(returnValue(session));\n                allowing(request).getParameterMap(); will(returnValue(new HashMap<Object, Object>()));\n                allowing(request).getParameter(\"view\"); will(returnValue(null));\n            }\n        });\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"response\" + counter);\n        RequestInfo webRequest = new RequestInfo(context, request, response);\n        return execution.execute(webRequest, counter);\n    }\n\n    @Override\n    protected void configureExpectations() {\n        try {\n            mockery.checking(new Expectations() {\n                {\n                    allowing(context).getRealPath(\"/WEB-INF/classes/vraptor.xml\");\n                    will(returnValue(\"non-existing-vraptor.xml\"));\n                    allowing(context).getRealPath(\"/WEB-INF/classes/views.properties\");\n                    will(returnValue(\"views.properties\"));\n\n                    File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n                    File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n                    tmp.mkdir();\n                    allowing(context).getRealPath(\"\");\n                    will(returnValue(tmp.getAbsolutePath()));\n                }\n            });\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.vraptor2;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.jmock.Expectations;\nimport org.junit.Test;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.ioc.GenericContainerTest;\nimport br.com.caelum.vraptor.ioc.WhatToDo;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\nimport br.com.caelum.vraptor.vraptor2.outject.OutjectionInterceptor;\n\npublic class ProviderTest extends GenericContainerTest {\n    private int counter;\n\n    @Test\n    public void canProvideVRaptor2SpecificApplicationScopedComponents() {\n        checkAvailabilityFor(true, Arrays.<Class<?>>asList(Config.class));\n    }\n\n    @Test\n    public void canProvideVRaptor2SpecificRequestScopedComponents() {\n        checkAvailabilityFor(false, Arrays.<Class<?>>asList(HibernateValidatorPluginInterceptor.class,\n                ValidatorInterceptor.class, ViewInterceptor.class, ComponentInfoProvider.class,\n                OutjectionInterceptor.class, AjaxInterceptor.class, ValidationErrors.class));\n    }\n\n    @Override\n\tprotected ContainerProvider getProvider() {\n        return new Provider();\n    }\n\n    @Override\n\tprotected <T> T executeInsideRequest(WhatToDo<T> execution) {\n        final HttpSessionMock session = new HttpSessionMock(context, \"session\" + ++counter);\n        final MutableRequest request = mockery.mock(MutableRequest.class, \"request\" + ++counter);\n        mockery.checking(new Expectations() {\n            {\n                allowing(request).getRequestURI(); will(returnValue(\"what.ever.request.uri\"));\n                allowing(request).getSession(); will(returnValue(session));\n                allowing(request).getParameterMap(); will(returnValue(new HashMap<Object, Object>()));\n                allowing(request).getParameter(\"view\"); will(returnValue(null));\n            }\n        });\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"response\" + counter);\n        RequestInfo webRequest = new RequestInfo(context, request, response);\n        return execution.execute(webRequest, counter);\n    }\n\n    @Override\n    protected void configureExpectations() {\n        try {\n            mockery.checking(new Expectations() {\n                {\n                    allowing(context).getRealPath(\"/WEB-INF/classes/vraptor.xml\");\n                    will(returnValue(\"non-existing-vraptor.xml\"));\n                    allowing(context).getRealPath(\"/WEB-INF/classes/views.properties\");\n                    will(returnValue(\"views.properties\"));\n\n                    File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n                    File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n                    tmp.mkdir();\n                    File webInf = new File(tmp, \"WEB-INF\");\n                    webInf.mkdir();\n                    File webInfClasses = new File(webInf, \"classes\");\n                    webInfClasses.mkdir();\n\n                    allowing(context).getRealPath(\"/WEB-INF/classes/\");\n                    will(returnValue(webInfClasses.getAbsolutePath()));\n                }\n            });\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n","lineNo":99}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.vraptor2;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.jmock.Expectations;\nimport org.junit.Test;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.ioc.GenericContainerTest;\nimport br.com.caelum.vraptor.ioc.WhatToDo;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\nimport br.com.caelum.vraptor.vraptor2.outject.OutjectionInterceptor;\n\npublic class ProviderTest extends GenericContainerTest {\n    private int counter;\n\n    @Test\n    public void canProvideVRaptor2SpecificApplicationScopedComponents() {\n        checkAvailabilityFor(true, Arrays.<Class<?>>asList(Config.class));\n    }\n\n    @Test\n    public void canProvideVRaptor2SpecificRequestScopedComponents() {\n        checkAvailabilityFor(false, Arrays.<Class<?>>asList(HibernateValidatorPluginInterceptor.class,\n                ValidatorInterceptor.class, ViewInterceptor.class, ComponentInfoProvider.class,\n                OutjectionInterceptor.class, AjaxInterceptor.class, ValidationErrors.class));\n    }\n\n    @Override\n\tprotected ContainerProvider getProvider() {\n        return new Provider();\n    }\n\n    @Override\n\tprotected <T> T executeInsideRequest(WhatToDo<T> execution) {\n        final HttpSessionMock session = new HttpSessionMock(context, \"session\" + ++counter);\n        final MutableRequest request = mockery.mock(MutableRequest.class, \"request\" + ++counter);\n        mockery.checking(new Expectations() {\n            {\n                allowing(request).getRequestURI(); will(returnValue(\"what.ever.request.uri\"));\n                allowing(request).getSession(); will(returnValue(session));\n                allowing(request).getParameterMap(); will(returnValue(new HashMap<Object, Object>()));\n                allowing(request).getParameter(\"view\"); will(returnValue(null));\n            }\n        });\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"response\" + counter);\n        RequestInfo webRequest = new RequestInfo(context, request, response);\n        return execution.execute(webRequest, counter);\n    }\n\n    @Override\n    protected void configureExpectations() {\n        try {\n            mockery.checking(new Expectations() {\n                {\n                    allowing(context).getRealPath(\"/WEB-INF/classes/vraptor.xml\");\n                    will(returnValue(\"non-existing-vraptor.xml\"));\n                    allowing(context).getRealPath(\"/WEB-INF/classes/views.properties\");\n                    will(returnValue(\"views.properties\"));\n\n                    File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n                    File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n                    tmp.mkdir();\n                    allowing(context).getRealPath(\"\");\n                    will(returnValue(tmp.getAbsolutePath()));\n                }\n            });\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.vraptor2;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.jmock.Expectations;\nimport org.junit.Test;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.ioc.GenericContainerTest;\nimport br.com.caelum.vraptor.ioc.WhatToDo;\nimport br.com.caelum.vraptor.test.HttpSessionMock;\nimport br.com.caelum.vraptor.vraptor2.outject.OutjectionInterceptor;\n\npublic class ProviderTest extends GenericContainerTest {\n    private int counter;\n\n    @Test\n    public void canProvideVRaptor2SpecificApplicationScopedComponents() {\n        checkAvailabilityFor(true, Arrays.<Class<?>>asList(Config.class));\n    }\n\n    @Test\n    public void canProvideVRaptor2SpecificRequestScopedComponents() {\n        checkAvailabilityFor(false, Arrays.<Class<?>>asList(HibernateValidatorPluginInterceptor.class,\n                ValidatorInterceptor.class, ViewInterceptor.class, ComponentInfoProvider.class,\n                OutjectionInterceptor.class, AjaxInterceptor.class, ValidationErrors.class));\n    }\n\n    @Override\n\tprotected ContainerProvider getProvider() {\n        return new Provider();\n    }\n\n    @Override\n\tprotected <T> T executeInsideRequest(WhatToDo<T> execution) {\n        final HttpSessionMock session = new HttpSessionMock(context, \"session\" + ++counter);\n        final MutableRequest request = mockery.mock(MutableRequest.class, \"request\" + ++counter);\n        mockery.checking(new Expectations() {\n            {\n                allowing(request).getRequestURI(); will(returnValue(\"what.ever.request.uri\"));\n                allowing(request).getSession(); will(returnValue(session));\n                allowing(request).getParameterMap(); will(returnValue(new HashMap<Object, Object>()));\n                allowing(request).getParameter(\"view\"); will(returnValue(null));\n            }\n        });\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"response\" + counter);\n        RequestInfo webRequest = new RequestInfo(context, request, response);\n        return execution.execute(webRequest, counter);\n    }\n\n    @Override\n    protected void configureExpectations() {\n        try {\n            mockery.checking(new Expectations() {\n                {\n                    allowing(context).getRealPath(\"/WEB-INF/classes/vraptor.xml\");\n                    will(returnValue(\"non-existing-vraptor.xml\"));\n                    allowing(context).getRealPath(\"/WEB-INF/classes/views.properties\");\n                    will(returnValue(\"views.properties\"));\n\n                    File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n                    File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n                    tmp.mkdir();\n                    File webInf = new File(tmp, \"WEB-INF\");\n                    webInf.mkdir();\n                    File webInfClasses = new File(webInf, \"classes\");\n                    webInfClasses.mkdir();\n\n                    allowing(context).getRealPath(\"/WEB-INF/classes/\");\n                    will(returnValue(webInfClasses.getAbsolutePath()));\n                }\n            });\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n","lineNo":101}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport javax.servlet.ServletContext;\n\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.extra.ForwardToDefaultViewInterceptor;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.OutjectResult;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.interceptor.multipart.DefaultMultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartInterceptor;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.view.DefaultLogicResult;\nimport br.com.caelum.vraptor.view.DefaultPageResult;\nimport br.com.caelum.vraptor.view.EmptyResult;\nimport br.com.caelum.vraptor.view.LogicResult;\nimport br.com.caelum.vraptor.view.PageResult;\n\n/**\n * Managing internal components by using pico container.<br>\n * There is an extension point through the registerComponents method, which\n * allows one to give a customized container.\n *\n * @author Guilherme Silveira\n */\npublic class PicoProvider implements ContainerProvider {\n\n\tprivate final MutablePicoContainer container;\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(PicoProvider.class);\n\n\tpublic PicoProvider() {\n\t\tthis.container = new DefaultPicoContainer(new Caching(), new JavaEE5LifecycleStrategy(\n\t\t\t\tnew NullComponentMonitor()), null);\n\t\tPicoContainersProvider containersProvider = new PicoContainersProvider(this.container);\n\t\tthis.container.addComponent(containersProvider);\n\t\tregisterComponents(getContainers());\n\t\tcontainersProvider.init();\n\t\t// TODO: cache\n\t}\n\n\t/**\n\t * Register extra components that your app wants to.\n\t */\n\tprotected void registerComponents(ComponentRegistry container) {\n\t\tlogger.debug(\"Registering base pico container related implementation components\");\n\t\tfor (Class<?> type : BaseComponents.getApplicationScoped()) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tfor (Class<?> type : BaseComponents.getRequestScoped()) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tfor (Class<?> type : new Class[] { DefaultDirScanner.class }) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tcontainer.register(MultipartConfig.class, DefaultMultipartConfig.class);\n\n\t\tcontainer.register(ForwardToDefaultViewInterceptor.class, ForwardToDefaultViewInterceptor.class);\n\t\tcontainer.register(LogicResult.class, DefaultLogicResult.class);\n\t\tcontainer.register(PageResult.class, DefaultPageResult.class);\n\t\tcontainer.register(EmptyResult.class, EmptyResult.class);\n\t\tcontainer.register(OutjectResult.class, OutjectResult.class);\n\t\tcontainer.register(TypeCreator.class, AsmBasedTypeCreator.class);\n\t\tcontainer.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class);\n\t\tcontainer.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class);\n\t\tcontainer.register(InterceptorListPriorToExecutionExtractor.class,\n\t\t\t\tInterceptorListPriorToExecutionExtractor.class);\n\t\tcontainer.register(DownloadInterceptor.class, DownloadInterceptor.class);\n\t\tcontainer.register(MultipartInterceptor.class, MultipartInterceptor.class);\n\t\tcontainer.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class);\n\t\tcontainer.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class);\n\t\tcontainer.register(InstantiateInterceptor.class, InstantiateInterceptor.class);\n\t\tcontainer.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class);\n\t\tcontainer.register(ResourceAcceptor.class, ResourceAcceptor.class);\n\t\tcontainer.register(ComponentAcceptor.class, ComponentAcceptor.class);\n\t\tcontainer.register(InterceptorAcceptor.class, InterceptorAcceptor.class);\n\t\tcontainer.register(ConverterAcceptor.class, ConverterAcceptor.class);\n\t\tcontainer.register(ComponentFactoryRegistry.class, DefaultComponentFactoryRegistry.class);\n\t\tcontainer.register(ComponentFactoryAcceptor.class, ComponentFactoryAcceptor.class);\n\t}\n\n\tprivate void singleInterfaceRegister(Class<?> type, ComponentRegistry registry) {\n\t\tClass<?>[] interfaces = type.getInterfaces();\n\t\tif (interfaces.length != 1) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid registering of a type with more than one interface\"\n\t\t\t\t\t+ \" being registered as a single interface component: \" + type.getName());\n\t\t}\n\t\tregistry.register(interfaces[0], type);\n\t}\n\n\tpublic <T> T provideForRequest(RequestInfo request, Execution<T> execution) {\n\t\tPicoBasedContainer container = null;\n\t\ttry {\n\t\t\tcontainer = getContainers().provide(request);\n\t\t\tcontainer.getContainer().start();\n\t\t\treturn execution.insideRequest(container);\n\t\t} finally {\n\t\t\tif (container != null) {\n\t\t\t\tcontainer.getContainer().dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void start(ServletContext context) {\n\t\tthis.container.addComponent(context);\n\n\t\tcontainer.start();\n\n\t\t// TODO: hack, it should load everything during a single scan, marking the classes\n\t\t// and then registering afterall.\n\n\t\tlogger.info(\"loading all @Components\");\n\t\tLoader componentLoader = new WebInfClassesScanner(context, container.getComponent(DirScanner.class), container.getComponent(ComponentAcceptor.class));\n \t\tcomponentLoader.loadAll();\n\n\t\tlogger.info(\"loading other stereotyped classes (resources, interceptors, converters  and factories\");\n\t\tAcceptor[] acceptors = {\n\t\t\t\tcontainer.getComponent(ResourceAcceptor.class),\n\t\t\t\tcontainer.getComponent(InterceptorAcceptor.class),\n\t\t\t\tcontainer.getComponent(ConverterAcceptor.class),\n\t\t\t\tcontainer.getComponent(ComponentFactoryAcceptor.class)\n\t\t};\n\n\t\tLoader loader = new WebInfClassesScanner(context, container.getComponent(DirScanner.class), acceptors);\n\t\tloader.loadAll();\n\t}\n\n\tpublic void stop() {\n\t\tcontainer.stop();\n\t\tcontainer.dispose();\n\t}\n\n\tprotected PicoContainersProvider getContainers() {\n\t\treturn this.container.getComponent(PicoContainersProvider.class);\n\t}\n\n\tprotected MutablePicoContainer getContainer() {\n\t\treturn container;\n\t}\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport javax.servlet.ServletContext;\n\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.extra.ForwardToDefaultViewInterceptor;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.OutjectResult;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.interceptor.multipart.DefaultMultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartInterceptor;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.view.DefaultLogicResult;\nimport br.com.caelum.vraptor.view.DefaultPageResult;\nimport br.com.caelum.vraptor.view.EmptyResult;\nimport br.com.caelum.vraptor.view.LogicResult;\nimport br.com.caelum.vraptor.view.PageResult;\n\n/**\n * Managing internal components by using pico container.<br>\n * There is an extension point through the registerComponents method, which\n * allows one to give a customized container.\n *\n * @author Guilherme Silveira\n */\npublic class PicoProvider implements ContainerProvider {\n\n\tprivate final MutablePicoContainer container;\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(PicoProvider.class);\n\n\tpublic PicoProvider() {\n\t\tthis.container = new DefaultPicoContainer(new Caching(), new JavaEE5LifecycleStrategy(\n\t\t\t\tnew NullComponentMonitor()), null);\n\t\tPicoContainersProvider containersProvider = new PicoContainersProvider(this.container);\n\t\tthis.container.addComponent(containersProvider);\n\t\tregisterComponents(getContainers());\n\t\tcontainersProvider.init();\n\t\t// TODO: cache\n\t}\n\n\t/**\n\t * Register extra components that your app wants to.\n\t */\n\tprotected void registerComponents(ComponentRegistry container) {\n\t\tlogger.debug(\"Registering base pico container related implementation components\");\n\t\tfor (Class<?> type : BaseComponents.getApplicationScoped()) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tfor (Class<?> type : BaseComponents.getRequestScoped()) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tfor (Class<?> type : new Class[] { DefaultDirScanner.class }) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tcontainer.register(MultipartConfig.class, DefaultMultipartConfig.class);\n\n\t\tcontainer.register(ForwardToDefaultViewInterceptor.class, ForwardToDefaultViewInterceptor.class);\n\t\tcontainer.register(LogicResult.class, DefaultLogicResult.class);\n\t\tcontainer.register(PageResult.class, DefaultPageResult.class);\n\t\tcontainer.register(EmptyResult.class, EmptyResult.class);\n\t\tcontainer.register(OutjectResult.class, OutjectResult.class);\n\t\tcontainer.register(TypeCreator.class, AsmBasedTypeCreator.class);\n\t\tcontainer.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class);\n\t\tcontainer.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class);\n\t\tcontainer.register(InterceptorListPriorToExecutionExtractor.class,\n\t\t\t\tInterceptorListPriorToExecutionExtractor.class);\n\t\tcontainer.register(DownloadInterceptor.class, DownloadInterceptor.class);\n\t\tcontainer.register(MultipartInterceptor.class, MultipartInterceptor.class);\n\t\tcontainer.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class);\n\t\tcontainer.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class);\n\t\tcontainer.register(InstantiateInterceptor.class, InstantiateInterceptor.class);\n\t\tcontainer.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class);\n\t\tcontainer.register(ResourceAcceptor.class, ResourceAcceptor.class);\n\t\tcontainer.register(ComponentAcceptor.class, ComponentAcceptor.class);\n\t\tcontainer.register(InterceptorAcceptor.class, InterceptorAcceptor.class);\n\t\tcontainer.register(ConverterAcceptor.class, ConverterAcceptor.class);\n\t\tcontainer.register(ComponentFactoryRegistry.class, DefaultComponentFactoryRegistry.class);\n\t\tcontainer.register(ComponentFactoryAcceptor.class, ComponentFactoryAcceptor.class);\n\t}\n\n\tprivate void singleInterfaceRegister(Class<?> type, ComponentRegistry registry) {\n\t\tClass<?>[] interfaces = type.getInterfaces();\n\t\tif (interfaces.length != 1) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid registering of a type with more than one interface\"\n\t\t\t\t\t+ \" being registered as a single interface component: \" + type.getName());\n\t\t}\n\t\tregistry.register(interfaces[0], type);\n\t}\n\n\tpublic <T> T provideForRequest(RequestInfo request, Execution<T> execution) {\n\t\tPicoBasedContainer container = null;\n\t\ttry {\n\t\t\tcontainer = getContainers().provide(request);\n\t\t\tcontainer.getContainer().start();\n\t\t\treturn execution.insideRequest(container);\n\t\t} finally {\n\t\t\tif (container != null) {\n\t\t\t\tMutablePicoContainer picoContainer = container.getContainer();\n\t\t\t\tpicoContainer.stop();\n\t\t\t\tpicoContainer.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void start(ServletContext context) {\n\t\tthis.container.addComponent(context);\n\n\t\tcontainer.start();\n\n\t\t// TODO: hack, it should load everything during a single scan, marking the classes\n\t\t// and then registering afterall.\n\n\t\tlogger.info(\"loading all @Components\");\n\t\tLoader componentLoader = new WebInfClassesScanner(context, container.getComponent(DirScanner.class), container.getComponent(ComponentAcceptor.class));\n \t\tcomponentLoader.loadAll();\n\n\t\tlogger.info(\"loading other stereotyped classes (resources, interceptors, converters  and factories\");\n\t\tAcceptor[] acceptors = {\n\t\t\t\tcontainer.getComponent(ResourceAcceptor.class),\n\t\t\t\tcontainer.getComponent(InterceptorAcceptor.class),\n\t\t\t\tcontainer.getComponent(ConverterAcceptor.class),\n\t\t\t\tcontainer.getComponent(ComponentFactoryAcceptor.class)\n\t\t};\n\n\t\tLoader loader = new WebInfClassesScanner(context, container.getComponent(DirScanner.class), acceptors);\n\t\tloader.loadAll();\n\t}\n\n\tpublic void stop() {\n\t\tcontainer.stop();\n\t\tcontainer.dispose();\n\t}\n\n\tprotected PicoContainersProvider getContainers() {\n\t\treturn this.container.getComponent(PicoContainersProvider.class);\n\t}\n\n\tprotected MutablePicoContainer getContainer() {\n\t\treturn container;\n\t}\n}\n","lineNo":148}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport javax.servlet.ServletContext;\n\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.extra.ForwardToDefaultViewInterceptor;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.OutjectResult;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.interceptor.multipart.DefaultMultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartInterceptor;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.view.DefaultLogicResult;\nimport br.com.caelum.vraptor.view.DefaultPageResult;\nimport br.com.caelum.vraptor.view.EmptyResult;\nimport br.com.caelum.vraptor.view.LogicResult;\nimport br.com.caelum.vraptor.view.PageResult;\n\n/**\n * Managing internal components by using pico container.<br>\n * There is an extension point through the registerComponents method, which\n * allows one to give a customized container.\n *\n * @author Guilherme Silveira\n */\npublic class PicoProvider implements ContainerProvider {\n\n\tprivate final MutablePicoContainer container;\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(PicoProvider.class);\n\n\tpublic PicoProvider() {\n\t\tthis.container = new DefaultPicoContainer(new Caching(), new JavaEE5LifecycleStrategy(\n\t\t\t\tnew NullComponentMonitor()), null);\n\t\tPicoContainersProvider containersProvider = new PicoContainersProvider(this.container);\n\t\tthis.container.addComponent(containersProvider);\n\t\tregisterComponents(getContainers());\n\t\tcontainersProvider.init();\n\t\t// TODO: cache\n\t}\n\n\t/**\n\t * Register extra components that your app wants to.\n\t */\n\tprotected void registerComponents(ComponentRegistry container) {\n\t\tlogger.debug(\"Registering base pico container related implementation components\");\n\t\tfor (Class<?> type : BaseComponents.getApplicationScoped()) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tfor (Class<?> type : BaseComponents.getRequestScoped()) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tfor (Class<?> type : new Class[] { DefaultDirScanner.class }) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tcontainer.register(MultipartConfig.class, DefaultMultipartConfig.class);\n\n\t\tcontainer.register(ForwardToDefaultViewInterceptor.class, ForwardToDefaultViewInterceptor.class);\n\t\tcontainer.register(LogicResult.class, DefaultLogicResult.class);\n\t\tcontainer.register(PageResult.class, DefaultPageResult.class);\n\t\tcontainer.register(EmptyResult.class, EmptyResult.class);\n\t\tcontainer.register(OutjectResult.class, OutjectResult.class);\n\t\tcontainer.register(TypeCreator.class, AsmBasedTypeCreator.class);\n\t\tcontainer.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class);\n\t\tcontainer.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class);\n\t\tcontainer.register(InterceptorListPriorToExecutionExtractor.class,\n\t\t\t\tInterceptorListPriorToExecutionExtractor.class);\n\t\tcontainer.register(DownloadInterceptor.class, DownloadInterceptor.class);\n\t\tcontainer.register(MultipartInterceptor.class, MultipartInterceptor.class);\n\t\tcontainer.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class);\n\t\tcontainer.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class);\n\t\tcontainer.register(InstantiateInterceptor.class, InstantiateInterceptor.class);\n\t\tcontainer.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class);\n\t\tcontainer.register(ResourceAcceptor.class, ResourceAcceptor.class);\n\t\tcontainer.register(ComponentAcceptor.class, ComponentAcceptor.class);\n\t\tcontainer.register(InterceptorAcceptor.class, InterceptorAcceptor.class);\n\t\tcontainer.register(ConverterAcceptor.class, ConverterAcceptor.class);\n\t\tcontainer.register(ComponentFactoryRegistry.class, DefaultComponentFactoryRegistry.class);\n\t\tcontainer.register(ComponentFactoryAcceptor.class, ComponentFactoryAcceptor.class);\n\t}\n\n\tprivate void singleInterfaceRegister(Class<?> type, ComponentRegistry registry) {\n\t\tClass<?>[] interfaces = type.getInterfaces();\n\t\tif (interfaces.length != 1) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid registering of a type with more than one interface\"\n\t\t\t\t\t+ \" being registered as a single interface component: \" + type.getName());\n\t\t}\n\t\tregistry.register(interfaces[0], type);\n\t}\n\n\tpublic <T> T provideForRequest(RequestInfo request, Execution<T> execution) {\n\t\treturn execution.insideRequest(getContainers().provide(request));\n\t}\n\n\tpublic void start(ServletContext context) {\n\t\tthis.container.addComponent(context);\n\n\t\tcontainer.start();\n\n\t\t// TODO: hack, it should load everything during a single scan, marking the classes\n\t\t// and then registering afterall.\n\n\t\tlogger.info(\"loading all @Components\");\n\t\tLoader componentLoader = new WebInfClassesScanner(context, container.getComponent(DirScanner.class), container.getComponent(ComponentAcceptor.class));\n \t\tcomponentLoader.loadAll();\n\n\t\tlogger.info(\"loading other stereotyped classes (resources, interceptors, converters  and factories\");\n\t\tAcceptor[] acceptors = {\n\t\t\t\tcontainer.getComponent(ResourceAcceptor.class),\n\t\t\t\tcontainer.getComponent(InterceptorAcceptor.class),\n\t\t\t\tcontainer.getComponent(ConverterAcceptor.class),\n\t\t\t\tcontainer.getComponent(ComponentFactoryAcceptor.class)\n\t\t};\n\n\t\tLoader loader = new WebInfClassesScanner(context, container.getComponent(DirScanner.class), acceptors);\n\t\tloader.loadAll();\n\t}\n\n\tpublic void stop() {\n\t\tcontainer.stop();\n\t\tcontainer.dispose();\n\t}\n\n\tprotected PicoContainersProvider getContainers() {\n\t\treturn this.container.getComponent(PicoContainersProvider.class);\n\t}\n\n\tprotected MutablePicoContainer getContainer() {\n\t\treturn container;\n\t}\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport javax.servlet.ServletContext;\n\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.core.BaseComponents;\nimport br.com.caelum.vraptor.core.Execution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.extra.ForwardToDefaultViewInterceptor;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.http.ognl.EmptyElementsRemoval;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.OutjectResult;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiatorInterceptor;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.interceptor.download.DownloadInterceptor;\nimport br.com.caelum.vraptor.interceptor.multipart.DefaultMultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartConfig;\nimport br.com.caelum.vraptor.interceptor.multipart.MultipartInterceptor;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.view.DefaultLogicResult;\nimport br.com.caelum.vraptor.view.DefaultPageResult;\nimport br.com.caelum.vraptor.view.EmptyResult;\nimport br.com.caelum.vraptor.view.LogicResult;\nimport br.com.caelum.vraptor.view.PageResult;\n\n/**\n * Managing internal components by using pico container.<br>\n * There is an extension point through the registerComponents method, which\n * allows one to give a customized container.\n *\n * @author Guilherme Silveira\n */\npublic class PicoProvider implements ContainerProvider {\n\n\tprivate final MutablePicoContainer container;\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(PicoProvider.class);\n\n\tpublic PicoProvider() {\n\t\tthis.container = new DefaultPicoContainer(new Caching(), new JavaEE5LifecycleStrategy(\n\t\t\t\tnew NullComponentMonitor()), null);\n\t\tPicoContainersProvider containersProvider = new PicoContainersProvider(this.container);\n\t\tthis.container.addComponent(containersProvider);\n\t\tregisterComponents(getContainers());\n\t\tcontainersProvider.init();\n\t\t// TODO: cache\n\t}\n\n\t/**\n\t * Register extra components that your app wants to.\n\t */\n\tprotected void registerComponents(ComponentRegistry container) {\n\t\tlogger.debug(\"Registering base pico container related implementation components\");\n\t\tfor (Class<?> type : BaseComponents.getApplicationScoped()) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tfor (Class<?> type : BaseComponents.getRequestScoped()) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tfor (Class<?> type : new Class[] { DefaultDirScanner.class }) {\n\t\t\tsingleInterfaceRegister(type, container);\n\t\t}\n\t\tcontainer.register(MultipartConfig.class, DefaultMultipartConfig.class);\n\n\t\tcontainer.register(ForwardToDefaultViewInterceptor.class, ForwardToDefaultViewInterceptor.class);\n\t\tcontainer.register(LogicResult.class, DefaultLogicResult.class);\n\t\tcontainer.register(PageResult.class, DefaultPageResult.class);\n\t\tcontainer.register(EmptyResult.class, EmptyResult.class);\n\t\tcontainer.register(OutjectResult.class, OutjectResult.class);\n\t\tcontainer.register(TypeCreator.class, AsmBasedTypeCreator.class);\n\t\tcontainer.register(EmptyElementsRemoval.class, EmptyElementsRemoval.class);\n\t\tcontainer.register(ParametersInstantiatorInterceptor.class, ParametersInstantiatorInterceptor.class);\n\t\tcontainer.register(InterceptorListPriorToExecutionExtractor.class,\n\t\t\t\tInterceptorListPriorToExecutionExtractor.class);\n\t\tcontainer.register(DownloadInterceptor.class, DownloadInterceptor.class);\n\t\tcontainer.register(MultipartInterceptor.class, MultipartInterceptor.class);\n\t\tcontainer.register(URLParameterExtractorInterceptor.class, URLParameterExtractorInterceptor.class);\n\t\tcontainer.register(ResourceLookupInterceptor.class, ResourceLookupInterceptor.class);\n\t\tcontainer.register(InstantiateInterceptor.class, InstantiateInterceptor.class);\n\t\tcontainer.register(ExecuteMethodInterceptor.class, ExecuteMethodInterceptor.class);\n\t\tcontainer.register(ResourceAcceptor.class, ResourceAcceptor.class);\n\t\tcontainer.register(ComponentAcceptor.class, ComponentAcceptor.class);\n\t\tcontainer.register(InterceptorAcceptor.class, InterceptorAcceptor.class);\n\t\tcontainer.register(ConverterAcceptor.class, ConverterAcceptor.class);\n\t\tcontainer.register(ComponentFactoryRegistry.class, DefaultComponentFactoryRegistry.class);\n\t\tcontainer.register(ComponentFactoryAcceptor.class, ComponentFactoryAcceptor.class);\n\t}\n\n\tprivate void singleInterfaceRegister(Class<?> type, ComponentRegistry registry) {\n\t\tClass<?>[] interfaces = type.getInterfaces();\n\t\tif (interfaces.length != 1) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid registering of a type with more than one interface\"\n\t\t\t\t\t+ \" being registered as a single interface component: \" + type.getName());\n\t\t}\n\t\tregistry.register(interfaces[0], type);\n\t}\n\n\tpublic <T> T provideForRequest(RequestInfo request, Execution<T> execution) {\n\t\tPicoBasedContainer container = null;\n\t\ttry {\n\t\t\tcontainer = getContainers().provide(request);\n\t\t\treturn execution.insideRequest(container);\n\t\t} finally {\n\t\t\tif (container != null) {\n\t\t\t\tcontainer.getContainer().dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void start(ServletContext context) {\n\t\tthis.container.addComponent(context);\n\n\t\tcontainer.start();\n\n\t\t// TODO: hack, it should load everything during a single scan, marking the classes\n\t\t// and then registering afterall.\n\n\t\tlogger.info(\"loading all @Components\");\n\t\tLoader componentLoader = new WebInfClassesScanner(context, container.getComponent(DirScanner.class), container.getComponent(ComponentAcceptor.class));\n \t\tcomponentLoader.loadAll();\n\n\t\tlogger.info(\"loading other stereotyped classes (resources, interceptors, converters  and factories\");\n\t\tAcceptor[] acceptors = {\n\t\t\t\tcontainer.getComponent(ResourceAcceptor.class),\n\t\t\t\tcontainer.getComponent(InterceptorAcceptor.class),\n\t\t\t\tcontainer.getComponent(ConverterAcceptor.class),\n\t\t\t\tcontainer.getComponent(ComponentFactoryAcceptor.class)\n\t\t};\n\n\t\tLoader loader = new WebInfClassesScanner(context, container.getComponent(DirScanner.class), acceptors);\n\t\tloader.loadAll();\n\t}\n\n\tpublic void stop() {\n\t\tcontainer.stop();\n\t\tcontainer.dispose();\n\t}\n\n\tprotected PicoContainersProvider getContainers() {\n\t\treturn this.container.getComponent(PicoContainersProvider.class);\n\t}\n\n\tprotected MutablePicoContainer getContainer() {\n\t\treturn container;\n\t}\n}\n","lineNo":141}
{"Smelly Sample":"package org.hamcrest;\n\nimport java.io.IOException;\nimport java.util.ResourceBundle;\n\n/**\n * A description which uses a resource bundle to i18n messages.\n * \n * @author guilherme silveira\n * \n */\npublic class ResourceBundleDescription extends BaseDescription {\n\n    private final Appendable out;\n\n    private final ResourceBundle bundle;\n\n    public ResourceBundleDescription(ResourceBundle bundle) {\n\t\tthis(bundle, new StringBuilder());\n\t}\n\n    public ResourceBundleDescription(ResourceBundle bundle, Appendable out) {\n\t\tthis.out = out;\n\t\tthis.bundle = bundle;\n\t}\n\n\t@Override\n    protected void append(char c) {\n        try {\n            out.append(c);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Could not write description\", e);\n        }\n    }\n\n\t/**\n\t * Append the String <var>str<\/var> to the description. The default\n\t * implementation passes every character to {@link #append(char)}. Override\n\t * in subclasses to provide an efficient implementation.\n\t */\n\t@Override\n\tprotected void append(String str) {\n\t\tdirectAppend(str);\n\t}\n\n\t@Override\n\tpublic Description appendText(String text) {\n\t\tint len = text.length();\n\t\tint st = 0;\n\t\tchar[] val = text.toCharArray();\n\n\t\twhile ((st < len) && (val[st] <= ' ')) {\n\t\t\tappend(val[st++]);\n\t\t}\n\t\twhile ((st < len) && (val[len - 1] <= ' ')) {\n\t\t\tlen--;\n\t\t}\n\t\tString parsed = ((st > 0) || (len < text.length())) ? text.substring(st, len) : text;\n\t\tif (parsed.length() != 0) {\n\t\t\tsuper.appendText(bundle.getString(parsed.replace(' ', '_')));\n\t\t}\n\t\twhile (len != text.length()) {\n\t\t\tappend(val[len++]);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n     * Appends the string straight to the buffer. \n     */\n\tprotected void directAppend(String str) {\n\t\ttry {\n\t\t\tout.append(str);\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Could not write description\", e);\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn out.toString();\n\t}\n\n}\n","Method after Refactoring":"package org.hamcrest;\n\nimport java.io.IOException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\n\n/**\n * A description which uses a resource bundle to i18n messages.\n * \n * @author guilherme silveira\n * \n */\npublic class ResourceBundleDescription extends BaseDescription {\n\n    private final Appendable out;\n\n    private final ResourceBundle bundle;\n\n    public ResourceBundleDescription(ResourceBundle bundle) {\n\t\tthis(bundle, new StringBuilder());\n\t}\n\n    public ResourceBundleDescription(ResourceBundle bundle, Appendable out) {\n\t\tthis.out = out;\n\t\tthis.bundle = bundle;\n\t}\n\n\t@Override\n    protected void append(char c) {\n        try {\n            out.append(c);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Could not write description\", e);\n        }\n    }\n\n\t/**\n\t * Append the String <var>str<\/var> to the description. The default\n\t * implementation passes every character to {@link #append(char)}. Override\n\t * in subclasses to provide an efficient implementation.\n\t */\n\t@Override\n\tprotected void append(String str) {\n\t\tdirectAppend(str);\n\t}\n\n\t@Override\n\tpublic Description appendText(String text) {\n\t\tint len = text.length();\n\t\tint st = 0;\n\t\tchar[] val = text.toCharArray();\n\n\t\twhile ((st < len) && (val[st] <= ' ')) {\n\t\t\tappend(val[st++]);\n\t\t}\n\t\twhile ((st < len) && (val[len - 1] <= ' ')) {\n\t\t\tlen--;\n\t\t}\n\t\tString parsed = ((st > 0) || (len < text.length())) ? text.substring(st, len) : text;\n\t\tif (parsed.length() != 0) {\n\t\t\tString keyValue = parsed.replace(' ', '_');\n\t\t\ttry {\n\t\t\t\tString value = bundle.getString(keyValue);\n\t\t\t\tsuper.appendText(value);\n\t\t\t} catch (MissingResourceException ex) {\n\t\t\t\tsuper.appendText(\"???\" + keyValue +\"???\");\n\t\t\t}\n\t\t}\n\t\twhile (len != text.length()) {\n\t\t\tappend(val[len++]);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n     * Appends the string straight to the buffer. \n     */\n\tprotected void directAppend(String str) {\n\t\ttry {\n\t\t\tout.append(str);\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Could not write description\", e);\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn out.toString();\n\t}\n\n}\n","lineNo":61}
{"Smelly Sample":"package org.hamcrest;\n\nimport java.io.IOException;\nimport java.util.ResourceBundle;\n\n/**\n * A description which uses a resource bundle to i18n messages.\n * \n * @author guilherme silveira\n * \n */\npublic class ResourceBundleDescription extends BaseDescription {\n\n    private final Appendable out;\n\n    private final ResourceBundle bundle;\n\n    public ResourceBundleDescription(ResourceBundle bundle) {\n\t\tthis(bundle, new StringBuilder());\n\t}\n\n    public ResourceBundleDescription(ResourceBundle bundle, Appendable out) {\n\t\tthis.out = out;\n\t\tthis.bundle = bundle;\n\t}\n\n\t@Override\n    protected void append(char c) {\n        try {\n            out.append(c);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Could not write description\", e);\n        }\n    }\n\n\t/**\n\t * Append the String <var>str<\/var> to the description. The default\n\t * implementation passes every character to {@link #append(char)}. Override\n\t * in subclasses to provide an efficient implementation.\n\t */\n\t@Override\n\tprotected void append(String str) {\n\t\tdirectAppend(str);\n\t}\n\n\t@Override\n\tpublic Description appendText(String text) {\n\t\tint len = text.length();\n\t\tint st = 0;\n\t\tchar[] val = text.toCharArray();\n\n\t\twhile ((st < len) && (val[st] <= ' ')) {\n\t\t\tappend(val[st++]);\n\t\t}\n\t\twhile ((st < len) && (val[len - 1] <= ' ')) {\n\t\t\tlen--;\n\t\t}\n\t\tString parsed = ((st > 0) || (len < text.length())) ? text.substring(st, len) : text;\n\t\tif (parsed.length() != 0) {\n\t\t\tsuper.appendText(bundle.getString(parsed.replace(' ', '_')));\n\t\t}\n\t\twhile (len != text.length()) {\n\t\t\tappend(val[len++]);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n     * Appends the string straight to the buffer. \n     */\n\tprotected void directAppend(String str) {\n\t\ttry {\n\t\t\tout.append(str);\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Could not write description\", e);\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn out.toString();\n\t}\n\n}\n","Method after Refactoring":"package org.hamcrest;\n\nimport java.io.IOException;\nimport java.util.MissingResourceException;\nimport java.util.ResourceBundle;\n\n/**\n * A description which uses a resource bundle to i18n messages.\n * \n * @author guilherme silveira\n * \n */\npublic class ResourceBundleDescription extends BaseDescription {\n\n    private final Appendable out;\n\n    private final ResourceBundle bundle;\n\n    public ResourceBundleDescription(ResourceBundle bundle) {\n\t\tthis(bundle, new StringBuilder());\n\t}\n\n    public ResourceBundleDescription(ResourceBundle bundle, Appendable out) {\n\t\tthis.out = out;\n\t\tthis.bundle = bundle;\n\t}\n\n\t@Override\n    protected void append(char c) {\n        try {\n            out.append(c);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Could not write description\", e);\n        }\n    }\n\n\t/**\n\t * Append the String <var>str<\/var> to the description. The default\n\t * implementation passes every character to {@link #append(char)}. Override\n\t * in subclasses to provide an efficient implementation.\n\t */\n\t@Override\n\tprotected void append(String str) {\n\t\tdirectAppend(str);\n\t}\n\n\t@Override\n\tpublic Description appendText(String text) {\n\t\tint len = text.length();\n\t\tint st = 0;\n\t\tchar[] val = text.toCharArray();\n\n\t\twhile ((st < len) && (val[st] <= ' ')) {\n\t\t\tappend(val[st++]);\n\t\t}\n\t\twhile ((st < len) && (val[len - 1] <= ' ')) {\n\t\t\tlen--;\n\t\t}\n\t\tString parsed = ((st > 0) || (len < text.length())) ? text.substring(st, len) : text;\n\t\tif (parsed.length() != 0) {\n\t\t\tString keyValue = parsed.replace(' ', '_');\n\t\t\ttry {\n\t\t\t\tString value = bundle.getString(keyValue);\n\t\t\t\tsuper.appendText(value);\n\t\t\t} catch (MissingResourceException ex) {\n\t\t\t\tsuper.appendText(\"???\" + keyValue +\"???\");\n\t\t\t}\n\t\t}\n\t\twhile (len != text.length()) {\n\t\t\tappend(val[len++]);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n     * Appends the string straight to the buffer. \n     */\n\tprotected void directAppend(String str) {\n\t\ttry {\n\t\t\tout.append(str);\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(\"Could not write description\", e);\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn out.toString();\n\t}\n\n}\n","lineNo":63}
{"Smelly Sample":"/***\n *\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport br.com.caelum.vraptor.eval.Evaluator;\nimport br.com.caelum.vraptor.http.MutableRequest;\n\n/**\n * Default implmeentation of parameters control on uris.\n *\n * @author guilherme silveira\n */\npublic class DefaultParametersControl implements ParametersControl {\n\n\tprivate final List<String> parameters = new ArrayList<String>();\n\tprivate final Pattern pattern;\n\tprivate final String originalPattern;\n\n\tpublic DefaultParametersControl(String originalPattern) {\n\t\tthis.originalPattern = originalPattern;\n\t\tString patternUri = originalPattern\n\t\t\t.replaceAll(\"\\\\{([^\\\\}]+?)\\\\*\\\\}\", \"(.*)\")\n\t\t\t.replaceAll(\"\\\\{([^\\\\}]+?)\\\\}\", \"([^/]*)\");\n\t\tMatcher matcher = Pattern.compile(\"\\\\{([^\\\\}]+?)\\\\}\").matcher(originalPattern);\n\t\twhile(matcher.find()) {\n\t\t\tparameters.add(matcher.group(1).replace(\"*\", \"\"));\n\t\t}\n\t\tthis.pattern = Pattern.compile(patternUri);\n\t}\n\n\tpublic String fillUri(Object params) {\n\t\tString base = originalPattern.replaceAll(\"\\\\.\\\\*\", \"\");\n\t\tfor (String key : parameters) {\n\t\t\tObject result = new Evaluator().get(params, key);\n\t\t\tbase = base.replace(\"{\" + key + \"}\", result == null ? \"\" : result.toString());\n\t\t}\n\t\treturn base;\n\t}\n\n\tpublic boolean matches(String uri) {\n\t\treturn pattern.matcher(uri).matches();\n\t}\n\n\tpublic void fillIntoRequest(String uri, MutableRequest request) {\n\t\tMatcher m = pattern.matcher(uri);\n\t\tm.matches();\n\t\tfor (int i = 1; i <= m.groupCount(); i++) {\n\t\t\tString name = parameters.get(i - 1);\n\t\t\trequest.setParameter(name, m.group(i));\n\t\t}\n\t}\n\n\tpublic String apply(String[] values) {\n\t\tPattern regex = Pattern.compile(\"\\\\{.*?\\\\}\"); // the pattern object is\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// NOT thread safe\n\t\tMatcher matcher = regex.matcher(this.originalPattern);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < values.length; i++) {\n\t\t\tmatcher.find();\n\t\t\tmatcher.appendReplacement(result, values[i].replaceAll(\"\\\\$\", \"\\\\\\\\\\\\$\"));\n\t\t}\n\t\treturn result.toString();\n\t}\n\n}\n","Method after Refactoring":"/***\n *\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.eval.Evaluator;\nimport br.com.caelum.vraptor.http.MutableRequest;\n\n/**\n * Default implmeentation of parameters control on uris.\n *\n * @author guilherme silveira\n */\npublic class DefaultParametersControl implements ParametersControl {\n\n\tprivate final Logger logger = LoggerFactory.getLogger(DefaultParametersControl.class);\n\tprivate final List<String> parameters = new ArrayList<String>();\n\tprivate final Pattern pattern;\n\tprivate final String originalPattern;\n\n\tpublic DefaultParametersControl(String originalPattern) {\n\t\tthis.originalPattern = originalPattern;\n\t\tString patternUri = originalPattern\n\t\t\t.replaceAll(\"\\\\{([^\\\\}]+?)\\\\*\\\\}\", \"(.*)\")\n\t\t\t.replaceAll(\"\\\\{([^\\\\}]+?)\\\\}\", \"([^/]*)\");\n\t\tMatcher matcher = Pattern.compile(\"\\\\{([^\\\\}]+?)\\\\}\").matcher(originalPattern);\n\t\twhile(matcher.find()) {\n\t\t\tString value = matcher.group(1).replace(\"*\", \"\");\n\t\t\tparameters.add(value);\n\t\t}\n\t\tthis.pattern = Pattern.compile(patternUri);\n\t\tlogger.debug(\"For \" + originalPattern + \" retrieved \" + patternUri + \" with \"+ parameters);\n\t}\n\n\tpublic String fillUri(Object params) {\n\t\tString base = originalPattern.replaceAll(\"\\\\.\\\\*\", \"\");\n\t\tfor (String key : parameters) {\n\t\t\tObject result = new Evaluator().get(params, key);\n\t\t\tbase = base.replace(\"{\" + key + \"}\", result == null ? \"\" : result.toString());\n\t\t}\n\t\treturn base;\n\t}\n\n\tpublic boolean matches(String uri) {\n\t\treturn pattern.matcher(uri).matches();\n\t}\n\n\tpublic void fillIntoRequest(String uri, MutableRequest request) {\n\t\tMatcher m = pattern.matcher(uri);\n\t\tm.matches();\n\t\tfor (int i = 1; i <= m.groupCount(); i++) {\n\t\t\tString name = parameters.get(i - 1);\n\t\t\trequest.setParameter(name, m.group(i));\n\t\t}\n\t}\n\n\tpublic String apply(String[] values) {\n\t\tPattern regex = Pattern.compile(\"\\\\{.*?\\\\}\"); // the pattern object is\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// NOT thread safe\n\t\tMatcher matcher = regex.matcher(this.originalPattern);\n\t\tStringBuffer result = new StringBuffer();\n\t\tfor (int i = 0; i < values.length; i++) {\n\t\t\tmatcher.find();\n\t\t\tmatcher.appendReplacement(result, values[i].replaceAll(\"\\\\$\", \"\\\\\\\\\\\\$\"));\n\t\t}\n\t\treturn result.toString();\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"/download/project/{project.name}/build/{buildId}/view/{filename*}\"\n\t\t\t.replaceAll(\"\\\\{([^\\\\}]+?)\\\\*\\\\}\", \"(.*)\").replaceAll(\"\\\\{([^\\\\}]+?)\\\\}\", \"([^/]*)\"));\n\t\t//System.out.println(Pattern.matches(\"/download/project/([^/]*)/build/([^/]*)/view/([^/]*)\").\"/download/project/xpto/build/2/view/a/b/c\");\n\t}\n\n}\n","lineNo":59}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.view;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * The default vraptor3 path resolver uses the type and method name as\n * \"/TypeName/methodName.result.jsp\".\n * \n * @author Guilherme Silveira\n */\n@RequestScoped\npublic class DefaultPathResolver implements PathResolver {\n\n\tprivate final HttpServletRequest request;\n\n\tpublic DefaultPathResolver(HttpServletRequest request) {\n\t\tthis.request = request;\n\t}\n\n\tpublic String pathFor(ResourceMethod method) {\n\t\tString format = request.getParameter(\"_format\");\n\t\tString suffix = \"\";\n\t\tif (format != null && !format.equals(\"html\")) {\n\t\t\tsuffix = \".\" + format;\n\t\t}\n\t\treturn \"/\" + method.getResource().getType().getSimpleName() + \"/\" + method.getMethod().getName() + suffix\n\t\t\t\t+ \".jsp\";\n\t}\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.view;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * The default vraptor3 path resolver uses the type and method name as\n * \"/TypeName/methodName.result.jsp\".\n *\n * @author Guilherme Silveira\n */\n@RequestScoped\npublic class DefaultPathResolver implements PathResolver {\n\n\tprivate final HttpServletRequest request;\n\n\tpublic DefaultPathResolver(HttpServletRequest request) {\n\t\tthis.request = request;\n\t}\n\n\tpublic String pathFor(ResourceMethod method) {\n\t\tString format = request.getParameter(\"_format\");\n\t\tString suffix = \"\";\n\t\tif (format != null && !format.equals(\"html\")) {\n\t\t\tsuffix = \".\" + format;\n\t\t}\n        String name = method.getResource().getType().getSimpleName();\n        String folderName = extractControllerFromName(name);\n\t\treturn \"/\" + folderName + \"/\" + method.getMethod().getName() + suffix\n\t\t\t\t+ \".jsp\";\n\t}\n\n    private String extractControllerFromName(String baseName) {\n        baseName = lowerFirstCharacter(baseName);\n        if (baseName.endsWith(\"Controller\")) {\n            return \"/\" + baseName.substring(0, baseName.lastIndexOf(\"Controller\"));\n        }\n        return \"/\" + baseName;\n    }\n\n    private String lowerFirstCharacter(String baseName) {\n        return baseName.toLowerCase().substring(0, 1) + baseName.substring(1, baseName.length());\n    }\n}\n","lineNo":58}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.view;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * The default vraptor3 path resolver uses the type and method name as\n * \"/TypeName/methodName.result.jsp\".\n * \n * @author Guilherme Silveira\n */\n@RequestScoped\npublic class DefaultPathResolver implements PathResolver {\n\n\tprivate final HttpServletRequest request;\n\n\tpublic DefaultPathResolver(HttpServletRequest request) {\n\t\tthis.request = request;\n\t}\n\n\tpublic String pathFor(ResourceMethod method) {\n\t\tString format = request.getParameter(\"_format\");\n\t\tString suffix = \"\";\n\t\tif (format != null && !format.equals(\"html\")) {\n\t\t\tsuffix = \".\" + format;\n\t\t}\n\t\treturn \"/\" + method.getResource().getType().getSimpleName() + \"/\" + method.getMethod().getName() + suffix\n\t\t\t\t+ \".jsp\";\n\t}\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.view;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport br.com.caelum.vraptor.ioc.RequestScoped;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * The default vraptor3 path resolver uses the type and method name as\n * \"/TypeName/methodName.result.jsp\".\n *\n * @author Guilherme Silveira\n */\n@RequestScoped\npublic class DefaultPathResolver implements PathResolver {\n\n\tprivate final HttpServletRequest request;\n\n\tpublic DefaultPathResolver(HttpServletRequest request) {\n\t\tthis.request = request;\n\t}\n\n\tpublic String pathFor(ResourceMethod method) {\n\t\tString format = request.getParameter(\"_format\");\n\t\tString suffix = \"\";\n\t\tif (format != null && !format.equals(\"html\")) {\n\t\t\tsuffix = \".\" + format;\n\t\t}\n        String name = method.getResource().getType().getSimpleName();\n        String folderName = extractControllerFromName(name);\n\t\treturn \"/\" + folderName + \"/\" + method.getMethod().getName() + suffix\n\t\t\t\t+ \".jsp\";\n\t}\n\n    private String extractControllerFromName(String baseName) {\n        baseName = lowerFirstCharacter(baseName);\n        if (baseName.endsWith(\"Controller\")) {\n            return \"/\" + baseName.substring(0, baseName.lastIndexOf(\"Controller\"));\n        }\n        return \"/\" + baseName;\n    }\n\n    private String lowerFirstCharacter(String baseName) {\n        return baseName.toLowerCase().substring(0, 1) + baseName.substring(1, baseName.length());\n    }\n}\n","lineNo":59}
{"Smelly Sample":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.util.Set;\n\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.resource.DefaultResource;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * A route strategy which invokes a fixed type's method.\n * \n * @author guilherme silveira\n */\npublic class FixedMethodStrategy implements Route {\n\t\n\tprivate final ResourceMethod resourceMethod;\n\n\tprivate final Set<HttpMethod> methods;\n\n\tprivate final ParametersControl parameters;\n\n\tpublic FixedMethodStrategy(String originalUri, Class<?> type, Method method, Set<HttpMethod> methods, ParametersControl control) {\n\t\tthis.methods = methods;\n\t\tthis.parameters = control;\n\t\tthis.resourceMethod = new DefaultResourceMethod(new DefaultResource(type), method);\n\t}\n\t\n\tpublic Resource getResource() {\n\t\treturn this.resourceMethod.getResource();\n\t}\n\n\tpublic boolean canHandle(Class<?> type, Method method) {\n\t\treturn type.equals(this.resourceMethod.getResource().getType()) && method.equals(this.resourceMethod.getMethod());\n\t}\n\n\tpublic ResourceMethod matches(String uri, HttpMethod method, MutableRequest request) {\n\t\tboolean acceptMethod = this.methods.isEmpty() || this.methods.contains(method);\n\t\tboolean uriMatches = parameters.matches(uri);\n\t\treturn uriMatches && acceptMethod ? this.resourceMethod : null;\n\t}\n\n\tpublic String urlFor(Class<?> type, Method m, Object params) {\n\t\treturn parameters.fillUri(params);\n\t}\n\n}\n","Method after Refactoring":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.util.Set;\n\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.resource.DefaultResource;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * A route strategy which invokes a fixed type's method.\n * \n * @author guilherme silveira\n */\npublic class FixedMethodStrategy implements Route {\n\t\n\tprivate final ResourceMethod resourceMethod;\n\n\tprivate final Set<HttpMethod> methods;\n\n\tprivate final ParametersControl parameters;\n\n\tpublic FixedMethodStrategy(String originalUri, Class<?> type, Method method, Set<HttpMethod> methods, ParametersControl control) {\n\t\tthis.methods = methods;\n\t\tthis.parameters = control;\n\t\tthis.resourceMethod = new DefaultResourceMethod(new DefaultResource(type), method);\n\t}\n\t\n\tpublic Resource getResource() {\n\t\treturn this.resourceMethod.getResource();\n\t}\n\n\tpublic boolean canHandle(Class<?> type, Method method) {\n\t\treturn type.equals(this.resourceMethod.getResource().getType()) && method.equals(this.resourceMethod.getMethod());\n\t}\n\n\tpublic ResourceMethod matches(String uri, HttpMethod method, MutableRequest request) {\n\t\tboolean acceptMethod = this.methods.isEmpty() || this.methods.contains(method);\n\t\tboolean uriMatches = parameters.matches(uri);\n\t\tboolean matches = uriMatches && acceptMethod;\n\t\tif(matches) {\n\t\t\tparameters.fillIntoRequest(uri, request);\n\t\t}\n\t\treturn matches ? this.resourceMethod : null;\n\t}\n\n\tpublic String urlFor(Class<?> type, Method m, Object params) {\n\t\treturn parameters.fillUri(params);\n\t}\n\n}\n","lineNo":70}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.vraptor2;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.vraptor2.outject.JsonOutjecter;\nimport org.vraptor.annotations.Remotable;\nimport org.vraptor.annotations.Viewless;\nimport org.vraptor.remote.json.JSONSerializer;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n/**\n * VRaptor2 based ajax interceptor.<br>\n * Only outjects data if its not a viewless method.\n *\n * @author Guilherme Silveira\n */\npublic class AjaxInterceptor implements Interceptor {\n\n    private static final String UTF8 = \"UTF-8\";\n\n    private final ComponentInfoProvider info;\n\n    private final HttpServletResponse response;\n\n    public AjaxInterceptor(HttpServletResponse response, ComponentInfoProvider info) {\n        this.response = response;\n        this.info = info;\n\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        // TODO this is not invoked as automatically loaded thorugh\n        // RequestExecution\n        // it should be included on the ExtractorList so would not be invoked?\n        return info.isAjax();\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n            throws InterceptionException {\n        if (!method.getMethod().isAnnotationPresent(Viewless.class) && info.isAjax()) {\n            if (!method.getMethod().isAnnotationPresent(Remotable.class)) {\n                throw new InterceptionException(\"Unable to make an ajax result in a non-remotable method.\");\n            }\n            int depth = method.getMethod().getAnnotation(Remotable.class).depth();\n            JsonOutjecter outjecter = (JsonOutjecter) info.getOutjecter();\n            CharSequence output = new JSONSerializer(depth).serialize(outjecter.contents());\n            response.setCharacterEncoding(UTF8);\n            response.setContentType(\"application/json\");\n\n            try {\n                PrintWriter writer = response.getWriter();\n                writer.append(output);\n                writer.flush();\n                writer.close();\n            } catch (IOException e) {\n                throw new InterceptionException(e);\n            }\n        } else {\n            stack.next(method, resourceInstance);\n        }\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.vraptor2;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.vraptor2.outject.JsonOutjecter;\nimport org.vraptor.annotations.Remotable;\nimport org.vraptor.annotations.Viewless;\nimport org.vraptor.remote.json.JSONSerializer;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n/**\n * VRaptor2 based ajax interceptor.<br>\n * Only outjects data if its not a viewless method.\n *\n * @author Guilherme Silveira\n */\npublic class AjaxInterceptor implements Interceptor {\n\n    private static final String UTF8 = \"UTF-8\";\n\n    private final ComponentInfoProvider info;\n\n    private final HttpServletResponse response;\n\n    public AjaxInterceptor(HttpServletResponse response, ComponentInfoProvider info) {\n        this.response = response;\n        this.info = info;\n\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        // TODO this is not invoked as automatically loaded thorugh\n        // RequestExecution\n        // it should be included on the ExtractorList so would not be invoked?\n        return info.isAjax();\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n            throws InterceptionException {\n        boolean isViewless = method.getMethod().isAnnotationPresent(Viewless.class);\n\t\tif (!isViewless && info.isAjax()) {\n            if (!method.getMethod().isAnnotationPresent(Remotable.class)) {\n                throw new InterceptionException(\"Unable to make an ajax result in a non-remotable method.\");\n            }\n            int depth = method.getMethod().getAnnotation(Remotable.class).depth();\n            JsonOutjecter outjecter = (JsonOutjecter) info.getOutjecter();\n            CharSequence output = new JSONSerializer(depth).serialize(outjecter.contents());\n            response.setCharacterEncoding(UTF8);\n            response.setContentType(\"application/json\");\n\n            try {\n                PrintWriter writer = response.getWriter();\n                writer.append(output);\n                writer.flush();\n                writer.close();\n            } catch (IOException e) {\n                throw new InterceptionException(e);\n            }\n        } else {\n            stack.next(method, resourceInstance);\n        }\n    }\n\n}\n","lineNo":72}
{"Smelly Sample":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.vraptor2;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodInfo;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.PageResult;\n\n/**\n * The vraptor 2 compatible view interceptor\n * \n * @author guilherme silveira\n */\npublic class ViewInterceptor implements Interceptor {\n\n\tprivate final MethodInfo reqResult;\n\tprivate final PageResult result;\n\tprivate final ComponentInfoProvider info;\n\n\tpublic ViewInterceptor(PageResult result, MethodInfo reqResult, ComponentInfoProvider info) {\n\t\tthis.result = result;\n\t\tthis.reqResult = reqResult;\n\t\tthis.info = info;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn true;\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tif(Info.isOldComponent(method.getResource())) {\n\t\t\tif ( info.shouldShowView(method)) {\n\t\t\t\tthis.result.forward(reqResult.getResult().toString());\n\t\t\t}\n\t\t} else {\n\t\t\tstack.next(method, resourceInstance);\n\t\t}\n\t}\n\n}\n","Method after Refactoring":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.vraptor2;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.PageResult;\n\n/**\n * The vraptor 2 compatible view interceptor.\n * \n * @author guilherme silveira\n */\npublic class ViewInterceptor implements Interceptor {\n\n\tprivate final PageResult result;\n\tprivate final ComponentInfoProvider info;\n\n\tpublic ViewInterceptor(PageResult result, ComponentInfoProvider info) {\n\t\tthis.result = result;\n\t\tthis.info = info;\n\t}\n\n\tpublic boolean accepts(ResourceMethod method) {\n\t\treturn true;\n\t}\n\n\tpublic void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n\t\t\tthrows InterceptionException {\n\t\tboolean vraptor2 = Info.isOldComponent(method.getResource());\n\t\tif(vraptor2) {\n\t\t\tif (info.shouldShowView(method)) {\n\t\t\t\tthis.result.forward();\n\t\t\t}\n\t\t} else {\n\t\t\tstack.next(method, resourceInstance);\n\t\t}\n\t}\n\n}\n","lineNo":57}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.util.Set;\n\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.resource.DefaultResource;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * A strategy which returns the resource method based on a url pattern.\n *\n * @author guilherme silveira\n */\npublic class PatternBasedStrategy implements Route {\n\n\tprivate final PatternBasedType type;\n\tprivate final PatternBasedType method;\n\tprivate final Set<HttpMethod> methods;\n\tprivate final ParametersControl control;\n\n\tpublic PatternBasedStrategy(PatternBasedType type, PatternBasedType method, Set<HttpMethod> methods, ParametersControl control) {\n\t\tthis.type = type;\n\t\tthis.method = method;\n\t\tthis.methods = methods;\n\t\tthis.control = control;\n\t}\n\n\tpublic boolean canHandle(Class<?> type, Method method) {\n\t\treturn this.type.matches(type.getName()) && this.method.matches(method.getName());\n\t}\n\n\tpublic ResourceMethod matches(String uri, HttpMethod method, MutableRequest request) {\n\t\tboolean acceptMethod = this.methods.isEmpty() || this.methods.contains(method);\n\t\tboolean acceptUri = control.matches(uri);\n\t\tif(acceptUri && acceptMethod){\n\t\t\tString webLogic = request.getParameter(\"_webLogic\");\n\t\t\tString webMethod = request.getParameter(\"_webMethod\");\n\t\t\tDefaultResource resource = new DefaultResource(Class.forName(type.apply(\"webLogic\",webLogic)));\n\t\t\tMethod resourceMethod = method(resource.getType(), this.method.apply(\"webMethod\", webMethod));\n\t\t\treturn new DefaultResourceMethod(resource, resourceMethod);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate Method method(Class<?> type, String methodName) {\n\t\treturn null;\n\t}\n\n\tpublic String urlFor(Object params) {\n\t\treturn null;\n\t}\n\n\tpublic Resource getResource() {\n\t\treturn null;\n\t}\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\nimport java.util.Set;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.resource.DefaultResource;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * A strategy which returns the resource method based on a url pattern.\n *\n * @author guilherme silveira\n */\npublic class PatternBasedStrategy implements Route {\n\t\n\tprivate final Logger logger = LoggerFactory.getLogger(PatternBasedStrategy.class);\n\n\tprivate final PatternBasedType type;\n\tprivate final PatternBasedType method;\n\tprivate final Set<HttpMethod> methods;\n\n\tprivate final ParametersControl control;\n\n\tpublic PatternBasedStrategy(ParametersControl control, PatternBasedType type, PatternBasedType method, Set<HttpMethod> methods) {\n\t\tthis.control = control;\n\t\tthis.type = type;\n\t\tthis.method = method;\n\t\tthis.methods = methods;\n\t}\n\n\tpublic boolean canHandle(Class<?> type, Method method) {\n\t\treturn this.type.matches(type.getName()) && this.method.matches(method.getName());\n\t}\n\n\tpublic ResourceMethod matches(String uri, HttpMethod method, MutableRequest request) {\n\t\tboolean acceptMethod = this.methods.isEmpty() || this.methods.contains(method);\n\t\tboolean acceptUri = control.matches(uri);\n\t\tif(acceptUri && acceptMethod){\n\t\t\tcontrol.fillIntoRequest(uri, request);\n\t\t\tString webLogic = request.getParameter(\"webLogic\");\n\t\t\tString webMethod = request.getParameter(\"webMethod\");\n\t\t\tString typeName = type.apply(\"webLogic\",webLogic);\n\t\t\ttry {\n\t\t\t\tDefaultResource resource = new DefaultResource(Class.forName(typeName));\n\t\t\t\tMethod resourceMethod = method(resource.getType(), this.method.apply(\"webMethod\", webMethod));\n\t\t\t\treturn new DefaultResourceMethod(resource, resourceMethod);\n\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\tlogger.debug(\"Unable to find type \" + typeName + \" for strategy \" + this);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate Method method(Class<?> type, String methodName) {\n\t\tMethod[] methods = type.getDeclaredMethods();\n\t\tfor(Method m :methods) {\n\t\t\tif(m.getName().equals(methodName) && isEligible(m)) {\n\t\t\t\treturn m;\n\t\t\t}\n\t\t}\n\t\tif(type.getSuperclass().equals(Object.class)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn method(type.getSuperclass(), methodName);\n\t}\n\n\tprivate boolean isEligible(Method m) {\n\t\treturn Modifier.isPublic(m.getModifiers()) && !Modifier.isStatic(m.getModifiers());\n\t}\n\n\tpublic String urlFor(Object params) {\n\t\treturn null;\n\t}\n\n\tpublic Resource getResource() {\n\t\treturn null;\n\t}\n\n}\n","lineNo":77}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport java.lang.reflect.Method;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.hamcrest.Matchers;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.jmock.Expectations;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.DefaultProxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\n/**\n * Those are more likely to be acceptance than unit tests.\n * @author guilherme silveira\n */\npublic class DefaultRouterTest {\n\n\tprivate DefaultProxifier proxifier;\n\tprivate DefaultRouter router;\n\tprivate VRaptorMockery mockery;\n\tprivate VRaptorRequest request;\n\tprivate ParameterNameProvider provider;\n\tprivate TypeCreator creator;\n\tprivate ResourceMethod method;\n\n\t@org.junit.Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.provider = mockery.mock(ParameterNameProvider.class);\n\t\tthis.creator = mockery.mock(TypeCreator.class);\n\t\tthis.proxifier = new DefaultProxifier();\n\t\tthis.method = mockery.mock(ResourceMethod.class);\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new NoRoutesParser(), provider, proxifier, creator);\n\t}\n\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tone(route).matches(\"/clients/add\", HttpMethod.POST, request);\n\t\t\twill(returnValue(method));\n\t\t\tone(route).getResource(); will(returnValue(null));\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t@Test\n\tpublic void passesTheWebMethod() throws SecurityException, NoSuchMethodException {\n\t\tfinal HttpMethod delete = HttpMethod.DELETE;\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tone(route).matches(\"/clients/add\", delete, request);\n\t\t\twill(returnValue(method));\n\t\t\tone(route).getResource(); will(returnValue(null));\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", delete, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tmockery.checking(new Expectations() {{\n\t\t\tone(route).matches(\"/clients/add\", HttpMethod.POST, request);\n\t\t\twill(returnValue(method));\n\t\t\tone(route).getResource(); will(returnValue(null));\n\t\t\tone(second).getResource(); will(returnValue(null));\n\t\t}});\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\tprivate Method method(String methodName, Class<?>... params) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(methodName, params);\n\t}\n\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\n\n\n\n\n\t@Test\n\tpublic void testReturnsNullIfResourceNotFound() {\n\t\tResourceMethod method = router.parse(\"unknown_id\", HttpMethod.POST, null);\n\t\tassertThat(method, is(Matchers.nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRegisterVRaptorInfoByDefault() throws SecurityException, NoSuchMethodException {\n\t\tResourceMethod methodFound = router.parse(\"/is_using_vraptor\", HttpMethod.GET, null);\n\t\tTypeSafeMatcher<ResourceMethod> expectedMethod = VRaptorMatchers.resourceMethod(VRaptorInfo.class\n\t\t\t\t.getMethod(\"info\"));\n\t\tassertThat(methodFound, is(expectedMethod));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal ResourceMethod resourceMethod = mockery.methodFor(MyResource.class, \"starPath\");\n\t\tfinal Method method = resourceMethod.getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\trouter.register(mockery.resource(InheritanceExample.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"notAnnotated\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"customizedPath\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canAccessGenericTypeAndMethodRoute() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"--(*)--(*)\").is(type(\"br.com.caelum.vraptor.http.route.{1}\"), method(\"{2}\"));\n\t\t\t}\n\t\t};\n\t\tResourceMethod resourceMethod = router.parse(\"--MyResource--notAnnotated\", HttpMethod.GET, request);\n\t\tassertThat(resourceMethod.getMethod(), is(equalTo(MyResource.class.getDeclaredMethod(\"notAnnotated\"))));\n\t\tString url = router.urlFor(MyResource.class, resourceMethod.getMethod(), new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(resourceMethod.getMethod())));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport java.lang.reflect.Method;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.hamcrest.Matchers;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.jmock.Expectations;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.DefaultProxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\n/**\n * Those are more likely to be acceptance than unit tests.\n * @author guilherme silveira\n */\npublic class DefaultRouterTest {\n\n\tprivate DefaultProxifier proxifier;\n\tprivate DefaultRouter router;\n\tprivate VRaptorMockery mockery;\n\tprivate VRaptorRequest request;\n\tprivate ParameterNameProvider provider;\n\tprivate TypeCreator creator;\n\tprivate ResourceMethod method;\n\n\t@org.junit.Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.provider = mockery.mock(ParameterNameProvider.class);\n\t\tthis.creator = mockery.mock(TypeCreator.class);\n\t\tthis.proxifier = new DefaultProxifier();\n\t\tthis.method = mockery.mock(ResourceMethod.class);\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new NoRoutesParser(), provider, proxifier, creator);\n\t}\n\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tone(route).matches(\"/clients/add\", HttpMethod.POST, request);\n\t\t\twill(returnValue(method));\n\t\t\tone(route).getResource(); will(returnValue(null));\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t@Test\n\tpublic void passesTheWebMethod() throws SecurityException, NoSuchMethodException {\n\t\tfinal HttpMethod delete = HttpMethod.DELETE;\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tone(route).matches(\"/clients/add\", delete, request);\n\t\t\twill(returnValue(method));\n\t\t\tone(route).getResource(); will(returnValue(null));\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", delete, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tmockery.checking(new Expectations() {{\n\t\t\tone(route).matches(\"/clients/add\", HttpMethod.POST, request);\n\t\t\twill(returnValue(method));\n\t\t\tone(route).getResource(); will(returnValue(null));\n\t\t\tone(second).getResource(); will(returnValue(null));\n\t\t}});\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\tprivate Method method(String methodName, Class<?>... params) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(methodName, params);\n\t}\n\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\n\n\n\n\n\t@Test\n\tpublic void testReturnsNullIfResourceNotFound() {\n\t\tResourceMethod method = router.parse(\"unknown_id\", HttpMethod.POST, null);\n\t\tassertThat(method, is(Matchers.nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRegisterVRaptorInfoByDefault() throws SecurityException, NoSuchMethodException {\n\t\tResourceMethod methodFound = router.parse(\"/is_using_vraptor\", HttpMethod.GET, null);\n\t\tTypeSafeMatcher<ResourceMethod> expectedMethod = VRaptorMatchers.resourceMethod(VRaptorInfo.class\n\t\t\t\t.getMethod(\"info\"));\n\t\tassertThat(methodFound, is(expectedMethod));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal ResourceMethod resourceMethod = mockery.methodFor(MyResource.class, \"starPath\");\n\t\tfinal Method method = resourceMethod.getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\trouter.register(mockery.resource(InheritanceExample.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"notAnnotated\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"customizedPath\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canAccessGenericTypeAndMethodRoute() throws NoSuchMethodException, ClassNotFoundException {\n\t\tClass.forName(DefaultRouterTest.class.getPackage().getName() + \".MyCustomResource\");\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\tnew Rules(router) {\n\t\t\t@Override\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"--{webLogic}--{webMethod}\").is(type(DefaultRouterTest.class.getPackage().getName() + \".{webLogic}\"), method(\"{webMethod}\"));\n\t\t\t}\n\t\t};\n\t\tResourceMethod resourceMethod = router.parse(\"--\" + MyCustomResource.class.getSimpleName() + \"--notAnnotated\", HttpMethod.GET, request);\n\t\tfinal Method javaMethodFound = resourceMethod.getMethod();\n\t\tassertThat(javaMethodFound, is(equalTo(MyCustomResource.class.getDeclaredMethod(\"notAnnotated\"))));\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(javaMethodFound);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(javaMethodFound)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, javaMethodFound, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(javaMethodFound)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\nclass MyCustomResource {\n\tpublic void notAnnotated() {\n\t}\n}\n","lineNo":299}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\n\n/**\n * Should be used in one of two ways, either configure the type and invoke the\n * method or pass the method (java reflection) object.\n *\n * @author Guilherme Silveira\n */\npublic class RouteBuilder {\n    private final Set<HttpMethod> supportedMethods = new HashSet<HttpMethod>();\n\n    private final Proxifier proxifier;\n\tprivate final Logger logger = LoggerFactory.getLogger(RouteBuilder.class);\n\n\tprivate final String originalUri;\n\t\n\tprivate Route strategy = new NoStrategy();\n\n\tpublic RouteBuilder(Proxifier proxifier, String uri) {\n        this.proxifier = proxifier;\n\t\turi = uri.replaceAll(\"\\\\*\", \".\\\\*\");\n\t\tthis.originalUri = uri;\n\t}\n\n\tpublic <T> T is(final Class<T> type) {\n        return proxifier.proxify(type, new MethodInvocation<T>() {\n            public Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tboolean alreadySetTheStrategy = !strategy.getClass().equals(NoStrategy.class);\n\t\t\t\tif (alreadySetTheStrategy) {\n\t\t\t\t\t// the virtual machine might be invoking the finalize\n                    return null;\n                }\n                is(type, method);\n                return null;\n            }\n        });\n    }\n\n\tpublic void is(PatternBasedType type, PatternBasedType method) {\n\t\tthis.strategy = new PatternBasedStrategy(type, method, this.supportedMethods);\n\t}\n\n\tpublic void is(Class<?> type, Method method) {\n\t\tthis.strategy = new FixedMethodStrategy(originalUri, type, method, this.supportedMethods, new DefaultParametersControl(originalUri));\n\t\tlogger.debug(\"created rule for path \" + originalUri + \" --> \" + type.getName() + \".\" + method.getName());\n\t}\n\n\t/**\n\t * Accepts also this http method request. If this method is not invoked, any\n\t * http method is supported, otherwise all parameters passed are supported.\n\t * \n\t * @param method\n\t * @return\n\t */\n\tpublic RouteBuilder with(HttpMethod method) {\n\t\tthis.supportedMethods.add(method);\n\t\treturn this;\n\t}\n\n\tpublic Route build() {\n\t\tif(strategy instanceof NoStrategy) {\n\t\t\tthrow new IllegalRouteException(\"You have created a route, but did not specify any method to be invoked: \" + originalUri);\n\t\t}\n\t\treturn strategy;\n\t}\n\n    public String toString() {\n        if (supportedMethods.isEmpty()) {\n            return String.format(\"<< Route: %s => %s >>\", originalUri, this.strategy.toString());\n        }\n        return String.format(\"<< Route: %s %s=> %s >>\", originalUri, supportedMethods, this.strategy.toString());\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\n\n/**\n * Should be used in one of two ways, either configure the type and invoke the\n * method or pass the method (java reflection) object.\n *\n * @author Guilherme Silveira\n */\npublic class RouteBuilder {\n    private final Set<HttpMethod> supportedMethods = new HashSet<HttpMethod>();\n\n    private final Proxifier proxifier;\n\tprivate final Logger logger = LoggerFactory.getLogger(RouteBuilder.class);\n\n\tprivate final String originalUri;\n\t\n\tprivate Route strategy = new NoStrategy();\n\n\tpublic RouteBuilder(Proxifier proxifier, String uri) {\n        this.proxifier = proxifier;\n\t\turi = uri.replaceAll(\"\\\\*\", \".\\\\*\");\n\t\tthis.originalUri = uri;\n\t}\n\n\tpublic <T> T is(final Class<T> type) {\n        MethodInvocation<T> handler = new MethodInvocation<T>() {\n            public Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tboolean alreadySetTheStrategy = !strategy.getClass().equals(NoStrategy.class);\n\t\t\t\tif (alreadySetTheStrategy) {\n\t\t\t\t\t// the virtual machine might be invoking the finalize\n                    return null;\n                }\n                is(type, method);\n                return null;\n            }\n        };\n\t\treturn proxifier.proxify(type, handler);\n    }\n\n\tpublic void is(PatternBasedType type, PatternBasedType method) {\n\t\tthis.strategy = new PatternBasedStrategy(type, method, this.supportedMethods);\n\t}\n\n\tpublic void is(Class<?> type, Method method) {\n\t\tthis.strategy = new FixedMethodStrategy(originalUri, type, method, this.supportedMethods, new DefaultParametersControl(originalUri));\n\t\tlogger.debug(\"created rule for path \" + originalUri + \" --> \" + type.getName() + \".\" + method.getName());\n\t}\n\n\t/**\n\t * Accepts also this http method request. If this method is not invoked, any\n\t * http method is supported, otherwise all parameters passed are supported.\n\t * \n\t * @param method\n\t * @return\n\t */\n\tpublic RouteBuilder with(HttpMethod method) {\n\t\tthis.supportedMethods.add(method);\n\t\treturn this;\n\t}\n\n\tpublic Route build() {\n\t\tif(strategy instanceof NoStrategy) {\n\t\t\tthrow new IllegalRouteException(\"You have created a route, but did not specify any method to be invoked: \" + originalUri);\n\t\t}\n\t\treturn strategy;\n\t}\n\n    public String toString() {\n        if (supportedMethods.isEmpty()) {\n            return String.format(\"<< Route: %s => %s >>\", originalUri, this.strategy.toString());\n        }\n        return String.format(\"<< Route: %s %s=> %s >>\", originalUri, supportedMethods, this.strategy.toString());\n    }\n\n}\n","lineNo":65}
{"Smelly Sample":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.http.route.DefaultRouterTest.Dog;\nimport br.com.caelum.vraptor.http.route.DefaultRouterTest.MyControl;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.resource.HttpMethod;\n\npublic class FixedMethodStrategyTest {\n\n\tclass Client {\n\t\tprivate Long id;\n\t\tprivate Client child;\n\n\t\tpublic Client(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Client getChild() {\n\t\t\treturn child;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\tclass TypeCreated {\n\t\tprivate Client client;\n\n\t\tpublic TypeCreated(Client c) {\n\t\t\tthis.client = c;\n\t\t}\n\n\t\tpublic Client getClient() {\n\t\t\treturn client;\n\t\t}\n\t}\n\n\t@Test\n\tpublic void shouldTranslateAsteriskAsEmpty() {\n\t\tFixedMethodStrategy strategy = new FixedMethodStrategy(\"/clients/.*\", null, null, null);\n\t\tassertThat(strategy.urlFor(client(3L)), is(equalTo(\"/clients/\")));\n\t}\n\n\t@Test\n\tpublic void shouldTranslatePatternArgs() {\n\t\tFixedMethodStrategy strategy = new FixedMethodStrategy(\"/clients/{client.id}\", null, null, null);\n\t\tassertThat(strategy.urlFor(client(3L)), is(equalTo(\"/clients/3\")));\n\t}\n\n\t@Test\n\tpublic void shouldTranslatePatternArgNullAsEmpty() {\n\t\tFixedMethodStrategy strategy = new FixedMethodStrategy(\"/clients/{client.id}\", null, null, null);\n\t\tassertThat(strategy.urlFor(client(null)), is(equalTo(\"/clients/\")));\n\t}\n\n\t@Test\n\tpublic void shouldTranslatePatternArgInternalNullAsEmpty() {\n\t\tFixedMethodStrategy strategy = new FixedMethodStrategy(\"/clients/{client.child.id}\", null, null, null);\n\t\tassertThat(strategy.urlFor(client(null)), is(equalTo(\"/clients/\")));\n\t}\n\n\tprivate TypeCreated client(Long id) {\n\t\treturn new TypeCreated(new Client(id));\n\t}\n\n\t@Test\n\tpublic void canTranslate() {\n\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\n\t}\n\n}\n","Method after Refactoring":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\n\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.http.route.DefaultRouterTest.Dog;\nimport br.com.caelum.vraptor.http.route.DefaultRouterTest.MyControl;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class FixedMethodStrategyTest {\n\n\tclass Client {\n\t\tprivate Long id;\n\t\tprivate Client child;\n\n\t\tpublic Client(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Client getChild() {\n\t\t\treturn child;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\tclass TypeCreated {\n\t\tprivate Client client;\n\n\t\tpublic TypeCreated(Client c) {\n\t\t\tthis.client = c;\n\t\t}\n\n\t\tpublic Client getClient() {\n\t\t\treturn client;\n\t\t}\n\t}\n\n\t@Test\n\tpublic void shouldTranslateAsteriskAsEmpty() {\n\t\tFixedMethodStrategy strategy = new FixedMethodStrategy(\"/clients/.*\", null, null, null);\n\t\tassertThat(strategy.urlFor(client(3L)), is(equalTo(\"/clients/\")));\n\t}\n\n\t@Test\n\tpublic void shouldTranslatePatternArgs() {\n\t\tFixedMethodStrategy strategy = new FixedMethodStrategy(\"/clients/{client.id}\", null, null, null);\n\t\tassertThat(strategy.urlFor(client(3L)), is(equalTo(\"/clients/3\")));\n\t}\n\n\t@Test\n\tpublic void shouldTranslatePatternArgNullAsEmpty() {\n\t\tFixedMethodStrategy strategy = new FixedMethodStrategy(\"/clients/{client.id}\", null, null, null);\n\t\tassertThat(strategy.urlFor(client(null)), is(equalTo(\"/clients/\")));\n\t}\n\n\t@Test\n\tpublic void shouldTranslatePatternArgInternalNullAsEmpty() {\n\t\tFixedMethodStrategy strategy = new FixedMethodStrategy(\"/clients/{client.child.id}\", null, null, null);\n\t\tassertThat(strategy.urlFor(client(null)), is(equalTo(\"/clients/\")));\n\t}\n\n\tprivate TypeCreated client(Long id) {\n\t\treturn new TypeCreated(new Client(id));\n\t}\n\n\t@Test\n\tpublic void canTranslate() {\n\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\n\t}\n\n\n\t@Test\n\tpublic void registerExtraParametersFromAcessedUrl() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/{dog.id}\").is(MyControl.class).show(null);\n\t\t\t}\n\t\t};\n\t\tResourceMethod method = router.parse(\"/clients/45\", HttpMethod.POST, request);\n\t\tassertThat(request.getParameter(\"dog.id\"), is(equalTo(\"45\")));\n\t\tassertThat(method, is(VRaptorMatchers.resourceMethod(method(\"show\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\t{\n\t\t\t\t\trouteFor(\"/clients*\").with(HttpMethod.POST).is(MyControl.class).unknownMethod();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clientsWhatever\", HttpMethod.POST, request), is(VRaptorMatchers\n\t\t\t\t.resourceMethod(method(\"unknownMethod\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\n","lineNo":122}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.nullValue;\n\nimport java.lang.reflect.Method;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.hamcrest.Matchers;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.jmock.Expectations;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.DefaultProxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class DefaultRouterTest {\n\n\tprivate DefaultProxifier proxifier;\n\tprivate Router router;\n\tprivate VRaptorMockery mockery;\n\tprivate VRaptorRequest request;\n\tprivate ParameterNameProvider provider;\n\tprivate TypeCreator creator;\n\tprivate ResourceMethod method;\n\n\t@org.junit.Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.provider = mockery.mock(ParameterNameProvider.class);\n\t\tthis.creator = mockery.mock(TypeCreator.class);\n\t\tthis.proxifier = new DefaultProxifier();\n\t\tthis.method = mockery.mock(ResourceMethod.class);\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new NoRoutesParser(), provider, proxifier, creator);\n\t}\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tone(route).matches(\"/clients/add\", HttpMethod.POST, request);\n\t\t\twill(returnValue(method));\n\t\t\tone(route).getResource(); will(returnValue(null));\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate Method method(String name, Class... types) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(name, types);\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).list();\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void ignoresAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleIfDifferentCreatorsWereUsed() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients\").is(MyControl.class).list();\n\t\t\t\trouteFor(\"/clients\").is(MyControl.class).show(null);\n\t\t\t}\n\t\t};\n\t\tMethod found = router.parse(\"/clients\", HttpMethod.POST, request).getMethod();\n\t\tassertThat(found, is(equalTo(MyControl.class.getMethod(\"list\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void registerExtraParametersFromAcessedUrl() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/{dog.id}\").is(MyControl.class).show(null);\n\t\t\t}\n\t\t};\n\t\tResourceMethod method = router.parse(\"/clients/45\", HttpMethod.POST, request);\n\t\tassertThat(request.getParameter(\"dog.id\"), is(equalTo(\"45\")));\n\t\tassertThat(method, is(VRaptorMatchers.resourceMethod(method(\"show\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\t{\n\t\t\t\t\trouteFor(\"/clients*\").with(HttpMethod.POST).is(MyControl.class).unknownMethod();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clientsWhatever\", HttpMethod.POST, request), is(VRaptorMatchers\n\t\t\t\t.resourceMethod(method(\"unknownMethod\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void testReturnsNullIfResourceNotFound() {\n\t\tResourceMethod method = router.parse(\"unknown_id\", HttpMethod.POST, null);\n\t\tassertThat(method, is(Matchers.nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRegisterVRaptorInfoByDefault() throws SecurityException, NoSuchMethodException {\n\t\tResourceMethod methodFound = router.parse(\"/is_using_vraptor\", HttpMethod.GET, null);\n\t\tTypeSafeMatcher<ResourceMethod> expectedMethod = VRaptorMatchers.resourceMethod(VRaptorInfo.class\n\t\t\t\t.getMethod(\"info\"));\n\t\tassertThat(methodFound, is(expectedMethod));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal ResourceMethod resourceMethod = mockery.methodFor(MyResource.class, \"starPath\");\n\t\tfinal Method method = resourceMethod.getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\trouter.register(mockery.resource(InheritanceExample.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"notAnnotated\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"customizedPath\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canAccessGenericTypeAndMethodRoute() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"--(*)--(*)\").is(type(\"br.com.caelum.vraptor.http.route.{1}\"), method(\"{2}\"));\n\t\t\t}\n\t\t};\n\t\tResourceMethod resourceMethod = router.parse(\"--MyResource--notAnnotated\", HttpMethod.GET, request);\n\t\tassertThat(resourceMethod.getMethod(), is(equalTo(MyResource.class.getDeclaredMethod(\"notAnnotated\"))));\n\t\tString url = router.urlFor(MyResource.class, resourceMethod.getMethod(), new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(resourceMethod.getMethod())));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.nullValue;\n\nimport java.lang.reflect.Method;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.hamcrest.Matchers;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.jmock.Expectations;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.DefaultProxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class DefaultRouterTest {\n\n\tprivate DefaultProxifier proxifier;\n\tprivate Router router;\n\tprivate VRaptorMockery mockery;\n\tprivate VRaptorRequest request;\n\tprivate ParameterNameProvider provider;\n\tprivate TypeCreator creator;\n\tprivate ResourceMethod method;\n\n\t@org.junit.Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.provider = mockery.mock(ParameterNameProvider.class);\n\t\tthis.creator = mockery.mock(TypeCreator.class);\n\t\tthis.proxifier = new DefaultProxifier();\n\t\tthis.method = mockery.mock(ResourceMethod.class);\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new NoRoutesParser(), provider, proxifier, creator);\n\t}\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tone(route).matches(\"/clients/add\", HttpMethod.POST, request);\n\t\t\twill(returnValue(method));\n\t\t\tone(route).getResource(); will(returnValue(null));\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\t\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tfinal Route second = mockery.mock(Route.class, \"second\");\n\t\tmockery.checking(new Expectations() {{\n\t\t\tone(route).matches(\"/clients/add\", HttpMethod.POST, request);\n\t\t\twill(returnValue(method));\n\t\t\tone(route).getResource(); will(returnValue(null));\n\t\t\tone(second).getResource(); will(returnValue(null));\n\t\t}});\n\t\trouter.add(route);\n\t\trouter.add(second);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n\t\n\t\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate Method method(String name, Class... types) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(name, types);\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void ignoresAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void registerExtraParametersFromAcessedUrl() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/{dog.id}\").is(MyControl.class).show(null);\n\t\t\t}\n\t\t};\n\t\tResourceMethod method = router.parse(\"/clients/45\", HttpMethod.POST, request);\n\t\tassertThat(request.getParameter(\"dog.id\"), is(equalTo(\"45\")));\n\t\tassertThat(method, is(VRaptorMatchers.resourceMethod(method(\"show\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\t{\n\t\t\t\t\trouteFor(\"/clients*\").with(HttpMethod.POST).is(MyControl.class).unknownMethod();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clientsWhatever\", HttpMethod.POST, request), is(VRaptorMatchers\n\t\t\t\t.resourceMethod(method(\"unknownMethod\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void testReturnsNullIfResourceNotFound() {\n\t\tResourceMethod method = router.parse(\"unknown_id\", HttpMethod.POST, null);\n\t\tassertThat(method, is(Matchers.nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRegisterVRaptorInfoByDefault() throws SecurityException, NoSuchMethodException {\n\t\tResourceMethod methodFound = router.parse(\"/is_using_vraptor\", HttpMethod.GET, null);\n\t\tTypeSafeMatcher<ResourceMethod> expectedMethod = VRaptorMatchers.resourceMethod(VRaptorInfo.class\n\t\t\t\t.getMethod(\"info\"));\n\t\tassertThat(methodFound, is(expectedMethod));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal ResourceMethod resourceMethod = mockery.methodFor(MyResource.class, \"starPath\");\n\t\tfinal Method method = resourceMethod.getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\trouter.register(mockery.resource(InheritanceExample.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"notAnnotated\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"customizedPath\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canAccessGenericTypeAndMethodRoute() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"--(*)--(*)\").is(type(\"br.com.caelum.vraptor.http.route.{1}\"), method(\"{2}\"));\n\t\t\t}\n\t\t};\n\t\tResourceMethod resourceMethod = router.parse(\"--MyResource--notAnnotated\", HttpMethod.GET, request);\n\t\tassertThat(resourceMethod.getMethod(), is(equalTo(MyResource.class.getDeclaredMethod(\"notAnnotated\"))));\n\t\tString url = router.urlFor(MyResource.class, resourceMethod.getMethod(), new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(resourceMethod.getMethod())));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\n","lineNo":129}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.nullValue;\n\nimport java.lang.reflect.Method;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.hamcrest.Matchers;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.jmock.Expectations;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.DefaultProxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class DefaultRouterTest {\n\n\tprivate DefaultProxifier proxifier;\n\tprivate Router router;\n\tprivate VRaptorMockery mockery;\n\tprivate VRaptorRequest request;\n\tprivate ParameterNameProvider provider;\n\tprivate TypeCreator creator;\n\n\t@org.junit.Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.provider = mockery.mock(ParameterNameProvider.class);\n\t\tthis.creator = mockery.mock(TypeCreator.class);\n\t\tthis.proxifier = new DefaultProxifier();\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new NoRoutesParser(), provider, proxifier, creator);\n\t}\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate Method method(String name, Class... types) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(name, types);\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).list();\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void ignoresAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleIfDifferentCreatorsWereUsed() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients\").is(MyControl.class).list();\n\t\t\t\trouteFor(\"/clients\").is(MyControl.class).show(null);\n\t\t\t}\n\t\t};\n\t\tMethod found = router.parse(\"/clients\", HttpMethod.POST, request).getMethod();\n\t\tassertThat(found, is(equalTo(MyControl.class.getMethod(\"list\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void registerExtraParametersFromAcessedUrl() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/{dog.id}\").is(MyControl.class).show(null);\n\t\t\t}\n\t\t};\n\t\tResourceMethod method = router.parse(\"/clients/45\", HttpMethod.POST, request);\n\t\tassertThat(request.getParameter(\"dog.id\"), is(equalTo(\"45\")));\n\t\tassertThat(method, is(VRaptorMatchers.resourceMethod(method(\"show\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\t{\n\t\t\t\t\trouteFor(\"/clients*\").with(HttpMethod.POST).is(MyControl.class).unknownMethod();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clientsWhatever\", HttpMethod.POST, request), is(VRaptorMatchers\n\t\t\t\t.resourceMethod(method(\"unknownMethod\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void testReturnsNullIfResourceNotFound() {\n\t\tResourceMethod method = router.parse(\"unknown_id\", HttpMethod.POST, null);\n\t\tassertThat(method, is(Matchers.nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRegisterVRaptorInfoByDefault() throws SecurityException, NoSuchMethodException {\n\t\tResourceMethod methodFound = router.parse(\"/is_using_vraptor\", HttpMethod.GET, null);\n\t\tTypeSafeMatcher<ResourceMethod> expectedMethod = VRaptorMatchers.resourceMethod(VRaptorInfo.class\n\t\t\t\t.getMethod(\"info\"));\n\t\tassertThat(methodFound, is(expectedMethod));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal ResourceMethod resourceMethod = mockery.methodFor(MyResource.class, \"starPath\");\n\t\tfinal Method method = resourceMethod.getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\trouter.register(mockery.resource(InheritanceExample.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"notAnnotated\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"customizedPath\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canAccessGenericTypeAndMethodRoute() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"--(*)--(*)\").is(type(\"br.com.caelum.vraptor.http.route.{1}\"), method(\"{2}\"));\n\t\t\t}\n\t\t};\n\t\tResourceMethod resourceMethod = router.parse(\"--MyResource--notAnnotated\", HttpMethod.GET, request);\n\t\tassertThat(resourceMethod.getMethod(), is(equalTo(MyResource.class.getDeclaredMethod(\"notAnnotated\"))));\n\t\tString url = router.urlFor(MyResource.class, resourceMethod.getMethod(), new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(resourceMethod.getMethod())));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.nullValue;\n\nimport java.lang.reflect.Method;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.hamcrest.Matchers;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.jmock.Expectations;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.proxy.DefaultProxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\nimport br.com.caelum.vraptor.test.VRaptorMockery;\n\npublic class DefaultRouterTest {\n\n\tprivate DefaultProxifier proxifier;\n\tprivate Router router;\n\tprivate VRaptorMockery mockery;\n\tprivate VRaptorRequest request;\n\tprivate ParameterNameProvider provider;\n\tprivate TypeCreator creator;\n\tprivate ResourceMethod method;\n\n\t@org.junit.Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.provider = mockery.mock(ParameterNameProvider.class);\n\t\tthis.creator = mockery.mock(TypeCreator.class);\n\t\tthis.proxifier = new DefaultProxifier();\n\t\tthis.method = mockery.mock(ResourceMethod.class);\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new NoRoutesParser(), provider, proxifier, creator);\n\t}\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\tfinal Route route = mockery.mock(Route.class);\n\t\tmockery.checking(new Expectations() {{\n\t\t\tone(route).matches(\"/clients/add\", HttpMethod.POST, request);\n\t\t\twill(returnValue(method));\n\t\t\tone(route).getResource(); will(returnValue(null));\n\t\t}});\n\t\trouter.add(route);\n\t\tResourceMethod found = router.parse(\"/clients/add\", HttpMethod.POST, request);\n\t\tassertThat(found, is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate Method method(String name, Class... types) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(name, types);\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).list();\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void ignoresAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleIfDifferentCreatorsWereUsed() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients\").is(MyControl.class).list();\n\t\t\t\trouteFor(\"/clients\").is(MyControl.class).show(null);\n\t\t\t}\n\t\t};\n\t\tMethod found = router.parse(\"/clients\", HttpMethod.POST, request).getMethod();\n\t\tassertThat(found, is(equalTo(MyControl.class.getMethod(\"list\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void registerExtraParametersFromAcessedUrl() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"/clients/{dog.id}\").is(MyControl.class).show(null);\n\t\t\t}\n\t\t};\n\t\tResourceMethod method = router.parse(\"/clients/45\", HttpMethod.POST, request);\n\t\tassertThat(request.getParameter(\"dog.id\"), is(equalTo(\"45\")));\n\t\tassertThat(method, is(VRaptorMatchers.resourceMethod(method(\"show\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException {\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\t{\n\t\t\t\t\trouteFor(\"/clients*\").with(HttpMethod.POST).is(MyControl.class).unknownMethod();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tassertThat(router.parse(\"/clientsWhatever\", HttpMethod.POST, request), is(VRaptorMatchers\n\t\t\t\t.resourceMethod(method(\"unknownMethod\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void testReturnsNullIfResourceNotFound() {\n\t\tResourceMethod method = router.parse(\"unknown_id\", HttpMethod.POST, null);\n\t\tassertThat(method, is(Matchers.nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRegisterVRaptorInfoByDefault() throws SecurityException, NoSuchMethodException {\n\t\tResourceMethod methodFound = router.parse(\"/is_using_vraptor\", HttpMethod.GET, null);\n\t\tTypeSafeMatcher<ResourceMethod> expectedMethod = VRaptorMatchers.resourceMethod(VRaptorInfo.class\n\t\t\t\t.getMethod(\"info\"));\n\t\tassertThat(methodFound, is(expectedMethod));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal ResourceMethod resourceMethod = mockery.methodFor(MyResource.class, \"starPath\");\n\t\tfinal Method method = resourceMethod.getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier), provider,proxifier,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\trouter.register(mockery.resource(InheritanceExample.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"notAnnotated\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"customizedPath\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method);\n\t\t\t\twill(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method)));\n\t\t\t\twill(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canAccessGenericTypeAndMethodRoute() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesParser(proxifier),\n\t\t\t\tprovider, proxifier, creator);\n\t\tnew Rules(router) {\n\t\t\tpublic void routes() {\n\t\t\t\trouteFor(\"--(*)--(*)\").is(type(\"br.com.caelum.vraptor.http.route.{1}\"), method(\"{2}\"));\n\t\t\t}\n\t\t};\n\t\tResourceMethod resourceMethod = router.parse(\"--MyResource--notAnnotated\", HttpMethod.GET, request);\n\t\tassertThat(resourceMethod.getMethod(), is(equalTo(MyResource.class.getDeclaredMethod(\"notAnnotated\"))));\n\t\tString url = router.urlFor(MyResource.class, resourceMethod.getMethod(), new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(resourceMethod.getMethod())));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\n","lineNo":112}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.eval.Evaluator;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.resource.DefaultResource;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Should be used in one of two ways, either configure the type and invoke the\n * method or pass the method (java reflection) object.\n *\n * @author Guilherme Silveira\n */\npublic class UriBasedRoute implements Route {\n    private final Set<HttpMethod> supportedMethods = new HashSet<HttpMethod>();\n\n\n    private final Proxifier proxifier;\n\tprivate final Logger logger = LoggerFactory.getLogger(UriBasedRoute.class);\n\n    private ResourceMethod resourceMethod;\n\n    private final Pattern pattern;\n\n\tprivate final List<String> parameters = new ArrayList<String>();\n\n\tprivate final String patternUri;\n\n\tprivate final String originalUri;\n\t\n\tprivate RouteStrategy strategy = new NoStrategy();\n\n\tpublic UriBasedRoute(Proxifier proxifier, String uri) {\n        this.proxifier = proxifier;\n\t\turi = uri.replaceAll(\"\\\\*\", \".\\\\*\");\n\t\tthis.originalUri = uri;\n\t\tString finalUri = \"\";\n\t\tString patternUri = \"\";\n\t\tString paramName = \"\";\n\t\t// not using stringbuffer because this is only run in startup\n\t\tboolean ignore = false;\n\t\tfor (int i = 0; i < uri.length(); i++) {\n\t\t\tif (uri.charAt(i) == '{') {\n\t\t\t\tignore = true;\n\t\t\t\tpatternUri += \"(\";\n\t\t\t\tcontinue;\n\t\t\t} else if (uri.charAt(i) == '}') {\n\t\t\t\tignore = false;\n\t\t\t\tfinalUri += \".*\";\n\t\t\t\tpatternUri += \".*)\";\n\t\t\t\tparameters.add(paramName);\n\t\t\t\tparamName = \"\";\n\t\t\t\tcontinue;\n\t\t\t} else if (!ignore) {\n\t\t\t\tpatternUri += uri.charAt(i);\n\t\t\t\tfinalUri += uri.charAt(i);\n\t\t\t} else {\n\t\t\t\tparamName += uri.charAt(i);\n\t\t\t}\n\t\t}\n\t\tthis.patternUri = patternUri;\n\t\tthis.pattern = Pattern.compile(patternUri);\n\t}\n\n\tpublic Resource getResource() {\n\t\tif (resourceMethod == null) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"You forgot to invoke a method to let the rule know which method it is suposed to invoke.\");\n\t\t}\n\t\treturn this.resourceMethod.getResource();\n\t}\n\n    public ResourceMethod getResourceMethod() {\n\t\treturn resourceMethod;\n\t}\n\n\tpublic void is(Class<?> type, Method method) {\n\t\tlogger.debug(\"created rule for path \" + patternUri + \" --> \" + type.getName() + \".\" + method.getName());\n\t\tresourceMethod = new DefaultResourceMethod(new DefaultResource(type), method);\n\t}\n\n\tpublic <T> T is(final Class<T> type) {\n        return proxifier.proxify(type, new MethodInvocation<T>() {\n            public Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tboolean alreadySetTheStrategy = !strategy.getClass().equals(NoStrategy.class);\n\t\t\t\tif (alreadySetTheStrategy) {\n\t\t\t\t\t// the virtual machine might be invoking the finalize\n                    return null;\n                }\n                is(type, method);\n                return null;\n            }\n        });\n    }\n\n\tpublic void is(PatternBasedType type, PatternBasedType method) {\n\t\tthis.strategy = new PatternBasedStrategy(type, method);\n\t}\n\n\tpublic ResourceMethod matches(String uri, HttpMethod method, MutableRequest request) {\n\t\tif (!methodMatches(method)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn uriMatches(uri, request);\n\t}\n\n\tprivate boolean methodMatches(HttpMethod method) {\n\t\treturn (this.supportedMethods.isEmpty() || this.supportedMethods.contains(method));\n\t}\n\n\t@Override\n    public String toString() {\n        if (supportedMethods.isEmpty()) {\n            return String.format(\"<< Route: %s => %s >>\", originalUri, resourceMethod);\n        }\n        return String.format(\"<< Route: %s %s=> %s >>\", originalUri, supportedMethods, resourceMethod);\n    }\n\n\tprivate ResourceMethod uriMatches(String uri, MutableRequest request) {\n\t\tMatcher m = pattern.matcher(uri);\n\t\tif (!m.matches()) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (int i = 1; i <= m.groupCount(); i++) {\n\t\t\trequest.setParameter(parameters.get(i - 1), m.group(i));\n\t\t}\n\t\treturn this.strategy.getResourceMethod();\n\t}\n\n\tpublic Resource getResource() {\n\t\treturn this.strategy.getResource();\n\t}\n\n\tpublic void is(Class<?> type, Method method) {\n\t\tthis.strategy = new FixedMethodStrategy(type, method);\n\t\tlogger.debug(\"created rule for path \" + patternUri + \" --> \" + type.getName() + \".\" + method.getName());\n\t}\n\n\tpublic ResourceMethod getResourceMethod() {\n\t\treturn this.strategy.getResourceMethod();\n\t}\n\n\tpublic String urlFor(Object params) {\n\t\tString base = originalUri.replaceAll(\"\\\\.\\\\*\", \"\");\n\t\tfor (String key : parameters) {\n\t\t\tObject result = new Evaluator().get(params, key);\n\t\t\tbase = base.replace(\"{\" + key + \"}\", result==null? \"\" : result.toString());\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Accepts also this http method request. If this method is not invoked, any\n\t * http method is supported, otherwise all parameters passed are supported.\n\t * \n\t * @param method\n\t * @return\n\t */\n\tpublic UriBasedRoute with(HttpMethod method) {\n\t\tthis.supportedMethods.add(method);\n\t\treturn this;\n\t}\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.eval.Evaluator;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.proxy.MethodInvocation;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.proxy.SuperMethod;\nimport br.com.caelum.vraptor.resource.DefaultResource;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Should be used in one of two ways, either configure the type and invoke the\n * method or pass the method (java reflection) object.\n *\n * @author Guilherme Silveira\n */\npublic class UriBasedRoute implements Route {\n    private final Set<HttpMethod> supportedMethods = new HashSet<HttpMethod>();\n\n\n    private final Proxifier proxifier;\n\tprivate final Logger logger = LoggerFactory.getLogger(UriBasedRoute.class);\n\n    private ResourceMethod resourceMethod;\n\n    private final Pattern pattern;\n\n\tprivate final List<String> parameters = new ArrayList<String>();\n\n\tprivate final String patternUri;\n\n\tprivate final String originalUri;\n\t\n\tprivate RouteStrategy strategy = new NoStrategy();\n\n\tpublic UriBasedRoute(Proxifier proxifier, String uri) {\n        this.proxifier = proxifier;\n\t\turi = uri.replaceAll(\"\\\\*\", \".\\\\*\");\n\t\tthis.originalUri = uri;\n\t\tString finalUri = \"\";\n\t\tString patternUri = \"\";\n\t\tString paramName = \"\";\n\t\t// not using stringbuffer because this is only run in startup\n\t\tboolean ignore = false;\n\t\tfor (int i = 0; i < uri.length(); i++) {\n\t\t\tif (uri.charAt(i) == '{') {\n\t\t\t\tignore = true;\n\t\t\t\tpatternUri += \"(\";\n\t\t\t\tcontinue;\n\t\t\t} else if (uri.charAt(i) == '}') {\n\t\t\t\tignore = false;\n\t\t\t\tfinalUri += \".*\";\n\t\t\t\tpatternUri += \".*)\";\n\t\t\t\tparameters.add(paramName);\n\t\t\t\tparamName = \"\";\n\t\t\t\tcontinue;\n\t\t\t} else if (!ignore) {\n\t\t\t\tpatternUri += uri.charAt(i);\n\t\t\t\tfinalUri += uri.charAt(i);\n\t\t\t} else {\n\t\t\t\tparamName += uri.charAt(i);\n\t\t\t}\n\t\t}\n\t\tthis.patternUri = patternUri;\n\t\tthis.pattern = Pattern.compile(patternUri);\n\t}\n\n\tpublic Resource getResource() {\n\t\tif (resourceMethod == null) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"You forgot to invoke a method to let the rule know which method it is suposed to invoke.\");\n\t\t}\n\t\treturn this.resourceMethod.getResource();\n\t}\n\n    public ResourceMethod getResourceMethod() {\n\t\treturn resourceMethod;\n\t}\n\n\tpublic void is(Class<?> type, Method method) {\n\t\tlogger.debug(\"created rule for path \" + patternUri + \" --> \" + type.getName() + \".\" + method.getName());\n\t\tresourceMethod = new DefaultResourceMethod(new DefaultResource(type), method);\n\t}\n\n\tpublic <T> T is(final Class<T> type) {\n        return proxifier.proxify(type, new MethodInvocation<T>() {\n            public Object intercept(Object proxy, Method method, Object[] args, SuperMethod superMethod) {\n\t\t\t\tboolean alreadySetTheStrategy = !strategy.getClass().equals(NoStrategy.class);\n\t\t\t\tif (alreadySetTheStrategy) {\n\t\t\t\t\t// the virtual machine might be invoking the finalize\n                    return null;\n                }\n                is(type, method);\n                return null;\n            }\n        });\n    }\n\n\tpublic void is(PatternBasedType type, PatternBasedType method) {\n\t\tthis.strategy = new PatternBasedStrategy(type, method);\n\t}\n\n\tpublic ResourceMethod matches(String uri, HttpMethod method, MutableRequest request) {\n\t\tif (!methodMatches(method)) {\n\t\t\treturn null;\n\t\t}\n\t\treturn uriMatches(uri, request);\n\t}\n\n\tprivate boolean methodMatches(HttpMethod method) {\n\t\treturn (this.supportedMethods.isEmpty() || this.supportedMethods.contains(method));\n\t}\n\n\t@Override\n    public String toString() {\n        if (supportedMethods.isEmpty()) {\n            return String.format(\"<< Route: %s => %s >>\", originalUri, resourceMethod);\n        }\n        return String.format(\"<< Route: %s %s=> %s >>\", originalUri, supportedMethods, resourceMethod);\n    }\n\n\tprivate ResourceMethod uriMatches(String uri, MutableRequest request) {\n\t\tMatcher m = pattern.matcher(uri);\n\t\tif (!m.matches()) {\n\t\t\treturn null;\n\t\t}\n\t\tfor (int i = 1; i <= m.groupCount(); i++) {\n\t\t\tString name = parameters.get(i - 1);\n\t\t\tif its called _resource or _method, doesnt use it\n\t\t\trequest.setParameter(name, m.group(i));\n\t\t}\n\t\treturn this.strategy.getResourceMethod(m, request);\n\t}\n\n\tpublic Resource getResource() {\n\t\treturn this.strategy.getResource();\n\t}\n\n\tpublic void is(Class<?> type, Method method) {\n\t\tthis.strategy = new FixedMethodStrategy(type, method);\n\t\tlogger.debug(\"created rule for path \" + patternUri + \" --> \" + type.getName() + \".\" + method.getName());\n\t}\n\n\tpublic ResourceMethod getResourceMethod() {\n\t\treturn this.strategy.getResourceMethod();\n\t}\n\n\tpublic String urlFor(Object params) {\n\t\tString base = originalUri.replaceAll(\"\\\\.\\\\*\", \"\");\n\t\tfor (String key : parameters) {\n\t\t\tObject result = new Evaluator().get(params, key);\n\t\t\tbase = base.replace(\"{\" + key + \"}\", result==null? \"\" : result.toString());\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Accepts also this http method request. If this method is not invoked, any\n\t * http method is supported, otherwise all parameters passed are supported.\n\t * \n\t * @param method\n\t * @return\n\t */\n\tpublic UriBasedRoute with(HttpMethod method) {\n\t\tthis.supportedMethods.add(method);\n\t\treturn this;\n\t}\n}\n","lineNo":169}
{"Smelly Sample":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.resource.DefaultResource;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * A route strategy which invokes a fixed type's method.\n * \n * @author guilherme silveira\n */\npublic class FixedMethodStrategy implements RouteStrategy {\n\t\n\tprivate final Logger logger = LoggerFactory.getLogger(FixedMethodStrategy.class);\n\n\tprivate final Class<?> type;\n\tprivate final Method method;\n\tprivate final ResourceMethod resourceMethod;\n\n\tpublic FixedMethodStrategy(Class<?> type, Method method) {\n\t\tthis.type = type;\n\t\tthis.method = method;\n\t\tthis.resourceMethod = new DefaultResourceMethod(new DefaultResource(type), method);\n\t}\n\t\n\tpublic ResourceMethod getResourceMethod() {\n\t\treturn this.resourceMethod;\n\t}\n\n\tpublic Resource getResource() {\n\t\treturn this.resourceMethod.getResource();\n\t}\n\n}\n","Method after Refactoring":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.lang.reflect.Method;\nimport java.util.regex.Matcher;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.resource.DefaultResource;\nimport br.com.caelum.vraptor.resource.DefaultResourceMethod;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * A route strategy which invokes a fixed type's method.\n * \n * @author guilherme silveira\n */\npublic class FixedMethodStrategy implements RouteStrategy {\n\t\n\tprivate final Logger logger = LoggerFactory.getLogger(FixedMethodStrategy.class);\n\n\tprivate final Class<?> type;\n\tprivate final Method method;\n\tprivate final ResourceMethod resourceMethod;\n\n\tpublic FixedMethodStrategy(Class<?> type, Method method) {\n\t\tthis.type = type;\n\t\tthis.method = method;\n\t\tthis.resourceMethod = new DefaultResourceMethod(new DefaultResource(type), method);\n\t}\n\t\n\tpublic ResourceMethod getResourceMethod(Matcher m, MutableRequest request) {\n\t\tfor (int i = 1; i <= m.groupCount(); i++) {\n\t\t\tString name = parameters.get(i - 1);\n\t\t\tif its an integer, then use it \n\t\t\trequest.setParameter(name, m.group(i));\n\t\t}\n\t\treturn this.resourceMethod;\n\t}\n\n\tpublic Resource getResource() {\n\t\treturn this.resourceMethod.getResource();\n\t}\n\n}\n","lineNo":63}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.http.ListOfRules;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * The default implementation of resource localization rules. It also uses a\n * Path annotation to discover path->method mappings using the supplied\n * ResourceAndMethodLookup.\n *\n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class DefaultRouter implements Router {\n\n    private final Logger logger = LoggerFactory.getLogger(DefaultRouter.class);\n    private final Proxifier proxifier;\n\n    public Proxifier getProxifier() {\n    return proxifier;\n}\n\tprivate final List<Route> routes = new ArrayList<Route>();\n\tprivate final Set<Resource> resources = new HashSet<Resource>();\n\tprivate final ResourceParserRoutesCreator resourceRoutesCreator;\n\tprivate final ParameterNameProvider provider;\n\tprivate final TypeCreator creator;\n\n\tpublic DefaultRouter(RoutesConfiguration config, ResourceParserRoutesCreator resourceRoutesCreator,\n\t\t\tParameterNameProvider provider, Proxifier proxifier, TypeCreator creator) {\n\t\tthis.resourceRoutesCreator = resourceRoutesCreator;\n\t\tthis.provider = provider;\n\t\tthis.creator = creator;\n\t\t// this resource should be kept here so it doesnt matter whether\n\t\t// the user uses a custom routes config\n\t\tUriBasedRoute rule = new UriBasedRoute(\"/is_using_vraptor\");\n\t\ttry {\n\t\t\trule.is(VRaptorInfo.class).info();\n\t\t} catch (IOException e) {\n\t\t\t// ignorable\n\t\t}\n\t\tadd(rule);\n\t\tconfig.config(this);\n\t}\n\n\tpublic void add(ListOfRules rulesToAdd) {\n\t\tList<Route> rules = rulesToAdd.getRules();\n\t\tadd(rules);\n\t}\n\n\tprivate void add(List<Route> rules) {\n\t\tfor (Route r : rules) {\n\t\t\tadd(r);\n\t\t}\n\t}\n\n\t/**\n\t * You can override this method to get notified by all added routes.\n\t */\n\tprotected void add(Route r) {\n\t\tresources.add(r.getResource());\n\t\tthis.routes.add(r);\n\t}\n\n\tpublic ResourceMethod parse(String uri, HttpMethod method, MutableRequest request) {\n\t\tfor (Route rule : routes) {\n\t\t\tResourceMethod value = rule.matches(uri, method, request);\n\t\t\tif (value != null) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic Set<Resource> all() {\n\t\treturn resources;\n\t}\n\n\tpublic void register(Resource resource) {\n\t\tadd(this.resourceRoutesCreator.rulesFor(resource));\n\t}\n\n\tpublic <T> String urlFor(Class<T> type, Method method, Object... params) {\n\t\tfor (Route rule : routes) {\n\t\t\tif (rule.getResource().getType().equals(type) && rule.getResourceMethod().getMethod().equals(method)) {\n\t\t\t\tString[] names = provider.parameterNamesFor(method);\n\t\t\t\tClass<?> parameterType = creator.typeFor(rule.getResourceMethod());\n\t\t\t\ttry {\n\t\t\t\t\tObject root = parameterType.getConstructor().newInstance();\n\t\t\t\t\tfor (int i = 0; i < names.length; i++) {\n\t\t\t\t\t\tMethod setter = findSetter(parameterType, \"set\" + Info.capitalize(names[i]));\n\t\t\t\t\t\tsetter.invoke(root, params[i]);\n\t\t\t\t\t}\n\t\t\t\t\treturn rule.urlFor(root);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new VRaptorException(\"The selected route is invalid for redirection: \" + type.getName() + \".\"\n\t\t\t\t\t\t\t+ method.getName(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new RouteNotFoundException(\"The selected route is invalid for redirection: \" + type.getName() + \".\"\n\t\t\t\t+ method.getName());\n\t}\n\n\tprivate Method findSetter(Class<?> parameterType, String methodName) {\n\t\tfor (Method m : parameterType.getDeclaredMethods()) {\n\t\t\tif (m.getName().equals(methodName)) {\n\t\t\t\treturn m;\n\t\t\t}\n\t\t}\n\t\tthrow new VRaptorException(\n\t\t\t\t\"Unable to redirect using route as setter method for parameter setting was not created. \"\n\t\t\t\t\t\t+ \"Thats probably a bug on your type creator. \"\n\t\t\t\t\t\t+ \"If you are using the default type creator, notify VRaptor.\");\n\t}\n\n\tpublic List<Route> allRoutes() {\n\t\treturn routes;\n\t}\n>>>>>>> rule --> route:vraptor-core/src/main/java/br/com/caelum/vraptor/http/route/DefaultRouter.java\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.http.ListOfRules;\nimport br.com.caelum.vraptor.http.MutableRequest;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.proxy.Proxifier;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * The default implementation of resource localization rules. It also uses a\n * Path annotation to discover path->method mappings using the supplied\n * ResourceAndMethodLookup.\n *\n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class DefaultRouter implements Router {\n\n    private final Logger logger = LoggerFactory.getLogger(DefaultRouter.class);\n    private final Proxifier proxifier;\n\n    public Proxifier getProxifier() {\n    return proxifier;\n}\n\tprivate final List<Route> routes = new ArrayList<Route>();\n\tprivate final Set<Resource> resources = new HashSet<Resource>();\n\tprivate final ResourceParserRoutesCreator resourceRoutesCreator;\n\tprivate final ParameterNameProvider provider;\n\tprivate final TypeCreator creator;\n\n\tpublic DefaultRouter(RoutesConfiguration config, ResourceParserRoutesCreator resourceRoutesCreator,\n\t\t\tParameterNameProvider provider, Proxifier proxifier, TypeCreator creator) {\n\t\tthis.resourceRoutesCreator = resourceRoutesCreator;\n\t\tthis.provider = provider;\n\t\tthis.creator = creator;\n\t\t// this resource should be kept here so it doesnt matter whether\n\t\t// the user uses a custom routes config\n\t\tUriBasedRoute rule = new UriBasedRoute(\"/is_using_vraptor\");\n\t\ttry {\n\t\t\trule.is(VRaptorInfo.class).info();\n\t\t} catch (IOException e) {\n\t\t\t// ignorable\n\t\t}\n\t\tadd(rule);\n\t\tconfig.config(this);\n\t}\n\n\tpublic void add(ListOfRules rulesToAdd) {\n\t\tList<Route> rules = rulesToAdd.getRules();\n\t\tadd(rules);\n\t}\n\n\tprivate void add(List<Route> rules) {\n\t\tfor (Route r : rules) {\n\t\t\tadd(r);\n\t\t}\n\t}\n\n\t/**\n\t * You can override this method to get notified by all added routes.\n\t */\n\tprotected void add(Route r) {\n\t\tResource resource = r.getResource();\n\t\tif (resource != null) {\n\t\t\tresources.add(resource);\n\t\t}\n\t\tthis.routes.add(r);\n\t}\n\n\tpublic ResourceMethod parse(String uri, HttpMethod method, MutableRequest request) {\n\t\tfor (Route rule : routes) {\n\t\t\tResourceMethod value = rule.matches(uri, method, request);\n\t\t\tif (value != null) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic Set<Resource> all() {\n\t\treturn resources;\n\t}\n\n\tpublic void register(Resource resource) {\n\t\tadd(this.resourceRoutesCreator.rulesFor(resource));\n\t}\n\n\tpublic <T> String urlFor(Class<T> type, Method method, Object... params) {\n\t\tfor (Route rule : routes) {\n\t\t\tif (rule.getResource().getType().equals(type) && rule.getResourceMethod().getMethod().equals(method)) {\n\t\t\t\tString[] names = provider.parameterNamesFor(method);\n\t\t\t\tClass<?> parameterType = creator.typeFor(rule.getResourceMethod());\n\t\t\t\ttry {\n\t\t\t\t\tObject root = parameterType.getConstructor().newInstance();\n\t\t\t\t\tfor (int i = 0; i < names.length; i++) {\n\t\t\t\t\t\tMethod setter = findSetter(parameterType, \"set\" + Info.capitalize(names[i]));\n\t\t\t\t\t\tsetter.invoke(root, params[i]);\n\t\t\t\t\t}\n\t\t\t\t\treturn rule.urlFor(root);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tthrow new VRaptorException(\"The selected route is invalid for redirection: \" + type.getName() + \".\"\n\t\t\t\t\t\t\t+ method.getName(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new RouteNotFoundException(\"The selected route is invalid for redirection: \" + type.getName() + \".\"\n\t\t\t\t+ method.getName());\n\t}\n\n\tprivate Method findSetter(Class<?> parameterType, String methodName) {\n\t\tfor (Method m : parameterType.getDeclaredMethods()) {\n\t\t\tif (m.getName().equals(methodName)) {\n\t\t\t\treturn m;\n\t\t\t}\n\t\t}\n\t\tthrow new VRaptorException(\n\t\t\t\t\"Unable to redirect using route as setter method for parameter setting was not created. \"\n\t\t\t\t\t\t+ \"Thats probably a bug on your type creator. \"\n\t\t\t\t\t\t+ \"If you are using the default type creator, notify VRaptor.\");\n\t}\n\n\tpublic List<Route> allRoutes() {\n\t\treturn routes;\n\t}\n>>>>>>> rule --> route:vraptor-core/src/main/java/br/com/caelum/vraptor/http/route/DefaultRouter.java\n\n}\n","lineNo":107}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Basic url to resource method translator.\n * \n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class DefaultResourceTranslator implements UrlToResourceTranslator {\n\n\tprivate final Router registry;\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(DefaultResourceTranslator.class);\n\tstatic final String INCLUDE_REQUEST_URI = \"javax.servlet.include.request_uri\";\n\n\tprivate static final String METHOD_PARAMETER = \"_method\";\n\n\tpublic DefaultResourceTranslator(Router registry) {\n\t\tthis.registry = registry;\n\t}\n\n\tpublic ResourceMethod translate(MutableRequest request) {\n\t\tString resourceName = getURI(request);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"trying to access \" + resourceName);\n\t\t}\n\t\tif (resourceName.length() > 1 && resourceName.indexOf('/', 1) != -1) {\n\t\t\tresourceName = resourceName.substring(resourceName.indexOf('/', 1));\n\t\t}\n\t\tString methodName = request.getParameter(METHOD_PARAMETER);\n\t\tif (methodName == null) {\n\t\t\tmethodName = request.getMethod();\n\t\t}\n\t\tResourceMethod resource = registry.parse(resourceName, HttpMethod.valueOf(methodName), request);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"found resource \" + resource);\n\t\t}\n\t\treturn resource;\n\t}\n\n\tprivate String getURI(HttpServletRequest request) {\n\t\tif (request.getAttribute(INCLUDE_REQUEST_URI) != null) {\n\t\t\treturn (String) request.getAttribute(INCLUDE_REQUEST_URI);\n\t\t}\n\t\treturn request.getRequestURI();\n\t}\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.http.route.Router;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * Basic url to resource method translator.\n * \n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class DefaultResourceTranslator implements UrlToResourceTranslator {\n\n\tprivate final Router registry;\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(DefaultResourceTranslator.class);\n\tstatic final String INCLUDE_REQUEST_URI = \"javax.servlet.include.request_uri\";\n\n\tprivate static final String METHOD_PARAMETER = \"_method\";\n\n\tpublic DefaultResourceTranslator(Router registry) {\n\t\tthis.registry = registry;\n\t}\n\n\tpublic ResourceMethod translate(MutableRequest request) {\n\t\tString resourceName = getURI(request);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"trying to access \" + resourceName);\n\t\t}\n\t\tif (resourceName.length() > 1 && resourceName.indexOf('/', 1) != -1) {\n\t\t\tresourceName = resourceName.substring(resourceName.indexOf('/', 1));\n\t\t}\n\t\tString methodName = request.getParameter(METHOD_PARAMETER);\n\t\tif (methodName == null) {\n\t\t\tmethodName = request.getMethod();\n\t\t}\n        HttpMethod requestMethod = HttpMethod.valueOf(methodName.toUpperCase());\n        ResourceMethod resource = registry.parse(resourceName, requestMethod, request);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"found resource \" + resource);\n\t\t}\n\t\treturn resource;\n\t}\n\n\tprivate String getURI(HttpServletRequest request) {\n\t\tif (request.getAttribute(INCLUDE_REQUEST_URI) != null) {\n\t\t\treturn (String) request.getAttribute(INCLUDE_REQUEST_URI);\n\t\t}\n\t\treturn request.getRequestURI();\n\t}\n\n}\n","lineNo":73}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\n\nimport ognl.Evaluation;\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * Capable of instantiating lists. These are registered for later removal of\n * null entitres.\n * \n * @author Guilherme Silveira\n */\npublic class ListNullHandler {\n\n\t@SuppressWarnings(\"unchecked\")\n\tObject instantiate(Container container, Object target, Object property, Evaluation evaluation)\n\t\t\tthrows InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {\n\n\t\t// creating instance\n\t\tObject listHolder = evaluation.getSource();\n\t\tString listPropertyName = evaluation.getNode().toString();\n\t\tMethod listSetter = ReflectionBasedNullHandler.findMethod(listHolder.getClass(), \"set\"\n\t\t\t\t+ Info.capitalize(listPropertyName), target.getClass(), null);\n\t\tType[] types = listSetter.getGenericParameterTypes();\n\t\tType type = types[0];\n\t\tif (!(type instanceof ParameterizedType)) {\n\t\t\tthrow new VRaptorException(\"Vraptor does not support non-generic collection at \"\n\t\t\t\t\t+ listSetter.getName());\n\t\t}\n\t\tClass typeToInstantiate = (Class) ((ParameterizedType) type).getActualTypeArguments()[0];\n\t\tObject instance = typeToInstantiate.getConstructor().newInstance();\n\n\t\t// setting the position\n\t\tint position = (Integer) property;\n\t\tList list = (List) target;\n\t\twhile (list.size() <= position) {\n\t\t\tlist.add(null);\n\t\t}\n\t\tlist.set(position, instance);\n\n\t\t// registering for null entries removal\n\t\tEmptyElementsRemoval removal = container.instanceFor(EmptyElementsRemoval.class);\n\t\tremoval.add(list);\n\n\t\treturn instance;\n\t}\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\n\nimport ognl.Evaluation;\nimport br.com.caelum.vraptor.VRaptorException;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * Capable of instantiating lists. These are registered for later removal of\n * null entitres.\n * \n * @author Guilherme Silveira\n */\npublic class ListNullHandler {\n\n\t@SuppressWarnings(\"unchecked\")\n\tObject instantiate(Container container, Object target, Object property, Evaluation evaluation)\n\t\t\tthrows InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {\n\n\t\t// creating instance\n\t\tObject listHolder = evaluation.getSource();\n\t\tString listPropertyName = evaluation.getNode().toString();\n\t\tMethod listSetter = ReflectionBasedNullHandler.findMethod(listHolder.getClass(), \"set\"\n\t\t\t\t+ Info.capitalize(listPropertyName), target.getClass(), null);\n\t\tType[] types = listSetter.getGenericParameterTypes();\n\t\tType type = types[0];\n\t\tif (!(type instanceof ParameterizedType)) {\n\t\t\tthrow new VRaptorException(\"Vraptor does not support non-generic collection at \"\n\t\t\t\t\t+ listSetter.getName());\n\t\t}\n\t\tClass typeToInstantiate = (Class) ((ParameterizedType) type).getActualTypeArguments()[0];\n\t\tConstructor constructor = typeToInstantiate.getConstructor();\n\t\tconstructor.setAccessible(true);\n\t\tObject instance = constructor.newInstance();\n\n\t\t// setting the position\n\t\tint position = (Integer) property;\n\t\tList list = (List) target;\n\t\twhile (list.size() <= position) {\n\t\t\tlist.add(null);\n\t\t}\n\t\tlist.set(position, instance);\n\n\t\t// registering for null entries removal\n\t\tEmptyElementsRemoval removal = container.instanceFor(EmptyElementsRemoval.class);\n\t\tremoval.add(list);\n\n\t\treturn instance;\n\t}\n\n}\n","lineNo":68}
{"Smelly Sample":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.nullValue;\n\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.hamcrest.Matchers;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.VRaptorMockery;\nimport br.com.caelum.vraptor.http.ListOfRules;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.NoRoutesCreator;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\n\npublic class DefaultRouterTest {\n\n\tprivate Router router;\n\tprivate VRaptorMockery mockery;\n\tprivate VRaptorRequest request;\n\n\t@org.junit.Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new NoRoutesCreator(), null,null);\n\t}\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n    @br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate Method method(String name, Class... types) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(name, types);\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).list();\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void ignoresAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleIfDifferentCreatorsWereUsed() throws SecurityException, NoSuchMethodException {\n\t\tfinal ResourceMethod resourceMethod = mockery.mock(ResourceMethod.class);\n\t\tfinal Rule customRule = new RuleForMethod(resourceMethod);\n\t\trouter.add(new ListOfRules() {\n\t\t\tpublic List<Rule> getRules() {\n\t\t\t\treturn Arrays.asList(customRule);\n\t\t\t}\n\t\t});\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients\").is(MyControl.class).list(); // if not\n\t\t\t\t// defined, any http method is allowed\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients\", HttpMethod.POST, request), is(equalTo(resourceMethod)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void registerExtraParametersFromAcessedUrl() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/{dog.id}\").is(MyControl.class).show(null);\n\t\t\t}\n\t\t});\n\t\tResourceMethod method = router.parse(\"/clients/45\", HttpMethod.POST, request);\n\t\tassertThat(request.getParameter(\"dog.id\"), is(equalTo(\"45\")));\n\t\tassertThat(method, is(VRaptorMatchers.resourceMethod(method(\"show\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients*\").with(HttpMethod.POST).is(MyControl.class).unknownMethod();\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clientsWhatever\", HttpMethod.POST, request), is(VRaptorMatchers\n\t\t\t\t.resourceMethod(method(\"unknownMethod\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void testReturnsNullIfResourceNotFound() {\n\t\tResourceMethod method = router.parse(\"unknown_id\", HttpMethod.POST, null);\n\t\tassertThat(method, is(Matchers.nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRegisterVRaptorInfoByDefault() throws SecurityException, NoSuchMethodException {\n\t\tResourceMethod methodFound = router.parse(\"/is_using_vraptor\", HttpMethod.GET, null);\n\t\tTypeSafeMatcher<ResourceMethod> expectedMethod = VRaptorMatchers.resourceMethod(VRaptorInfo.class.getMethod(\"info\"));\n\t\tassertThat(methodFound, is(expectedMethod));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\n    @br.com.caelum.vraptor.Resource\n    class MyResource {\n        public void notAnnotated() {\n        }\n\n        @Path(\"/myPath\")\n        public void customizedPath() {\n        }\n        \n        @Path(\"/*/customPath\")\n        public void starPath() {\n        }\n    }\n    \n    @br.com.caelum.vraptor.Resource\n    class InheritanceExample extends MyResource {\n    }\n    \n\n\n    @Test\n    public void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesCreator(), null,null);\n\t\trouter.register(mockery.resource(MyResource.class));\n        Method method = mockery.methodFor(MyResource.class, \"starPath\").getMethod();\n        String url = router.urlFor(MyResource.class, method, new Object[] {});\n        assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesCreator(), null,null);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\trouter.register(mockery.resource(InheritanceExample.class));\n        Method method = mockery.methodFor(MyResource.class, \"notAnnotated\").getMethod();\n        String url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n        assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesCreator(), null,null);\n\t\trouter.register(mockery.resource(MyResource.class));\n        Method method = mockery.methodFor(MyResource.class, \"customizedPath\").getMethod();\n        String url = router.urlFor(MyResource.class, method, new Object[] {});\n        assertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n        mockery.assertIsSatisfied();\n    }\n\n\n\n\n}\n","Method after Refactoring":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.route;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.nullValue;\n\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.hamcrest.Matchers;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.jmock.Expectations;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.VRaptorMockery;\nimport br.com.caelum.vraptor.http.ListOfRules;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.NoRoutesCreator;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\n\npublic class DefaultRouterTest {\n\n\tprivate Router router;\n\tprivate VRaptorMockery mockery;\n\tprivate VRaptorRequest request;\n\tprivate ParameterNameProvider provider;\n\tprivate TypeCreator creator;\n\n\t@org.junit.Before\n\tpublic void setup() {\n\t\tthis.mockery = new VRaptorMockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.provider = mockery.mock(ParameterNameProvider.class);\n\t\tthis.creator = mockery.mock(TypeCreator.class);\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new NoRoutesCreator(), provider, creator);\n\t}\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate Method method(String name, Class... types) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(name, types);\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).list();\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void ignoresAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleIfDifferentCreatorsWereUsed() throws SecurityException, NoSuchMethodException {\n\t\tfinal ResourceMethod resourceMethod = mockery.mock(ResourceMethod.class);\n\t\tfinal Rule customRule = new RuleForMethod(resourceMethod);\n\t\trouter.add(new ListOfRules() {\n\t\t\tpublic List<Rule> getRules() {\n\t\t\t\treturn Arrays.asList(customRule);\n\t\t\t}\n\t\t});\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients\").is(MyControl.class).list(); // if not\n\t\t\t\t// defined, any http method is allowed\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients\", HttpMethod.POST, request), is(equalTo(resourceMethod)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void registerExtraParametersFromAcessedUrl() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/{dog.id}\").is(MyControl.class).show(null);\n\t\t\t}\n\t\t});\n\t\tResourceMethod method = router.parse(\"/clients/45\", HttpMethod.POST, request);\n\t\tassertThat(request.getParameter(\"dog.id\"), is(equalTo(\"45\")));\n\t\tassertThat(method, is(VRaptorMatchers.resourceMethod(method(\"show\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients*\").with(HttpMethod.POST).is(MyControl.class).unknownMethod();\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clientsWhatever\", HttpMethod.POST, request), is(VRaptorMatchers\n\t\t\t\t.resourceMethod(method(\"unknownMethod\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void testReturnsNullIfResourceNotFound() {\n\t\tResourceMethod method = router.parse(\"unknown_id\", HttpMethod.POST, null);\n\t\tassertThat(method, is(Matchers.nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRegisterVRaptorInfoByDefault() throws SecurityException, NoSuchMethodException {\n\t\tResourceMethod methodFound = router.parse(\"/is_using_vraptor\", HttpMethod.GET, null);\n\t\tTypeSafeMatcher<ResourceMethod> expectedMethod = VRaptorMatchers.resourceMethod(VRaptorInfo.class\n\t\t\t\t.getMethod(\"info\"));\n\t\tassertThat(methodFound, is(expectedMethod));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass MyResource {\n\t\tpublic void notAnnotated() {\n\t\t}\n\n\t\t@Path(\"/myPath\")\n\t\tpublic void customizedPath() {\n\t\t}\n\n\t\t@Path(\"/*/customPath\")\n\t\tpublic void starPath() {\n\t\t}\n\t}\n\n\t@br.com.caelum.vraptor.Resource\n\tclass InheritanceExample extends MyResource {\n\t}\n\n\t@Test\n\tpublic void usesAsteriskBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesCreator(), provider,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal ResourceMethod resourceMethod = mockery.methodFor(MyResource.class, \"starPath\");\n\t\tfinal Method method = resourceMethod.getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method); will(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method))); will(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAInheritedResourceBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesCreator(), provider,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\trouter.register(mockery.resource(InheritanceExample.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"notAnnotated\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method); will(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method))); will(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(InheritanceExample.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void canTranslateAnnotatedMethodBothWays() throws NoSuchMethodException {\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration(), new PathAnnotationRoutesCreator(), provider,\n\t\t\t\tcreator);\n\t\trouter.register(mockery.resource(MyResource.class));\n\t\tfinal Method method = mockery.methodFor(MyResource.class, \"customizedPath\").getMethod();\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(provider).parameterNamesFor(method); will(returnValue(new String[] {}));\n\t\t\t\tone(creator).typeFor(with(VRaptorMatchers.resourceMethod(method))); will(returnValue(Object.class));\n\t\t\t}\n\t\t});\n\t\tString url = router.urlFor(MyResource.class, method, new Object[] {});\n\t\tassertThat(router.parse(url, HttpMethod.POST, null).getMethod(), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\n","lineNo":252}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\n\nimport ognl.ObjectNullHandler;\nimport ognl.OgnlContext;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * This null handler is a decorator for ognl api to invoke vraptor's api in\n * order to be able to instantiate collections, arrays and custom types whenever\n * the property is null.\n *\n * @author Guilherme Silveira\n */\npublic class ReflectionBasedNullHandler extends ObjectNullHandler {\n\n    private final ListNullHandler list = new ListNullHandler();\n    private final GenericNullHandler generic = new GenericNullHandler();\n\n    @Override\n\t@SuppressWarnings(\"unchecked\")\n    public Object nullPropertyValue(Map context, Object target, Object property) {\n\n        OgnlContext ctx = (OgnlContext) context;\n\n        int indexInParent = ctx.getCurrentEvaluation().getNode().getIndexInParent();\n        int maxIndex = ctx.getRootEvaluation().getNode().jjtGetNumChildren() - 1;\n\n        if (!(indexInParent != -1 && indexInParent < maxIndex)) {\n            return null;\n        }\n\n        try {\n\n            if (target instanceof List) {\n                return list.instantiate(context, target, property, ctx);\n            }\n\n            String propertyCapitalized = Info.capitalize((String) property);\n\t\t\tMethod getter = findMethod(target.getClass(), \"get\" + propertyCapitalized, target.getClass(), null);\n            Type returnType = getter.getGenericReturnType();\n            if (returnType instanceof ParameterizedType) {\n                ParameterizedType paramType = (ParameterizedType) returnType;\n                returnType = paramType.getRawType();\n            }\n\n            Class<?> baseType = (Class<?>) returnType;\n            Object instance;\n            if (baseType.isArray()) {\n                instance = instantiateArray(baseType);\n            } else {\n                instance = generic.instantiate(baseType, ctx);\n            }\n\n            Method setter = findMethod(target.getClass(), \"set\" + propertyCapitalized, target.getClass(), getter.getReturnType());\n            setter.invoke(target, instance);\n            return instance;\n\n        } catch (InstantiationException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (IllegalAccessException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (InvocationTargetException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (SecurityException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (NoSuchMethodException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        }\n    }\n\n    private Object instantiateArray(Class<?> baseType) {\n        return Array.newInstance(baseType.getComponentType(), 0);\n    }\n\n    static Method findMethod(Class<? extends Object> type, String name, Class<? extends Object> baseType, Class parameterType) {\n        Method[] methods = type.getDeclaredMethods();\n        for (Method method : methods) {\n            if (method.getName().equals(name)) {\n            \tif(parameterType==null || (method.getParameterTypes().length==1 && method.getParameterTypes()[0].equals(parameterType))) {\n            \t\treturn method;\n            \t}\n            }\n        }\n        if (type.equals(Object.class)) {\n            // TODO better\n            throw new IllegalArgumentException(\"Unable to find method for \" + name + \" @ \" + baseType.getName());\n        }\n        return findMethod(type.getSuperclass(), name, type, parameterType);\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\n\nimport ognl.ObjectNullHandler;\nimport ognl.OgnlContext;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * This null handler is a decorator for ognl api to invoke vraptor's api in\n * order to be able to instantiate collections, arrays and custom types whenever\n * the property is null.\n *\n * @author Guilherme Silveira\n */\npublic class ReflectionBasedNullHandler extends ObjectNullHandler {\n\n    private final ListNullHandler list = new ListNullHandler();\n    private final GenericNullHandler generic = new GenericNullHandler();\n\n    @Override\n\t@SuppressWarnings(\"unchecked\")\n    public Object nullPropertyValue(Map context, Object target, Object property) {\n\n        OgnlContext ctx = (OgnlContext) context;\n\n        int indexInParent = ctx.getCurrentEvaluation().getNode().getIndexInParent();\n        int maxIndex = ctx.getRootEvaluation().getNode().jjtGetNumChildren() - 1;\n\n        if (!(indexInParent != -1 && indexInParent < maxIndex)) {\n            return null;\n        }\n\n        try {\n\n            Container container = (Container) context.get(Container.class);\n            if (target instanceof List) {\n                return list.instantiate(container, target, property, ctx.getCurrentEvaluation().getPrevious());\n            }\n\n            String propertyCapitalized = Info.capitalize((String) property);\n\t\t\tMethod getter = findMethod(target.getClass(), \"get\" + propertyCapitalized, target.getClass(), null);\n            Type returnType = getter.getGenericReturnType();\n            if (returnType instanceof ParameterizedType) {\n                ParameterizedType paramType = (ParameterizedType) returnType;\n                returnType = paramType.getRawType();\n            }\n\n            Class<?> baseType = (Class<?>) returnType;\n            Object instance;\n            if (baseType.isArray()) {\n                instance = instantiateArray(baseType);\n            } else {\n                instance = generic.instantiate(baseType, container);\n            }\n\n            Method setter = findMethod(target.getClass(), \"set\" + propertyCapitalized, target.getClass(), getter.getReturnType());\n            setter.invoke(target, instance);\n            return instance;\n\n        } catch (InstantiationException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (IllegalAccessException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (InvocationTargetException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (SecurityException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (NoSuchMethodException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        }\n    }\n\n    private Object instantiateArray(Class<?> baseType) {\n        return Array.newInstance(baseType.getComponentType(), 0);\n    }\n\n    static <P> Method findMethod(Class<? extends Object> type, String name, Class<? extends Object> baseType, Class<P> parameterType) {\n        Method[] methods = type.getDeclaredMethods();\n        for (Method method : methods) {\n            if (method.getName().equals(name)) {\n            \tif(parameterType==null || (method.getParameterTypes().length==1 && method.getParameterTypes()[0].equals(parameterType))) {\n            \t\treturn method;\n            \t}\n            }\n        }\n        if (type.equals(Object.class)) {\n            // TODO better\n            throw new IllegalArgumentException(\"Unable to find method for \" + name + \" @ \" + baseType.getName());\n        }\n        return findMethod(type.getSuperclass(), name, type, parameterType);\n    }\n\n}\n","lineNo":72}
{"Smelly Sample":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.nullValue;\n\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.hamcrest.Matchers;\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.MethodLookupBuilder;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceAndMethodLookup;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\n\npublic class DefaultRouterTest {\n\n\tprivate Router router;\n\tprivate Mockery mockery;\n\tprivate VRaptorRequest request;\n\tprivate MethodLookupBuilder builder;\n\tprivate ResourceAndMethodLookup methodLookup;\n\n\t@org.junit.Before\n\tpublic void setup() {\n\t\tthis.mockery = new Mockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.builder = mockery.mock(MethodLookupBuilder.class);\n\t\tthis.methodLookup = mockery.mock(ResourceAndMethodLookup.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(builder).lookupFor(with(VRaptorMatchers.resource(VRaptorInfo.class)));\n\t\t\t\twill(returnValue(methodLookup));\n\t\t\t}\n\t\t});\n\t\tthis.router = new DefaultRouter(builder, new NoRoutesConfiguration());\n\t}\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\tprivate Method method(String name, Class... types) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(name, types);\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).list();\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void ignoresAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(methodLookup).methodFor(\"/clients/add\", HttpMethod.POST); will(returnValue(null));\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleIfDifferentCreatorsWereUsed() throws SecurityException, NoSuchMethodException {\n\t\tfinal ResourceMethod resourceMethod = mockery.mock(ResourceMethod.class);\n\t\tfinal Rule customRule = new Rule() {\n\n\t\t\tpublic ResourceMethod matches(String uri, HttpMethod method, MutableRequest request) {\n\t\t\t\treturn resourceMethod;\n\t\t\t}\n\n\t\t\tpublic Resource getResource() {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t\trouter.add(new ListOfRules() {\n\t\t\tpublic List<Rule> getRules() {\n\t\t\t\treturn Arrays.asList(customRule);\n\t\t\t}\n\t\t});\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients\").is(MyControl.class).list(); // if not\n\t\t\t\t// defined,\n\t\t\t\t// any http\n\t\t\t\t// method is\n\t\t\t\t// allowed\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients\", HttpMethod.POST, request), is(equalTo(resourceMethod)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void registerExtraParametersFromAcessedUrl() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/{dog.id}\").is(MyControl.class).show(null);\n\t\t\t\t;\n\t\t\t}\n\t\t});\n\t\tResourceMethod method = router.parse(\"/clients/45\", HttpMethod.POST, request);\n\t\tassertThat(request.getParameter(\"dog.id\"), is(equalTo(\"45\")));\n\t\tassertThat(method, is(VRaptorMatchers.resourceMethod(method(\"show\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients*\").with(HttpMethod.POST).is(MyControl.class).unknownMethod();\n\t\t\t\t;\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clientsWhatever\", HttpMethod.POST, request), is(VRaptorMatchers\n\t\t\t\t.resourceMethod(method(\"unknownMethod\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void testReturnsResourceIfFound() throws SecurityException {\n\t\tfinal ResourceMethod method = mockery.mock(ResourceMethod.class);\n\t\tfinal Resource resource = mockery.mock(Resource.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(builder).lookupFor(resource);\n\t\t\t\twill(returnValue(methodLookup));\n\t\t\t\tone(methodLookup).methodFor(\"/clients\", HttpMethod.POST);\n\t\t\t\twill(returnValue(method));\n\t\t\t}\n\t\t});\n\t\trouter.register(resource);\n\t\tassertThat(router.parse(\"/clients\", HttpMethod.POST, null), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void testReturnsNullIfResourceNotFound() {\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(methodLookup).methodFor(\"unknown_id\", HttpMethod.POST);\n\t\t\t\twill(returnValue(null));\n\t\t\t}\n\t\t});\n\t\tResourceMethod method = router.parse(\"unknown_id\", HttpMethod.POST, null);\n\t\tassertThat(method, is(Matchers.nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRegisterVRaptorInfoByDefault() throws SecurityException {\n\t\tfinal ResourceMethod method = mockery.mock(ResourceMethod.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(methodLookup).methodFor(\"/is_using_vraptor\", HttpMethod.GET);\n\t\t\t\twill(returnValue(method));\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/is_using_vraptor\", HttpMethod.GET, null), is(equalTo(method)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldAddAllResourcesToACommonList() {\n\t\tfinal Resource myResource = mockery.mock(Resource.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(builder).lookupFor(myResource);\n\t\t\t\twill(returnValue(null));\n\t\t\t}\n\t\t});\n\t\trouter.register(myResource);\n\t\tassertThat(router.all(), Matchers.hasItem(myResource));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n}\n","Method after Refactoring":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.nullValue;\n\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.hamcrest.Matchers;\nimport org.hamcrest.TypeSafeMatcher;\nimport org.jmock.Mockery;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.interceptor.VRaptorMatchers;\nimport br.com.caelum.vraptor.resource.HttpMethod;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.VRaptorInfo;\n\npublic class DefaultRouterTest {\n\n\tprivate Router router;\n\tprivate Mockery mockery;\n\tprivate VRaptorRequest request;\n\n\t@org.junit.Before\n\tpublic void setup() {\n\t\tthis.mockery = new Mockery();\n\t\tthis.request = new VRaptorRequest(mockery.mock(HttpServletRequest.class));\n\t\tthis.router = new DefaultRouter(new NoRoutesConfiguration());\n\t}\n\n\tclass Dog {\n\t\tprivate Long id;\n\n\t\tpublic void setId(Long id) {\n\t\t\tthis.id = id;\n\t\t}\n\n\t\tpublic Long getId() {\n\t\t\treturn id;\n\t\t}\n\t}\n\n\tpublic static class MyControl {\n\t\tpublic void add(Dog object) {\n\t\t}\n\n\t\tpublic void unknownMethod() {\n\t\t}\n\n\t\tpublic void list() {\n\t\t}\n\n\t\tpublic void show(Dog dog) {\n\t\t}\n\t}\n\n\t@Test\n\tpublic void acceptsASingleMappingRule() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tprivate Method method(String name, Class... types) throws SecurityException, NoSuchMethodException {\n\t\treturn MyControl.class.getDeclaredMethod(name, types);\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleMatchingThePattern() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).add(null);\n\t\t\t\trouteFor(\"/clients/add\").is(MyControl.class).list();\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void acceptsAnHttpMethodLimitedMappingRuleWithBothMethods() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.POST).with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.GET, request), is(VRaptorMatchers.resourceMethod(method(\n\t\t\t\t\"add\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void ignoresAnHttpMethodLimitedMappingRule() throws NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/add\").with(HttpMethod.GET).is(MyControl.class).add(null);\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients/add\", HttpMethod.POST, request), is(nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void usesTheFirstRegisteredRuleIfDifferentCreatorsWereUsed() throws SecurityException, NoSuchMethodException {\n\t\tfinal ResourceMethod resourceMethod = mockery.mock(ResourceMethod.class);\n\t\tfinal Rule customRule = new Rule() {\n\n\t\t\tpublic ResourceMethod matches(String uri, HttpMethod method, MutableRequest request) {\n\t\t\t\treturn resourceMethod;\n\t\t\t}\n\n\t\t\tpublic Resource getResource() {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\t\trouter.add(new ListOfRules() {\n\t\t\tpublic List<Rule> getRules() {\n\t\t\t\treturn Arrays.asList(customRule);\n\t\t\t}\n\t\t});\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients\").is(MyControl.class).list(); // if not\n\t\t\t\t// defined, any http method is allowed\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clients\", HttpMethod.POST, request), is(equalTo(resourceMethod)));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void registerExtraParametersFromAcessedUrl() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients/{dog.id}\").is(MyControl.class).show(null);\n\t\t\t}\n\t\t});\n\t\tResourceMethod method = router.parse(\"/clients/45\", HttpMethod.POST, request);\n\t\tassertThat(request.getParameter(\"dog.id\"), is(equalTo(\"45\")));\n\t\tassertThat(method, is(VRaptorMatchers.resourceMethod(method(\"show\", Dog.class))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void worksWithBasicRegexEvaluation() throws SecurityException, NoSuchMethodException {\n\t\trouter.add(new Rules() {\n\t\t\t{\n\t\t\t\trouteFor(\"/clients*\").with(HttpMethod.POST).is(MyControl.class).unknownMethod();\n\t\t\t}\n\t\t});\n\t\tassertThat(router.parse(\"/clientsWhatever\", HttpMethod.POST, request), is(VRaptorMatchers\n\t\t\t\t.resourceMethod(method(\"unknownMethod\"))));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void testReturnsNullIfResourceNotFound() {\n\t\tResourceMethod method = router.parse(\"unknown_id\", HttpMethod.POST, null);\n\t\tassertThat(method, is(Matchers.nullValue()));\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\t@Test\n\tpublic void shouldRegisterVRaptorInfoByDefault() throws SecurityException, NoSuchMethodException {\n\t\tResourceMethod methodFound = router.parse(\"/is_using_vraptor\", HttpMethod.GET, null);\n\t\tTypeSafeMatcher<ResourceMethod> expectedMethod = VRaptorMatchers.resourceMethod(VRaptorInfo.class.getMethod(\"info\"));\n\t\tassertThat(methodFound, is(expectedMethod));\n\t\tmockery.assertIsSatisfied();\n\t}\n}\n","lineNo":220}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.ResultException;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ViewsPropertiesPageResult implements PageResult {\n\n\tprivate final Config config;\n\tprivate final HttpServletRequest request;\n\tprivate final PathResolver resolver;\n\tprivate final ResourceMethod method;\n\tprivate final HttpServletResponse response;\n\tprivate final ExpressionEvaluator evaluator = new ExpressionEvaluator();\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(ViewsPropertiesPageResult.class);\n\tprivate final VRaptorRequest webRequest;\n\n\tpublic ViewsPropertiesPageResult(Config config, PathResolver resolver, RequestInfo requestInfo,\n\t\t\tVRaptorRequest webRequest) {\n\t\tthis.config = config;\n\t\tthis.webRequest = webRequest;\n\t\tthis.request = webRequest.getRequest();\n\t\tthis.resolver = resolver;\n\t\tthis.method = requestInfo.getResourceMethod();\n\t\tthis.response = webRequest.getResponse();\n\t}\n\n\tpublic void forward(String result) {\n\t\ttry {\n\t\t\tResource resource = method.getResource();\n\t\t\tif (!Info.isOldComponent(resource)) {\n\t\t\t\trequest.getRequestDispatcher(resolver.pathFor(method, result)).forward(request, response);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tString key = Info.getComponentName(resource.getType()) + \".\" + Info.getLogicName(method.getMethod()) + \".\"\n\t\t\t\t\t+ result;\n\n\t\t\tString path = config.getForwardFor(key);\n\n\t\t\tif (path == null) {\n\t\t\t\trequest.getRequestDispatcher(resolver.pathFor(method, result)).forward(request, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tresult = evaluator.parseExpression(path, webRequest);\n\t\t\t\t} catch (ExpressionEvaluationException e) {\n\t\t\t\t\tthrow new ServletException(\"Unable to redirect while evaluating expression '\" + path + \"'.\", e);\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"overriden view found for \" + key + \" : \" + path + \" expressed as \" + result);\n\t\t\t\t}\n\t\t\t\tif (result.startsWith(\"redirect:\")) {\n\t\t\t\t\tresponse.sendRedirect(result.substring(9));\n\t\t\t\t} else {\n\t\t\t\t\trequest.getRequestDispatcher(result).forward(request, response);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (ServletException e) {\n\t\t\tthrow new ResultException(e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n\tpublic void include(String result) {\n\t\ttry {\n\t\t\trequest.getRequestDispatcher(resolver.pathFor(method, result)).include(request, response);\n\t\t} catch (ServletException e) {\n\t\t\tthrow new ResultException(e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n\tpublic void include(String key, Object value) {\n\t\trequest.setAttribute(key, value);\n\t}\n\n\tpublic void redirect(String url) {\n\t\ttry {\n\t\t\tresponse.sendRedirect(url);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.ResultException;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ViewsPropertiesPageResult implements PageResult {\n\n\tprivate final Config config;\n\tprivate final HttpServletRequest request;\n\tprivate final PathResolver resolver;\n\tprivate final ResourceMethod method;\n\tprivate final HttpServletResponse response;\n\tprivate final ExpressionEvaluator evaluator = new ExpressionEvaluator();\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(ViewsPropertiesPageResult.class);\n\tprivate final VRaptorRequest webRequest;\n\n\tpublic ViewsPropertiesPageResult(Config config, PathResolver resolver, RequestInfo requestInfo,\n\t\t\tVRaptorRequest webRequest) {\n\t\tthis.config = config;\n\t\tthis.webRequest = webRequest;\n\t\tthis.request = webRequest.getRequest();\n\t\tthis.resolver = resolver;\n\t\tthis.method = requestInfo.getResourceMethod();\n\t\tthis.response = webRequest.getResponse();\n\t}\n\n\tpublic void forward(String result) {\n\t\ttry {\n\t\t\tResource resource = method.getResource();\n\t\t\tif (!Info.isOldComponent(resource)) {\n\t\t\t\tString forwardPath = resolver.pathFor(method, result);\n\t\t\t\trequest.getRequestDispatcher(forwardPath).forward(request, response);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tString key = Info.getComponentName(resource.getType()) + \".\" + Info.getLogicName(method.getMethod()) + \".\"\n\t\t\t\t\t+ result;\n\n\t\t\tString path = config.getForwardFor(key);\n\n\t\t\tif (path == null) {\n\t\t\t\tString forwardPath = resolver.pathFor(method, result);\n\t\t\t\trequest.getRequestDispatcher(forwardPath).forward(request, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tresult = evaluator.parseExpression(path, webRequest);\n\t\t\t\t} catch (ExpressionEvaluationException e) {\n\t\t\t\t\tthrow new ServletException(\"Unable to redirect while evaluating expression '\" + path + \"'.\", e);\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"overriden view found for \" + key + \" : \" + path + \" expressed as \" + result);\n\t\t\t\t}\n\t\t\t\tif (result.startsWith(\"redirect:\")) {\n\t\t\t\t\tresponse.sendRedirect(result.substring(9));\n\t\t\t\t} else {\n\t\t\t\t\trequest.getRequestDispatcher(result).forward(request, response);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (ServletException e) {\n\t\t\tthrow new ResultException(e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n\tpublic void include(String result) {\n\t\ttry {\n\t\t\trequest.getRequestDispatcher(resolver.pathFor(method, result)).include(request, response);\n\t\t} catch (ServletException e) {\n\t\t\tthrow new ResultException(e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n\tpublic void include(String key, Object value) {\n\t\trequest.setAttribute(key, value);\n\t}\n\n\tpublic void redirect(String url) {\n\t\ttry {\n\t\t\tresponse.sendRedirect(url);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n}\n","lineNo":46}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.ResultException;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ViewsPropertiesPageResult implements PageResult {\n\n\tprivate final Config config;\n\tprivate final HttpServletRequest request;\n\tprivate final PathResolver resolver;\n\tprivate final ResourceMethod method;\n\tprivate final HttpServletResponse response;\n\tprivate final ExpressionEvaluator evaluator = new ExpressionEvaluator();\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(ViewsPropertiesPageResult.class);\n\tprivate final VRaptorRequest webRequest;\n\n\tpublic ViewsPropertiesPageResult(Config config, PathResolver resolver, RequestInfo requestInfo,\n\t\t\tVRaptorRequest webRequest) {\n\t\tthis.config = config;\n\t\tthis.webRequest = webRequest;\n\t\tthis.request = webRequest.getRequest();\n\t\tthis.resolver = resolver;\n\t\tthis.method = requestInfo.getResourceMethod();\n\t\tthis.response = webRequest.getResponse();\n\t}\n\n\tpublic void forward(String result) {\n\t\ttry {\n\t\t\tResource resource = method.getResource();\n\t\t\tif (!Info.isOldComponent(resource)) {\n\t\t\t\trequest.getRequestDispatcher(resolver.pathFor(method, result)).forward(request, response);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tString key = Info.getComponentName(resource.getType()) + \".\" + Info.getLogicName(method.getMethod()) + \".\"\n\t\t\t\t\t+ result;\n\n\t\t\tString path = config.getForwardFor(key);\n\n\t\t\tif (path == null) {\n\t\t\t\trequest.getRequestDispatcher(resolver.pathFor(method, result)).forward(request, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tresult = evaluator.parseExpression(path, webRequest);\n\t\t\t\t} catch (ExpressionEvaluationException e) {\n\t\t\t\t\tthrow new ServletException(\"Unable to redirect while evaluating expression '\" + path + \"'.\", e);\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"overriden view found for \" + key + \" : \" + path + \" expressed as \" + result);\n\t\t\t\t}\n\t\t\t\tif (result.startsWith(\"redirect:\")) {\n\t\t\t\t\tresponse.sendRedirect(result.substring(9));\n\t\t\t\t} else {\n\t\t\t\t\trequest.getRequestDispatcher(result).forward(request, response);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (ServletException e) {\n\t\t\tthrow new ResultException(e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n\tpublic void include(String result) {\n\t\ttry {\n\t\t\trequest.getRequestDispatcher(resolver.pathFor(method, result)).include(request, response);\n\t\t} catch (ServletException e) {\n\t\t\tthrow new ResultException(e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n\tpublic void include(String key, Object value) {\n\t\trequest.setAttribute(key, value);\n\t}\n\n\tpublic void redirect(String url) {\n\t\ttry {\n\t\t\tresponse.sendRedirect(url);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.ResultException;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ViewsPropertiesPageResult implements PageResult {\n\n\tprivate final Config config;\n\tprivate final HttpServletRequest request;\n\tprivate final PathResolver resolver;\n\tprivate final ResourceMethod method;\n\tprivate final HttpServletResponse response;\n\tprivate final ExpressionEvaluator evaluator = new ExpressionEvaluator();\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(ViewsPropertiesPageResult.class);\n\tprivate final VRaptorRequest webRequest;\n\n\tpublic ViewsPropertiesPageResult(Config config, PathResolver resolver, RequestInfo requestInfo,\n\t\t\tVRaptorRequest webRequest) {\n\t\tthis.config = config;\n\t\tthis.webRequest = webRequest;\n\t\tthis.request = webRequest.getRequest();\n\t\tthis.resolver = resolver;\n\t\tthis.method = requestInfo.getResourceMethod();\n\t\tthis.response = webRequest.getResponse();\n\t}\n\n\tpublic void forward(String result) {\n\t\ttry {\n\t\t\tResource resource = method.getResource();\n\t\t\tif (!Info.isOldComponent(resource)) {\n\t\t\t\tString forwardPath = resolver.pathFor(method, result);\n\t\t\t\trequest.getRequestDispatcher(forwardPath).forward(request, response);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tString key = Info.getComponentName(resource.getType()) + \".\" + Info.getLogicName(method.getMethod()) + \".\"\n\t\t\t\t\t+ result;\n\n\t\t\tString path = config.getForwardFor(key);\n\n\t\t\tif (path == null) {\n\t\t\t\tString forwardPath = resolver.pathFor(method, result);\n\t\t\t\trequest.getRequestDispatcher(forwardPath).forward(request, response);\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tresult = evaluator.parseExpression(path, webRequest);\n\t\t\t\t} catch (ExpressionEvaluationException e) {\n\t\t\t\t\tthrow new ServletException(\"Unable to redirect while evaluating expression '\" + path + \"'.\", e);\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"overriden view found for \" + key + \" : \" + path + \" expressed as \" + result);\n\t\t\t\t}\n\t\t\t\tif (result.startsWith(\"redirect:\")) {\n\t\t\t\t\tresponse.sendRedirect(result.substring(9));\n\t\t\t\t} else {\n\t\t\t\t\trequest.getRequestDispatcher(result).forward(request, response);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (ServletException e) {\n\t\t\tthrow new ResultException(e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n\tpublic void include(String result) {\n\t\ttry {\n\t\t\trequest.getRequestDispatcher(resolver.pathFor(method, result)).include(request, response);\n\t\t} catch (ServletException e) {\n\t\t\tthrow new ResultException(e);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n\tpublic void include(String key, Object value) {\n\t\trequest.setAttribute(key, value);\n\t}\n\n\tpublic void redirect(String url) {\n\t\ttry {\n\t\t\tresponse.sendRedirect(url);\n\t\t} catch (IOException e) {\n\t\t\tthrow new ResultException(e);\n\t\t}\n\t}\n\n}\n","lineNo":56}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.i18n.FixedMessage;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ValidatorInterceptor implements Interceptor {\n\n    private final ParametersProvider provider;\n    private final PageResult result;\n\n    private static final Logger logger = LoggerFactory.getLogger(ValidatorInterceptor.class);\n    private final ValidationErrors errors;\n    private final OutjectionInterceptor outjection;\n\tprivate final Localization localization;\n\n    public ValidatorInterceptor(ParametersProvider provider, PageResult result, ValidationErrors errors, OutjectionInterceptor outjection, Localization localization) {\n        this.provider = provider;\n        this.result = result;\n        this.errors = errors;\n        this.outjection = outjection;\n\t\tthis.localization = localization;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {\n        if (Info.isOldComponent(method.getResource())) {\n            Class<?> type = method.getResource().getType();\n            Method validationMethod = getValidationFor(method.getMethod(), type);\n            if (validationMethod != null) {\n            \tList<ValidationMessage> messages= new ArrayList<ValidationMessage>();\n                ResourceBundle bundle = localization.getBundle();\n\t\t\t\tObject[] parameters = provider.getParametersFor(method, messages, bundle);\n                Object[] validationParameters = new Object[parameters.length + 1];\n                validationParameters[0] = errors;\n                for (int i = 0; i < parameters.length; i++) {\n                    validationParameters[i + 1] = parameters[i];\n                }\n                try {\n                    validationMethod.invoke(resourceInstance, validationParameters);\n                } catch (IllegalArgumentException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (IllegalAccessException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (InvocationTargetException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e.getCause());\n                }\n                for(ValidationMessage msg : messages) {\n                \terrors.add(new FixedMessage(msg.getCategory(), bundle.getString(msg.getMessage()), msg.getCategory()));\n                }\n            }\n            if (errors.size() != 0) {\n                this.outjection.outject(resourceInstance, type);\n                this.result.include(\"errors\", errors);\n                this.result.forward(\"invalid\");\n                return;\n            }\n        }\n        stack.next(method, resourceInstance);\n    }\n\n    private <T> Method getValidationFor(Method method, Class<T> type) {\n        String validationMethodName = \"validate\" + capitalize(method.getName());\n        for (Method m : type.getDeclaredMethods()) {\n            if (m.getName().equals(validationMethodName)) {\n                if (m.getParameterTypes().length != method.getParameterTypes().length + 1) {\n                    logger.error(\"Validate method for \" + method + \" has a different number of args+1!\");\n                }\n                return m;\n            }\n        }\n        return null;\n    }\n\n    private String capitalize(String name) {\n        return Character.toUpperCase(name.charAt(0)) + name.substring(1);\n    }\n}\n","Method after Refactoring":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.vraptor2;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.text.MessageFormat;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.i18n.FixedMessage;\nimport org.vraptor.i18n.Message;\nimport org.vraptor.validator.BasicValidationErrors;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ValidatorInterceptor implements Interceptor {\n\n    private final ParametersProvider provider;\n    private final PageResult result;\n\n    private static final Logger logger = LoggerFactory.getLogger(ValidatorInterceptor.class);\n    private final ValidationErrors errors;\n    private final OutjectionInterceptor outjection;\n\tprivate final Localization localization;\n\n    public ValidatorInterceptor(ParametersProvider provider, PageResult result, ValidationErrors errors, OutjectionInterceptor outjection, Localization localization) {\n        this.provider = provider;\n        this.result = result;\n        this.errors = errors;\n        this.outjection = outjection;\n\t\tthis.localization = localization;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {\n        if (Info.isOldComponent(method.getResource())) {\n            Class<?> type = method.getResource().getType();\n            Method validationMethod = getValidationFor(method.getMethod(), type);\n            if (validationMethod != null) {\n            \tList<ValidationMessage> convertionErrors= new ArrayList<ValidationMessage>();\n                ResourceBundle bundle = localization.getBundle();\n\t\t\t\tObject[] parameters = provider.getParametersFor(method, convertionErrors, bundle);\n                Object[] validationParameters = new Object[parameters.length + 1];\n                BasicValidationErrors newErrors = new BasicValidationErrors();\n                validationParameters[0] = newErrors;\n                for (int i = 0; i < parameters.length; i++) {\n                    validationParameters[i + 1] = parameters[i];\n                }\n                try {\n                    validationMethod.invoke(resourceInstance, validationParameters);\n                } catch (IllegalArgumentException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (IllegalAccessException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (InvocationTargetException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e.getCause());\n                }\n                for(ValidationMessage msg : convertionErrors) {\n                \terrors.add(new FixedMessage(msg.getCategory(), msg.getMessage(), msg.getCategory()));\n                }\n                for(org.vraptor.i18n.ValidationMessage msg : newErrors) {\n                \tif(msg instanceof FixedMessage) {\n                \t\terrors.add(msg);\n                \t} else if (msg instanceof Message){\n                \t\tMessage m = (Message) msg;\n                \t\tString content = bundle.getString(m.getKey());\n                \t\tcontent = MessageFormat.format(content, m.getParameters());\n                \t\terrors.add(new FixedMessage(msg.getPath(), content, msg.getCategory()));\n                \t} else {\n                \t\tthrow new IllegalArgumentException(\"Unsupported validation message type: \" + msg.getClass().getName());\n                \t}\n                }\n            }\n            if (errors.size() != 0) {\n                this.outjection.outject(resourceInstance, type);\n                this.result.include(\"errors\", errors);\n                this.result.forward(\"invalid\");\n                return;\n            }\n        }\n        stack.next(method, resourceInstance);\n    }\n\n    private <T> Method getValidationFor(Method method, Class<T> type) {\n        String validationMethodName = \"validate\" + capitalize(method.getName());\n        for (Method m : type.getDeclaredMethods()) {\n            if (m.getName().equals(validationMethodName)) {\n                if (m.getParameterTypes().length != method.getParameterTypes().length + 1) {\n                    logger.error(\"Validate method for \" + method + \" has a different number of args+1!\");\n                }\n                return m;\n            }\n        }\n        return null;\n    }\n\n    private String capitalize(String name) {\n        return Character.toUpperCase(name.charAt(0)) + name.substring(1);\n    }\n}\n","lineNo":106}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.i18n.FixedMessage;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ValidatorInterceptor implements Interceptor {\n\n    private final ParametersProvider provider;\n    private final PageResult result;\n\n    private static final Logger logger = LoggerFactory.getLogger(ValidatorInterceptor.class);\n    private final ValidationErrors errors;\n    private final OutjectionInterceptor outjection;\n\tprivate final Localization bundles;\n\n    public ValidatorInterceptor(ParametersProvider provider, PageResult result, ValidationErrors errors, OutjectionInterceptor outjection, Localization bundles) {\n        this.provider = provider;\n        this.result = result;\n        this.errors = errors;\n        this.outjection = outjection;\n\t\tthis.bundles = bundles;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {\n        if (Info.isOldComponent(method.getResource())) {\n            Class<?> type = method.getResource().getType();\n            Method validationMethod = getValidationFor(method.getMethod(), type);\n            if (validationMethod != null) {\n            \tList<ValidationMessage> messages= new ArrayList<ValidationMessage>();\n                Object[] parameters = provider.getParametersFor(method, messages, bundles.getBundle());\n                Object[] validationParameters = new Object[parameters.length + 1];\n                validationParameters[0] = errors;\n                for (int i = 0; i < parameters.length; i++) {\n                    validationParameters[i + 1] = parameters[i];\n                }\n                try {\n                    validationMethod.invoke(resourceInstance, validationParameters);\n                } catch (IllegalArgumentException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (IllegalAccessException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (InvocationTargetException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e.getCause());\n                }\n                for(ValidationMessage msg : messages) {\n                \terrors.add(new FixedMessage(msg.getCategory(), msg.getMessage(), msg.getCategory()));\n                }\n            }\n            if (errors.size() != 0) {\n                this.outjection.outject(resourceInstance, type);\n                this.result.include(\"errors\", errors);\n                this.result.forward(\"invalid\");\n                return;\n            }\n        }\n        stack.next(method, resourceInstance);\n    }\n\n    private <T> Method getValidationFor(Method method, Class<T> type) {\n        String validationMethodName = \"validate\" + capitalize(method.getName());\n        for (Method m : type.getDeclaredMethods()) {\n            if (m.getName().equals(validationMethodName)) {\n                if (m.getParameterTypes().length != method.getParameterTypes().length + 1) {\n                    logger.error(\"Validate method for \" + method + \" has a different number of args+1!\");\n                }\n                return m;\n            }\n        }\n        return null;\n    }\n\n    private String capitalize(String name) {\n        return Character.toUpperCase(name.charAt(0)) + name.substring(1);\n    }\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.i18n.FixedMessage;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.ValidationMessage;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ValidatorInterceptor implements Interceptor {\n\n    private final ParametersProvider provider;\n    private final PageResult result;\n\n    private static final Logger logger = LoggerFactory.getLogger(ValidatorInterceptor.class);\n    private final ValidationErrors errors;\n    private final OutjectionInterceptor outjection;\n\tprivate final Localization localization;\n\n    public ValidatorInterceptor(ParametersProvider provider, PageResult result, ValidationErrors errors, OutjectionInterceptor outjection, Localization localization) {\n        this.provider = provider;\n        this.result = result;\n        this.errors = errors;\n        this.outjection = outjection;\n\t\tthis.localization = localization;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws InterceptionException {\n        if (Info.isOldComponent(method.getResource())) {\n            Class<?> type = method.getResource().getType();\n            Method validationMethod = getValidationFor(method.getMethod(), type);\n            if (validationMethod != null) {\n            \tList<ValidationMessage> messages= new ArrayList<ValidationMessage>();\n                ResourceBundle bundle = localization.getBundle();\n\t\t\t\tObject[] parameters = provider.getParametersFor(method, messages, bundle);\n                Object[] validationParameters = new Object[parameters.length + 1];\n                validationParameters[0] = errors;\n                for (int i = 0; i < parameters.length; i++) {\n                    validationParameters[i + 1] = parameters[i];\n                }\n                try {\n                    validationMethod.invoke(resourceInstance, validationParameters);\n                } catch (IllegalArgumentException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (IllegalAccessException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (InvocationTargetException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e.getCause());\n                }\n                for(ValidationMessage msg : messages) {\n                \terrors.add(new FixedMessage(msg.getCategory(), bundle.getString(msg.getMessage()), msg.getCategory()));\n                }\n            }\n            if (errors.size() != 0) {\n                this.outjection.outject(resourceInstance, type);\n                this.result.include(\"errors\", errors);\n                this.result.forward(\"invalid\");\n                return;\n            }\n        }\n        stack.next(method, resourceInstance);\n    }\n\n    private <T> Method getValidationFor(Method method, Class<T> type) {\n        String validationMethodName = \"validate\" + capitalize(method.getName());\n        for (Method m : type.getDeclaredMethods()) {\n            if (m.getName().equals(validationMethodName)) {\n                if (m.getParameterTypes().length != method.getParameterTypes().length + 1) {\n                    logger.error(\"Validate method for \" + method + \" has a different number of args+1!\");\n                }\n                return m;\n            }\n        }\n        return null;\n    }\n\n    private String capitalize(String name) {\n        return Character.toUpperCase(name.charAt(0)) + name.substring(1);\n    }\n}\n","lineNo":51}
{"Smelly Sample":"package br.com.caelum.vraptor;\n\nimport java.lang.reflect.Method;\nimport java.util.ResourceBundle;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.jmock.internal.ExpectationBuilder;\nimport org.jmock.lib.legacy.ClassImposteriser;\n\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class VRaptorMockery {\n\n\tprivate int count = 0;\n\n\tprivate Mockery mockery;\n\n\tpublic VRaptorMockery() {\n\t\tthis(false);\n\t}\n\n\tpublic VRaptorMockery(boolean supportConcreteClasses) {\n\t\tmockery = new Mockery();\n\t\tif (supportConcreteClasses) {\n\t\t\tmockery.setImposteriser(ClassImposteriser.INSTANCE);\n\t\t}\n\t}\n\n\tpublic void assertIsSatisfied() {\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\tpublic void checking(ExpectationBuilder expectations) {\n\t\tmockery.checking(expectations);\n\t}\n\n\tpublic <T> T mock(Class<T> typeToMock) {\n\t\treturn mockery.mock(typeToMock);\n\t}\n\n\tpublic ResourceMethod method(final Method declaredMethod) {\n\t\tfinal ResourceMethod method = mockery.mock(ResourceMethod.class);\n\t\tchecking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(method).getMethod();\n\t\t\t\twill(returnValue(declaredMethod));\n\t\t\t}\n\t\t});\n\t\treturn method;\n\t}\n\n\tpublic <T> Resource resource(final Class<T> type) {\n\t\tfinal Resource resource = mockery.mock(Resource.class, \"resource : \" + type + (++count));\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(resource).getType();\n\t\t\t\twill(returnValue(type));\n\t\t\t}\n\t\t});\n\t\treturn resource;\n\t}\n\n\tpublic <T> Container container(final Class<T> type, final T object) {\n\t\tfinal Container container = mockery.mock(Container.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(container).instanceFor(type);\n\t\t\t\twill(returnValue(object));\n\t\t\t}\n\t\t});\n\t\treturn container;\n\t}\n\n\tpublic <T> ResourceMethod methodForResource(Class<T> type) {\n\t\tfinal Resource resource = resource(type);\n\t\tfinal ResourceMethod method = mockery.mock(ResourceMethod.class);\n\t\tchecking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(method).getResource();\n\t\t\t\twill(returnValue(resource));\n\t\t\t}\n\t\t});\n\t\treturn method;\n\t}\n\n\tpublic <T> ResourceMethod methodFor(final Class<T> type, final String methodName, final Class<?>... params)\n\t\t\tthrows NoSuchMethodException {\n\t\tfinal Resource resource = mockery.mock(Resource.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(resource).getType();\n\t\t\t\twill(returnValue(type));\n\t\t\t}\n\t\t});\n\t\tfinal ResourceMethod method = mockery.mock(ResourceMethod.class);\n\t\tchecking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(method).getResource();\n\t\t\t\twill(returnValue(resource));\n\t\t\t\tallowing(method).getMethod();\n\t\t\t\twill(returnValue(type.getDeclaredMethod(methodName, params)));\n\t\t\t}\n\t\t});\n\t\treturn method;\n\t}\n\n\tpublic Localization localization() {\n\t\tfinal Localization loc = mockery.mock(Localization.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(loc).getBundle(); will(returnValue(ResourceBundle.getBundle(\"messages\")));\n\t\t\t}\n\t\t});\n\t\treturn loc;\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor;\n\nimport java.lang.reflect.Method;\nimport java.util.ResourceBundle;\n\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.jmock.internal.ExpectationBuilder;\nimport org.jmock.lib.legacy.ClassImposteriser;\n\nimport br.com.caelum.vraptor.core.Localization;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class VRaptorMockery {\n\n\tprivate int count = 0;\n\n\tprivate Mockery mockery;\n\n\tpublic VRaptorMockery() {\n\t\tthis(false);\n\t}\n\n\tpublic VRaptorMockery(boolean supportConcreteClasses) {\n\t\tmockery = new Mockery();\n\t\tif (supportConcreteClasses) {\n\t\t\tmockery.setImposteriser(ClassImposteriser.INSTANCE);\n\t\t}\n\t}\n\n\tpublic void assertIsSatisfied() {\n\t\tmockery.assertIsSatisfied();\n\t}\n\n\tpublic void checking(ExpectationBuilder expectations) {\n\t\tmockery.checking(expectations);\n\t}\n\n\tpublic <T> T mock(Class<T> typeToMock) {\n\t\treturn mockery.mock(typeToMock);\n\t}\n\n\tpublic ResourceMethod method(final Method declaredMethod) {\n\t\tfinal ResourceMethod method = mockery.mock(ResourceMethod.class);\n\t\tchecking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(method).getMethod();\n\t\t\t\twill(returnValue(declaredMethod));\n\t\t\t}\n\t\t});\n\t\treturn method;\n\t}\n\n\tpublic <T> Resource resource(final Class<T> type) {\n\t\tfinal Resource resource = mockery.mock(Resource.class, \"resource : \" + type + (++count));\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(resource).getType();\n\t\t\t\twill(returnValue(type));\n\t\t\t}\n\t\t});\n\t\treturn resource;\n\t}\n\n\tpublic <T> Container container(final Class<T> type, final T object) {\n\t\tfinal Container container = mockery.mock(Container.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(container).instanceFor(type);\n\t\t\t\twill(returnValue(object));\n\t\t\t}\n\t\t});\n\t\treturn container;\n\t}\n\n\tpublic <T> ResourceMethod methodForResource(Class<T> type) {\n\t\tfinal Resource resource = resource(type);\n\t\tfinal ResourceMethod method = mockery.mock(ResourceMethod.class);\n\t\tchecking(new Expectations() {\n\t\t\t{\n\t\t\t\tone(method).getResource();\n\t\t\t\twill(returnValue(resource));\n\t\t\t}\n\t\t});\n\t\treturn method;\n\t}\n\n\tpublic <T> ResourceMethod methodFor(final Class<T> type, final String methodName, final Class<?>... params)\n\t\t\tthrows NoSuchMethodException {\n\t\tfinal Resource resource = mockery.mock(Resource.class);\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(resource).getType();\n\t\t\t\twill(returnValue(type));\n\t\t\t}\n\t\t});\n\t\tfinal ResourceMethod method = mockery.mock(ResourceMethod.class);\n\t\tchecking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(method).getResource();\n\t\t\t\twill(returnValue(resource));\n\t\t\t\tallowing(method).getMethod();\n\t\t\t\twill(returnValue(type.getDeclaredMethod(methodName, params)));\n\t\t\t}\n\t\t});\n\t\treturn method;\n\t}\n\n\tpublic Localization localization() {\n\t\tfinal Localization loc = mockery.mock(Localization.class);\n\t\tfinal ResourceBundle bundle = ResourceBundle.getBundle(\"messages\");\n\t\tmockery.checking(new Expectations() {\n\t\t\t{\n\t\t\t\tallowing(loc).getBundle(); will(returnValue(bundle));\n\t\t\t}\n\t\t});\n\t\treturn loc;\n\t}\n\n}\n","lineNo":113}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.SessionScoped;\nimport br.com.caelum.vraptor.resource.ResourceRegistry;\n\n/**\n * Provides containers, controlling all scopes and registering all different\n * components on their respective areas.\n * \n * @author Guilherme Silveira\n * @author Adriano Almeida\n */\npublic class PicoContainersProvider implements ComponentRegistry {\n\n    public static final String CONTAINER_SESSION_KEY = PicoContainersProvider.class.getName() + \".session\";\n\n    private static final Logger logger = LoggerFactory.getLogger(PicoContainersProvider.class);\n\n    private final Map<Class<?>,Class<?>> applicationScoped = new HashMap<Class<?>,Class<?>>();\n    private final Map<Class<?>,Class<?>> sessionScoped = new HashMap<Class<?>,Class<?>>();\n    private final Map<Class<?>,Class<?>> requestScoped = new HashMap<Class<?>,Class<?>>();\n    private final MutablePicoContainer appContainer;\n\n    public PicoContainersProvider(MutablePicoContainer container) {\n        this.appContainer = container;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n\tpublic void register(Class requiredType, Class type) {\n        if (alreadyRegistered(requiredType)) {\n            logger.debug(\"Overriding interface \" + requiredType.getName() + \" with \" + type.getName());\n        }\n        if (type.isAnnotationPresent(ApplicationScoped.class)) {\n            logger.debug(\"Registering \" + type.getName() + \" as an application component\");\n            this.applicationScoped.put(requiredType, type);\n        } else if (type.isAnnotationPresent(SessionScoped.class)) {\n            logger.debug(\"Registering \" + type.getName() + \" a an session component\");\n            this.sessionScoped.put(requiredType, type);\n        } else {\n            logger.debug(\"Registering \" + type.getName() + \" as a request component\");\n            this.requestScoped.put(requiredType, type);\n        }\n    }\n    \n    private boolean alreadyRegistered(Class<?> interfaceType) {\n        for (Map<Class<?>,Class<?>> scope : new Map[] { applicationScoped, sessionScoped, requestScoped }) {\n            if(scope.containsKey(interfaceType)) {\n            \tscope.remove(interfaceType);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public Container provide(VRaptorRequest request) {\n        HttpSession session = request.getRequest().getSession();\n        MutablePicoContainer sessionScope = (MutablePicoContainer) session.getAttribute(CONTAINER_SESSION_KEY);\n        if (sessionScope == null) {\n            sessionScope = createSessionContainer(session);\n        }\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Request components are \" + requestScoped);\n        }\n        MutablePicoContainer requestContainer = new DefaultPicoContainer(new Caching(),new JavaEE5LifecycleStrategy(new NullComponentMonitor()), sessionScope);\n        for (Class<?> requiredType : requestScoped.keySet()) {\n            requestContainer.addComponent(requestScoped.get(requiredType));\n        }\n        for (Class<? extends Interceptor> type : this.appContainer.getComponent(InterceptorRegistry.class).all()) {\n            requestContainer.addComponent(type);\n        }\n        requestContainer.addComponent(request).addComponent(request.getRequest()).addComponent(request.getResponse());\n        // cache(CachedConverters.class, Converters.class);\n        PicoBasedContainer baseContainer = new PicoBasedContainer(requestContainer, request, this.appContainer\n                .getComponent(ResourceRegistry.class));\n        return baseContainer;\n    }\n\n    private MutablePicoContainer createSessionContainer(HttpSession session) {\n        MutablePicoContainer sessionContainer = new DefaultPicoContainer(new Caching(),new JavaEE5LifecycleStrategy(new NullComponentMonitor()), this.appContainer);\n        sessionContainer.addComponent(HttpSession.class, session);\n        session.setAttribute(CONTAINER_SESSION_KEY, sessionContainer);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Session components are \" + sessionScoped);\n        }\n        for (Class<?> requiredType : sessionScoped.keySet()) {\n            sessionContainer.addComponent(sessionScoped.get(requiredType));\n        }\n        return sessionContainer;\n    }\n\n    /**\n     * Registers all application scoped elements into the container.\n     */\n    public void init() {\n        for (Class<?> requiredType : applicationScoped.keySet()) {\n            Class<?> type = applicationScoped.get(requiredType);\n            logger.debug(\"Initializing application scope with \" + type);\n            this.appContainer.addComponent(type);\n        }\n        logger.debug(\"Session components to initialize: \" + sessionScoped.keySet());\n        logger.debug(\"Requets components to initialize: \" + requestScoped.keySet());\n    }\n    \n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpSession;\n\nimport org.picocontainer.DefaultPicoContainer;\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.behaviors.Caching;\nimport org.picocontainer.lifecycle.JavaEE5LifecycleStrategy;\nimport org.picocontainer.monitors.NullComponentMonitor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ComponentRegistry;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.SessionScoped;\nimport br.com.caelum.vraptor.resource.ResourceRegistry;\n\n/**\n * Provides containers, controlling all scopes and registering all different\n * components on their respective areas.\n * \n * @author Guilherme Silveira\n * @author Adriano Almeida\n */\npublic class PicoContainersProvider implements ComponentRegistry {\n\n\tpublic static final String CONTAINER_SESSION_KEY = PicoContainersProvider.class.getName() + \".session\";\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(PicoContainersProvider.class);\n\n\tprivate final Map<Class<?>, Class<?>> applicationScoped = new HashMap<Class<?>, Class<?>>();\n\tprivate final Map<Class<?>, Class<?>> sessionScoped = new HashMap<Class<?>, Class<?>>();\n\tprivate final Map<Class<?>, Class<?>> requestScoped = new HashMap<Class<?>, Class<?>>();\n\tprivate final MutablePicoContainer appContainer;\n\tprivate final boolean initialized = false;\n\n\tpublic PicoContainersProvider(MutablePicoContainer container) {\n\t\tthis.appContainer = container;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void register(Class requiredType, Class type) {\n\t\tif (initialized) {\n\t\t\tlogger\n\t\t\t\t\t.error(\"VRaptor was already initialized and the contexts were created but you are trying to register a new component. This is nasty. Do not do it.\");\n\t\t}\n\t\tboolean overriding = alreadyRegistered(requiredType);\n\t\tif (overriding) {\n\t\t\tlogger.debug(\"Overriding interface \" + requiredType.getName() + \" with \" + type.getName());\n\t\t}\n\t\tif (type.isAnnotationPresent(ApplicationScoped.class)) {\n\t\t\tlogger.debug(\"Registering \" + type.getName() + \" as an application component\");\n\t\t\tthis.applicationScoped.put(requiredType, type);\n\t\t\tif (initialized) {\n\t\t\t\tif (overriding) {\n\t\t\t\t\tlogger\n\t\t\t\t\t\t\t.error(\"That is really a bad idea. That app scoped component could have been already initialized and used in other components. If so, this is entirely your fault: \"\n\t\t\t\t\t\t\t\t\t+ type.getName() + \".\");\n\t\t\t\t}\n\t\t\t\tthis.appContainer.addComponent(type);\n\t\t\t}\n\t\t} else if (type.isAnnotationPresent(SessionScoped.class)) {\n\t\t\tlogger.debug(\"Registering \" + type.getName() + \" a an session component\");\n\t\t\tthis.sessionScoped.put(requiredType, type);\n\t\t} else {\n\t\t\tlogger.debug(\"Registering \" + type.getName() + \" as a request component\");\n\t\t\tthis.requestScoped.put(requiredType, type);\n\t\t}\n\t}\n\n\tprivate boolean alreadyRegistered(Class<?> interfaceType) {\n\t\tfor (Map<Class<?>, Class<?>> scope : new Map[] { applicationScoped, sessionScoped, requestScoped }) {\n\t\t\tif (scope.containsKey(interfaceType)) {\n\t\t\t\tscope.remove(interfaceType);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic Container provide(VRaptorRequest request) {\n\t\tHttpSession session = request.getRequest().getSession();\n\t\tMutablePicoContainer sessionScope = (MutablePicoContainer) session.getAttribute(CONTAINER_SESSION_KEY);\n\t\tif (sessionScope == null) {\n\t\t\tsessionScope = createSessionContainer(session);\n\t\t}\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Request components are \" + requestScoped);\n\t\t}\n\t\tMutablePicoContainer requestContainer = new DefaultPicoContainer(new Caching(), new JavaEE5LifecycleStrategy(\n\t\t\t\tnew NullComponentMonitor()), sessionScope);\n\t\tfor (Class<?> requiredType : requestScoped.keySet()) {\n\t\t\trequestContainer.addComponent(requestScoped.get(requiredType));\n\t\t}\n\t\tfor (Class<? extends Interceptor> type : this.appContainer.getComponent(InterceptorRegistry.class).all()) {\n\t\t\trequestContainer.addComponent(type);\n\t\t}\n\t\trequestContainer.addComponent(request).addComponent(request.getRequest()).addComponent(request.getResponse());\n\t\t// cache(CachedConverters.class, Converters.class);\n\t\tPicoBasedContainer baseContainer = new PicoBasedContainer(requestContainer, request, this.appContainer\n\t\t\t\t.getComponent(ResourceRegistry.class));\n\t\treturn baseContainer;\n\t}\n\n\tprivate MutablePicoContainer createSessionContainer(HttpSession session) {\n\t\tMutablePicoContainer sessionContainer = new DefaultPicoContainer(new Caching(), new JavaEE5LifecycleStrategy(\n\t\t\t\tnew NullComponentMonitor()), this.appContainer);\n\t\tsessionContainer.addComponent(HttpSession.class, session);\n\t\tsession.setAttribute(CONTAINER_SESSION_KEY, sessionContainer);\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Session components are \" + sessionScoped);\n\t\t}\n\t\tfor (Class<?> requiredType : sessionScoped.keySet()) {\n\t\t\tsessionContainer.addComponent(sessionScoped.get(requiredType));\n\t\t}\n\t\treturn sessionContainer;\n\t}\n\n\t/**\n\t * Registers all application scoped elements into the container.\n\t */\n\tpublic void init() {\n\t\tfor (Class<?> requiredType : applicationScoped.keySet()) {\n\t\t\tClass<?> type = applicationScoped.get(requiredType);\n\t\t\tlogger.debug(\"Initializing application scope with \" + type);\n\t\t\tthis.appContainer.addComponent(type);\n\t\t}\n\t\tlogger.debug(\"Session components to initialize: \" + sessionScoped.keySet());\n\t\tlogger.debug(\"Requets components to initialize: \" + requestScoped.keySet());\n\t}\n\n}\n","lineNo":83}
{"Smelly Sample":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.resource;\n\nimport java.lang.reflect.Method;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\n\n/**\n * The default method lookup builder uses the default path annotation algorithm\n * to translate and identify methods and urls.\n * \n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class DefaultMethodLookupBuilder implements MethodLookupBuilder {\n\n    public ResourceAndMethodLookup lookupFor(Resource r) {\n        return new DefaultResourceAndMethodLookup(r);\n    }\n\n    public String urlFor(Class<?> type, Method method, Object[] params) {\n        Path path = method.getAnnotation(Path.class);\n        if (path != null) {\n            return path.value();\n        }\n        return \"/\" + type.getSimpleName() + \"/\" + method.getName();\n    }\n\n}\n","Method after Refactoring":"/***\n * \n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n * 1. Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer. 2. Redistributions in\n * binary form must reproduce the above copyright notice, this list of\n * conditions and the following disclaimer in the documentation and/or other\n * materials provided with the distribution. 3. Neither the name of the\n * copyright holders nor the names of its contributors may be used to endorse or\n * promote products derived from this software without specific prior written\n * permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.resource;\n\nimport java.lang.reflect.Method;\n\nimport br.com.caelum.vraptor.Path;\nimport br.com.caelum.vraptor.ioc.ApplicationScoped;\n\n/**\n * The default method lookup builder uses the default path annotation algorithm\n * to translate and identify methods and urls.\n * \n * @author Guilherme Silveira\n */\n@ApplicationScoped\npublic class DefaultMethodLookupBuilder implements MethodLookupBuilder {\n\n    public ResourceAndMethodLookup lookupFor(Resource r) {\n        return new DefaultResourceAndMethodLookup(r);\n    }\n\n    public String urlFor(Class<?> type, Method method, Object[] params) {\n        Path path = method.getAnnotation(Path.class);\n        if (path != null) {\n            String value = path.value();\n            value = value.replaceAll(\"\\\\.\\\\*\", \"\");\n            return value;\n        }\n        return \"/\" + type.getSimpleName() + \"/\" + method.getName();\n    }\n\n}\n","lineNo":51}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\n\nimport ognl.ListPropertyAccessor;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * This list accessor is responsible for setting null values up to the list\n * size.<br>\n * Compatibility issues might arrive (in previous vraptor versions, the object\n * was instantiated instead of null being set).\n * \n * @author Guilherme Silveira\n * \n */\npublic class ListAccessor extends ListPropertyAccessor {\n\n    @SuppressWarnings(\"unchecked\")\n    public Object getProperty(Map context, Object target, Object value) throws OgnlException {\n        try {\n            return super.getProperty(context, target, value);\n        } catch (IndexOutOfBoundsException ex) {\n            return null;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void setProperty(Map context, Object target, Object key, Object value) throws OgnlException {\n        // code comments by Guilherme Silveira in a moment of rage agains ognl\n        // code\n        List<?> list = (List<?>) target;\n        int index = (Integer) key;\n        for (int i = list.size(); i <= index; i++) {\n            list.add(null);\n        }\n        if (value instanceof String) {\n            // it might be that suckable ognl did not call convert, i.e.: on the\n            // values[i] = 2l in a List<Long>.\n            // we all just looooove ognl.\n            OgnlContext ctx = (OgnlContext) context;\n            String fieldName = ctx.getCurrentEvaluation().getPrevious().getNode().toString();\n            Object origin = ctx.getCurrentEvaluation().getPrevious().getSource();\n            Method getter = ReflectionBasedNullHandler.findMethod(origin.getClass(),\n                    \"get\" + Info.capitalize(fieldName), origin.getClass());\n            Type genericType = getter.getGenericReturnType();\n            Class type;\n            if (genericType instanceof ParameterizedType) {\n                type = (Class) ((ParameterizedType) genericType).getActualTypeArguments()[0];\n            } else {\n                type = (Class) genericType;\n            }\n            if (!type.equals(String.class)) {\n                // suckable ognl doesnt support dependency injection or anything\n                // alike... just that suckable context.procedural\n                // programming and ognl live together forever!\n                Container container = (Container) context.get(Container.class);\n                Converter<?> converter = container.instanceFor(Converters.class).to(type, container);\n                Object result = converter.convert((String) value, type);\n                super.setProperty(context, target, key, result);\n                return;\n            }\n        }\n        super.setProperty(context, target, key, value);\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\n\nimport ognl.Evaluation;\nimport ognl.ListPropertyAccessor;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * This list accessor is responsible for setting null values up to the list\n * size.<br>\n * Compatibility issues might arrive (in previous vraptor versions, the object\n * was instantiated instead of null being set).\n * \n * @author Guilherme Silveira\n * \n */\npublic class ListAccessor extends ListPropertyAccessor {\n\n    @SuppressWarnings(\"unchecked\")\n    public Object getProperty(Map context, Object target, Object value) throws OgnlException {\n        try {\n            return super.getProperty(context, target, value);\n        } catch (IndexOutOfBoundsException ex) {\n            return null;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void setProperty(Map context, Object target, Object key, Object value) throws OgnlException {\n        // code comments by Guilherme Silveira in a moment of rage agains ognl\n        // code\n        List<?> list = (List<?>) target;\n        int index = (Integer) key;\n        for (int i = list.size(); i <= index; i++) {\n            list.add(null);\n        }\n        if (value instanceof String) {\n            // it might be that suckable ognl did not call convert, i.e.: on the\n            // values[i] = 2l in a List<Long>.\n            // we all just looooove ognl.\n            OgnlContext ctx = (OgnlContext) context;\n            // if direct injecting, cannot find out what to do, use string\n            if (ctx.getRoot() != target) {\n                Evaluation eval = ctx.getCurrentEvaluation();\n                Evaluation previous = eval.getPrevious();\n                String fieldName = previous.getNode().toString();\n                Object origin = previous.getSource();\n                Method getter = ReflectionBasedNullHandler.findMethod(origin.getClass(), \"get\"\n                        + Info.capitalize(fieldName), origin.getClass());\n                Type genericType = getter.getGenericReturnType();\n                Class type;\n                if (genericType instanceof ParameterizedType) {\n                    type = (Class) ((ParameterizedType) genericType).getActualTypeArguments()[0];\n                } else {\n                    type = (Class) genericType;\n                }\n                if (!type.equals(String.class)) {\n                    // suckable ognl doesnt support dependency injection or\n                    // anything\n                    // alike... just that suckable context.procedural\n                    // programming and ognl live together forever!\n                    Container container = (Container) context.get(Container.class);\n                    Converter<?> converter = container.instanceFor(Converters.class).to(type, container);\n                    Object result = converter.convert((String) value, type);\n                    super.setProperty(context, target, key, result);\n                    return;\n                }\n            }\n        }\n        super.setProperty(context, target, key, value);\n    }\n\n}\n","lineNo":83}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\n\nimport ognl.ListPropertyAccessor;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * This list accessor is responsible for setting null values up to the list\n * size.<br>\n * Compatibility issues might arrive (in previous vraptor versions, the object\n * was instantiated instead of null being set).\n * \n * @author Guilherme Silveira\n * \n */\npublic class ListAccessor extends ListPropertyAccessor {\n\n    @SuppressWarnings(\"unchecked\")\n    public Object getProperty(Map context, Object target, Object value) throws OgnlException {\n        try {\n            return super.getProperty(context, target, value);\n        } catch (IndexOutOfBoundsException ex) {\n            return null;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void setProperty(Map context, Object target, Object key, Object value) throws OgnlException {\n        // code comments by Guilherme Silveira in a moment of rage agains ognl\n        // code\n        List<?> list = (List<?>) target;\n        int index = (Integer) key;\n        for (int i = list.size(); i <= index; i++) {\n            list.add(null);\n        }\n        if (value instanceof String) {\n            // it might be that suckable ognl did not call convert, i.e.: on the\n            // values[i] = 2l in a List<Long>.\n            // we all just looooove ognl.\n            OgnlContext ctx = (OgnlContext) context;\n            String fieldName = ctx.getCurrentEvaluation().getPrevious().getNode().toString();\n            Object origin = ctx.getCurrentEvaluation().getPrevious().getSource();\n            Method getter = ReflectionBasedNullHandler.findMethod(origin.getClass(),\n                    \"get\" + Info.capitalize(fieldName), origin.getClass());\n            Type genericType = getter.getGenericReturnType();\n            Class type;\n            if (genericType instanceof ParameterizedType) {\n                type = (Class) ((ParameterizedType) genericType).getActualTypeArguments()[0];\n            } else {\n                type = (Class) genericType;\n            }\n            if (!type.equals(String.class)) {\n                // suckable ognl doesnt support dependency injection or anything\n                // alike... just that suckable context.procedural\n                // programming and ognl live together forever!\n                Container container = (Container) context.get(Container.class);\n                Converter<?> converter = container.instanceFor(Converters.class).to(type, container);\n                Object result = converter.convert((String) value, type);\n                super.setProperty(context, target, key, result);\n                return;\n            }\n        }\n        super.setProperty(context, target, key, value);\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Map;\n\nimport ognl.Evaluation;\nimport ognl.ListPropertyAccessor;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.vraptor2.Info;\n\n/**\n * This list accessor is responsible for setting null values up to the list\n * size.<br>\n * Compatibility issues might arrive (in previous vraptor versions, the object\n * was instantiated instead of null being set).\n * \n * @author Guilherme Silveira\n * \n */\npublic class ListAccessor extends ListPropertyAccessor {\n\n    @SuppressWarnings(\"unchecked\")\n    public Object getProperty(Map context, Object target, Object value) throws OgnlException {\n        try {\n            return super.getProperty(context, target, value);\n        } catch (IndexOutOfBoundsException ex) {\n            return null;\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void setProperty(Map context, Object target, Object key, Object value) throws OgnlException {\n        // code comments by Guilherme Silveira in a moment of rage agains ognl\n        // code\n        List<?> list = (List<?>) target;\n        int index = (Integer) key;\n        for (int i = list.size(); i <= index; i++) {\n            list.add(null);\n        }\n        if (value instanceof String) {\n            // it might be that suckable ognl did not call convert, i.e.: on the\n            // values[i] = 2l in a List<Long>.\n            // we all just looooove ognl.\n            OgnlContext ctx = (OgnlContext) context;\n            // if direct injecting, cannot find out what to do, use string\n            if (ctx.getRoot() != target) {\n                Evaluation eval = ctx.getCurrentEvaluation();\n                Evaluation previous = eval.getPrevious();\n                String fieldName = previous.getNode().toString();\n                Object origin = previous.getSource();\n                Method getter = ReflectionBasedNullHandler.findMethod(origin.getClass(), \"get\"\n                        + Info.capitalize(fieldName), origin.getClass());\n                Type genericType = getter.getGenericReturnType();\n                Class type;\n                if (genericType instanceof ParameterizedType) {\n                    type = (Class) ((ParameterizedType) genericType).getActualTypeArguments()[0];\n                } else {\n                    type = (Class) genericType;\n                }\n                if (!type.equals(String.class)) {\n                    // suckable ognl doesnt support dependency injection or\n                    // anything\n                    // alike... just that suckable context.procedural\n                    // programming and ognl live together forever!\n                    Container container = (Container) context.get(Container.class);\n                    Converter<?> converter = container.instanceFor(Converters.class).to(type, container);\n                    Object result = converter.convert((String) value, type);\n                    super.setProperty(context, target, key, result);\n                    return;\n                }\n            }\n        }\n        super.setProperty(context, target, key, value);\n    }\n\n}\n","lineNo":84}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.servlet.ServletContext;\n\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.PicoBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.RegisterContainer;\nimport br.com.caelum.vraptor.core.DefaultConverters;\nimport br.com.caelum.vraptor.core.DefaultInterceptorStack;\nimport br.com.caelum.vraptor.core.DefaultMethodParameters;\nimport br.com.caelum.vraptor.core.DefaultRequestExecution;\nimport br.com.caelum.vraptor.core.DefaultRequestInfo;\nimport br.com.caelum.vraptor.core.DefaultResult;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.http.DefaultRequestParameters;\nimport br.com.caelum.vraptor.http.EmptyElementsRemoval;\nimport br.com.caelum.vraptor.http.OgnlParametersProvider;\nimport br.com.caelum.vraptor.http.ParanamerNameProvider;\nimport br.com.caelum.vraptor.http.StupidTranslator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.interceptor.DefaultInterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiator;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.resource.DefaultMethodLookupBuilder;\nimport br.com.caelum.vraptor.resource.DefaultResourceRegistry;\nimport br.com.caelum.vraptor.validator.DefaultValidator;\nimport br.com.caelum.vraptor.view.DefaultPathResolver;\nimport br.com.caelum.vraptor.view.jsp.DefaultPageResult;\n\n/**\n * Managing internal components by using pico container.<br>\n * There is an extension point through the registerComponents method, which\n * allows one to give a customized container.\n * \n * @author Guilherme Silveira\n */\npublic class PicoProvider implements ContainerProvider {\n\n    private final MutablePicoContainer container;\n\n    private static final Logger logger = LoggerFactory.getLogger(PicoProvider.class);\n\n    public PicoProvider() {\n        this.container = new PicoBuilder().withCaching().build();\n        this.container.addComponent(new PicoContainersProvider(this.container));\n        for (Class<?> componentType : getCoreComponents()) {\n            container.addComponent(componentType);\n        }\n        registerComponents(getContainers());\n        // TODO\n        // cache(CacheBasedResourceRegistry.class, ResourceRegistry.class);\n        // cache(CacheBasedTypeCreator.class, AsmBasedTypeCreator.class);\n    }\n\n    private PicoContainersProvider getContainers() {\n        return this.container.getComponent(PicoContainersProvider.class);\n    }\n\n    /**\n     * Register extra components that your app wants to.\n     */\n    protected void registerComponents(RegisterContainer container) {\n        for (Class<?> type : getChildComponentTypes()) {\n            container.register(type);\n        }\n    }\n\n    /**\n     * While extending pico provider, do not register any INSTANCE component!\n     * Cached instances might give problems later on.<br>\n     * If there is any component instantiated and we change the implementation,\n     * those who access the previous implementation will keep the reference\n     * while new components will reference the new one -> NASTY!\n     */\n    protected List<Class<?>> getCoreComponents() {\n        List<Class<?>> components = new ArrayList<Class<?>>();\n        components.add(StupidTranslator.class);\n        components.add(DefaultResourceRegistry.class);\n        components.add(DefaultDirScanner.class);\n        components.add(WebInfClassesScanner.class);\n        components.add(DefaultInterceptorRegistry.class);\n        components.add(AsmBasedTypeCreator.class);\n        components.add(DefaultMethodLookupBuilder.class);\n        components.add(DefaultPathResolver.class);\n        components.add(ParanamerNameProvider.class);\n        return components;\n    }\n\n    public <T> T instanceFor(Class<T> type) {\n        return container.getComponent(type);\n    }\n\n    public void start(ServletContext context) {\n        this.container.addComponent(context);\n        instanceFor(ResourceLocator.class).loadAll();\n        container.start();\n    }\n\n    public void stop() {\n        container.stop();\n    }\n\n    public Container provide(VRaptorRequest request) {\n        return getContainers().provide(request);\n    }\n\n    protected List<Class<?>> getChildComponentTypes() {\n        // TODO remove and replace by invoking register on registercontainer\n        // only if interfaces were not registered\n        List<Class<?>> components = new ArrayList<Class<?>>();\n        components.add(ParametersInstantiator.class);\n        components.add(DefaultMethodParameters.class);\n        components.add(DefaultRequestParameters.class);\n        components.add(InterceptorListPriorToExecutionExtractor.class);\n        components.add(URLParameterExtractorInterceptor.class);\n        components.add(DefaultInterceptorStack.class);\n        components.add(DefaultRequestExecution.class);\n        components.add(ResourceLookupInterceptor.class);\n        components.add(InstantiateInterceptor.class);\n        components.add(DefaultResult.class);\n        components.add(ExecuteMethodInterceptor.class);\n        components.add(DefaultPageResult.class);\n        components.add(OgnlParametersProvider.class);\n        components.add(DefaultConverters.class);\n        components.add(DefaultRequestInfo.class);\n        components.add(EmptyElementsRemoval.class);\n        components.add(DefaultValidator.class);\n        return components;\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.pico;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.servlet.ServletContext;\n\nimport org.picocontainer.MutablePicoContainer;\nimport org.picocontainer.PicoBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.RegisterContainer;\nimport br.com.caelum.vraptor.core.DefaultConverters;\nimport br.com.caelum.vraptor.core.DefaultInterceptorStack;\nimport br.com.caelum.vraptor.core.DefaultMethodParameters;\nimport br.com.caelum.vraptor.core.DefaultRequestExecution;\nimport br.com.caelum.vraptor.core.DefaultRequestInfo;\nimport br.com.caelum.vraptor.core.DefaultResult;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.http.DefaultRequestParameters;\nimport br.com.caelum.vraptor.http.EmptyElementsRemoval;\nimport br.com.caelum.vraptor.http.OgnlParametersProvider;\nimport br.com.caelum.vraptor.http.ParanamerNameProvider;\nimport br.com.caelum.vraptor.http.StupidTranslator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.interceptor.DefaultInterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiator;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.resource.DefaultMethodLookupBuilder;\nimport br.com.caelum.vraptor.resource.DefaultResourceRegistry;\nimport br.com.caelum.vraptor.validator.DefaultValidator;\nimport br.com.caelum.vraptor.view.DefaultPathResolver;\nimport br.com.caelum.vraptor.view.jsp.DefaultPageResult;\n\n/**\n * Managing internal components by using pico container.<br>\n * There is an extension point through the registerComponents method, which\n * allows one to give a customized container.\n * \n * @author Guilherme Silveira\n */\npublic class PicoProvider implements ContainerProvider {\n\n    private final MutablePicoContainer container;\n\n    private static final Logger logger = LoggerFactory.getLogger(PicoProvider.class);\n\n    public PicoProvider() {\n        this.container = new PicoBuilder().withCaching().build();\n        PicoContainersProvider containersProvider = new PicoContainersProvider(this.container);\n        this.container.addComponent(containersProvider);\n        registerComponents(getContainers());\n        containersProvider.init();\n        // TODO\n        // cache(CacheBasedResourceRegistry.class, ResourceRegistry.class);\n        // cache(CacheBasedTypeCreator.class, AsmBasedTypeCreator.class);\n    }\n\n    private PicoContainersProvider getContainers() {\n        return this.container.getComponent(PicoContainersProvider.class);\n    }\n\n    /**\n     * Register extra components that your app wants to.\n     */\n    protected void registerComponents(RegisterContainer container) {\n        for (Class<?> type : getChildComponentTypes()) {\n            container.register(type);\n        }\n        container.register(StupidTranslator.class);\n        container.register(DefaultResourceRegistry.class);\n        container.register(DefaultDirScanner.class);\n        container.register(WebInfClassesScanner.class);\n        container.register(DefaultInterceptorRegistry.class);\n        container.register(AsmBasedTypeCreator.class);\n        container.register(DefaultMethodLookupBuilder.class);\n        container.register(DefaultPathResolver.class);\n        container.register(ParanamerNameProvider.class);\n    }\n\n    public <T> T instanceFor(Class<T> type) {\n        return container.getComponent(type);\n    }\n\n    public void start(ServletContext context) {\n        this.container.addComponent(context);\n        instanceFor(ResourceLocator.class).loadAll();\n        container.start();\n    }\n\n    public void stop() {\n        container.stop();\n    }\n\n    public Container provide(VRaptorRequest request) {\n        return getContainers().provide(request);\n    }\n\n    protected List<Class<?>> getChildComponentTypes() {\n        // TODO remove and replace by invoking register on registercontainer\n        // only if interfaces were not registered\n        List<Class<?>> components = new ArrayList<Class<?>>();\n        components.add(ParametersInstantiator.class);\n        components.add(DefaultMethodParameters.class);\n        components.add(DefaultRequestParameters.class);\n        components.add(InterceptorListPriorToExecutionExtractor.class);\n        components.add(URLParameterExtractorInterceptor.class);\n        components.add(DefaultInterceptorStack.class);\n        components.add(DefaultRequestExecution.class);\n        components.add(ResourceLookupInterceptor.class);\n        components.add(InstantiateInterceptor.class);\n        components.add(DefaultResult.class);\n        components.add(ExecuteMethodInterceptor.class);\n        components.add(DefaultPageResult.class);\n        components.add(OgnlParametersProvider.class);\n        components.add(DefaultConverters.class);\n        components.add(DefaultRequestInfo.class);\n        components.add(EmptyElementsRemoval.class);\n        components.add(DefaultValidator.class);\n        return components;\n    }\n\n}\n","lineNo":86}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.List;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodParameters;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.ValidationError;\n\n/**\n * Interceptor that executes the logic method.\n * \n * @author Guilherme Silveira\n */\npublic class ExecuteMethodInterceptor implements Interceptor {\n\n    private final MethodParameters parameters;\n\n    public ExecuteMethodInterceptor(MethodParameters parameters) {\n        this.parameters = parameters;\n    }\n\n    public void intercept(InterceptorStack invocation, ResourceMethod method, Object resourceInstance)\n            throws IOException, InterceptionException {\n        try {\n            Method reflectionMethod = method.getMethod();\n            Object[] parameters = this.parameters.getValues();\n            reflectionMethod.invoke(resourceInstance, parameters);\n        } catch (ValidationError e) {\n            // finished just fine\n        } catch (IllegalArgumentException e) {\n            throw new InterceptionException(e);\n        } catch (IllegalAccessException e) {\n            throw new InterceptionException(e);\n        } catch (InvocationTargetException e) {\n            throw new InterceptionException(e.getCause());\n        }\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.interceptor;\n\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.List;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodParameters;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.ValidationError;\n\n/**\n * Interceptor that executes the logic method.\n * \n * @author Guilherme Silveira\n */\npublic class ExecuteMethodInterceptor implements Interceptor {\n\n    private final MethodParameters parameters;\n\n    public ExecuteMethodInterceptor(MethodParameters parameters) {\n        this.parameters = parameters;\n    }\n\n    public void intercept(InterceptorStack invocation, ResourceMethod method, Object resourceInstance)\n            throws IOException, InterceptionException {\n        try {\n            Method reflectionMethod = method.getMethod();\n            Object[] parameters = this.parameters.getValues();\n            reflectionMethod.invoke(resourceInstance, parameters);\n        } catch (IllegalArgumentException e) {\n            throw new InterceptionException(e);\n        } catch (IllegalAccessException e) {\n            throw new InterceptionException(e);\n        } catch (InvocationTargetException e) {\n            Throwable cause = e.getCause();\n            if(cause instanceof ValidationError) {\n                // fine... already parsed\n            } else {\n                throw new InterceptionException(cause);\n            }\n        }\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n}\n","lineNo":69}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodParameters;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.ValidationError;\n\npublic class ExecuteAndViewInterceptor implements Interceptor {\n\n    private final RequestResult result;\n    private final MethodParameters parameters;\n\n    public ExecuteAndViewInterceptor(RequestResult result, MethodParameters parameters) {\n        this.result = result;\n        this.parameters = parameters;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n            throws IOException, InterceptionException {\n        try {\n            Method reflectionMethod = method.getMethod();\n            Object[] parameters = this.parameters.getValues();\n            Object result = reflectionMethod.invoke(resourceInstance, parameters);\n            if (Info.isOldComponent(method.getResource())) {\n                if (result == null) {\n                    this.result.setValue(\"ok\");\n                } else {\n                    this.result.setValue((String) result);\n                }\n            }\n            stack.next(method, resourceInstance);\n        } catch (ValidationError e) {\n            // fine... already parsed\n        } catch (IllegalArgumentException e) {\n            throw new InterceptionException(e);\n        } catch (IllegalAccessException e) {\n            throw new InterceptionException(e);\n        } catch (InvocationTargetException e) {\n            throw new InterceptionException(e.getCause());\n        }\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodParameters;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.validator.ValidationError;\n\npublic class ExecuteAndViewInterceptor implements Interceptor {\n\n    private final RequestResult result;\n    private final MethodParameters parameters;\n\n    public ExecuteAndViewInterceptor(RequestResult result, MethodParameters parameters) {\n        this.result = result;\n        this.parameters = parameters;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance)\n            throws IOException, InterceptionException {\n        try {\n            Method reflectionMethod = method.getMethod();\n            Object[] parameters = this.parameters.getValues();\n            Object result = reflectionMethod.invoke(resourceInstance, parameters);\n            if (Info.isOldComponent(method.getResource())) {\n                if (result == null) {\n                    this.result.setValue(\"ok\");\n                } else {\n                    this.result.setValue((String) result);\n                }\n            }\n            stack.next(method, resourceInstance);\n        } catch (IllegalArgumentException e) {\n            throw new InterceptionException(e);\n        } catch (IllegalAccessException e) {\n            throw new InterceptionException(e);\n        } catch (InvocationTargetException e) {\n            Throwable cause = e.getCause();\n            if(cause instanceof ValidationError) {\n                // fine... already parsed\n            } else {\n                throw new InterceptionException(cause);\n            }\n        }\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n}\n","lineNo":43}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport javax.servlet.ServletException;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class Validator implements Interceptor {\n\n    private final ParametersProvider provider;\n    private final PageResult result;\n\n    private static final Logger logger = LoggerFactory.getLogger(Validator.class);\n    private final ValidationErrors errors;\n\n    public Validator(ParametersProvider provider, PageResult result, ValidationErrors errors) {\n        this.provider = provider;\n        this.result = result;\n        this.errors = errors;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException,\n            InterceptionException {\n        if (Info.isOldComponent(method.getResource())) {\n            Method validationMethod = getValidationFor(method.getMethod(), method.getResource().getType());\n            if (validationMethod != null) {\n                Object[] parameters = provider.getParametersFor(method);\n                Object[] validationParameters = new Object[parameters.length + 1];\n                validationParameters[0] = errors;\n                for (int i = 0; i < parameters.length; i++) {\n                    validationParameters[i + 1] = parameters[i];\n                }\n                try {\n                    validationMethod.invoke(resourceInstance, validationParameters);\n                } catch (IllegalArgumentException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (IllegalAccessException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (InvocationTargetException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e.getCause());\n                }\n                if (errors.size() != 0) {\n                    try {\n                        this.result.include(\"errors\", errors);\n                        this.result.forward(\"invalid\");\n                    } catch (ServletException e) {\n                        throw new InterceptionException(\"Unable to forward\", e.getCause());\n                    }\n                    return;\n                }\n            }\n        }\n        stack.next(method, resourceInstance);\n    }\n\n    private <T> Method getValidationFor(Method method, Class<T> type) {\n        String validationMethodName = \"validate\" + capitalize(method.getName());\n        for (Method m : type.getDeclaredMethods()) {\n            if (m.getName().equals(validationMethodName)) {\n                if (m.getParameterTypes().length != method.getParameterTypes().length + 1) {\n                    logger.error(\"Validate method for \" + method + \" has a different number of args+1!\");\n                }\n                return m;\n            }\n        }\n        return null;\n    }\n\n    private String capitalize(String name) {\n        return Character.toUpperCase(name.charAt(0)) + name.substring(1);\n    }\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport javax.servlet.ServletException;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class Validator implements Interceptor {\n\n    private final ParametersProvider provider;\n    private final PageResult result;\n\n    private static final Logger logger = LoggerFactory.getLogger(Validator.class);\n    private final ValidationErrors errors;\n    private final OutjectionInterceptor outjection;\n\n    public Validator(ParametersProvider provider, PageResult result, ValidationErrors errors, OutjectionInterceptor outjection) {\n        this.provider = provider;\n        this.result = result;\n        this.errors = errors;\n        this.outjection = outjection;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException,\n            InterceptionException {\n        if (Info.isOldComponent(method.getResource())) {\n            Class<?> type = method.getResource().getType();\n            Method validationMethod = getValidationFor(method.getMethod(), type);\n            if (validationMethod != null) {\n                Object[] parameters = provider.getParametersFor(method);\n                Object[] validationParameters = new Object[parameters.length + 1];\n                validationParameters[0] = errors;\n                for (int i = 0; i < parameters.length; i++) {\n                    validationParameters[i + 1] = parameters[i];\n                }\n                try {\n                    validationMethod.invoke(resourceInstance, validationParameters);\n                } catch (IllegalArgumentException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (IllegalAccessException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e);\n                } catch (InvocationTargetException e) {\n                    throw new InterceptionException(\"Unable to validate.\", e.getCause());\n                }\n                if (errors.size() != 0) {\n                    try {\n                        this.outjection.outject(resourceInstance, type);\n                        this.result.include(\"errors\", errors);\n                        this.result.forward(\"invalid\");\n                    } catch (ServletException e) {\n                        throw new InterceptionException(\"Unable to forward\", e);\n                    }\n                    return;\n                }\n            }\n        }\n        stack.next(method, resourceInstance);\n    }\n\n    private <T> Method getValidationFor(Method method, Class<T> type) {\n        String validationMethodName = \"validate\" + capitalize(method.getName());\n        for (Method m : type.getDeclaredMethods()) {\n            if (m.getName().equals(validationMethodName)) {\n                if (m.getParameterTypes().length != method.getParameterTypes().length + 1) {\n                    logger.error(\"Validate method for \" + method + \" has a different number of args+1!\");\n                }\n                return m;\n            }\n        }\n        return null;\n    }\n\n    private String capitalize(String name) {\n        return Character.toUpperCase(name.charAt(0)) + name.substring(1);\n    }\n}\n","lineNo":43}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.resource.MethodLookupBuilder;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceAndMethodLookup;\n\n/**\n * A vraptor 2 compatible method lookup builder.\n * \n * @author Guilherme Silveira\n */\npublic class VRaptor2MethodLookupBuilder implements MethodLookupBuilder {\n    \n    private static final Logger logger = LoggerFactory.getLogger(VRaptor2MethodLookupBuilder.class);\n\n    public ResourceAndMethodLookup lookupFor(Resource r) {\n        if(Info.isOldComponent(r)) {\n            logger.warn(\"Old component found, remember to migrate to vraptor3: \" + r.getType().getName());\n        }\n        return new VRaptor2MethodLookup(r);\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.annotations.In;\nimport org.vraptor.annotations.Logic;\nimport org.vraptor.annotations.Out;\nimport org.vraptor.annotations.Parameter;\nimport org.vraptor.plugin.hibernate.Validate;\n\nimport br.com.caelum.vraptor.resource.MethodLookupBuilder;\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceAndMethodLookup;\n\n/**\n * A vraptor 2 compatible method lookup builder.\n * \n * @author Guilherme Silveira\n */\npublic class VRaptor2MethodLookupBuilder implements MethodLookupBuilder {\n    \n    private static final Logger logger = LoggerFactory.getLogger(VRaptor2MethodLookupBuilder.class);\n\n    public ResourceAndMethodLookup lookupFor(Resource resource) {\n        Class<?> type = resource.getType();\n        if(Info.isOldComponent(resource)) {\n            logger.warn(\"Old component found, remember to migrate to vraptor3: \" + type.getName());\n        }\n        parse(type, type);\n        return new VRaptor2MethodLookup(resource);\n    }\n\n    private void parse(Class<?> type, Class<?> originalType) {\n        if (type.equals(Object.class)) {\n            return;\n        }\n        for (Class<? extends Annotation> annotation : new Class[] { Out.class, In.class, Parameter.class }) {\n            for (Field field : type.getDeclaredFields()) {\n                if (field.isAnnotationPresent(annotation)) {\n                    logger.error(\"Field \" + field.getName() + \" from \" + originalType.getName() + \" is annotated with \"\n                            + annotation.getName() + \" but is not supported by VRaptor3! Read the migration guide.\");\n                }\n            }\n        }\n        for (Method method : type.getDeclaredMethods()) {\n            for (Class<? extends Annotation> annotation : new Class[] { Out.class, In.class }) {\n                if (method.isAnnotationPresent(annotation)) {\n                    logger.error(\"Method \" + method.getName() + \" from \" + originalType.getName()\n                            + \" is annotated with \" + annotation.getName()\n                            + \" but is not supported by VRaptor3! Read the migration guide.\");\n                }\n            }\n            if (method.isAnnotationPresent(Logic.class)) {\n                logger.warn(\"Method \" + method.getName() + \" from \" + originalType.getName()\n                        + \" is annotated with @Logic. Although its supported, we suggest you to migrate to @Path.\");\n            }\n            if (method.isAnnotationPresent(Validate.class)) {\n                Validate validate = method.getAnnotation(Validate.class);\n                if (validate.fields().length != 0) {\n                    logger.error(\"Method \" + method.getName() + \" from \" + originalType.getName()\n                            + \" is annotated with @Validate with fields. This is not supported.\");\n                }\n            }\n        }\n        parse(type.getSuperclass(), type);\n    }\n\n\n}\n","lineNo":29}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport javax.servlet.http.HttpSessionBindingEvent;\nimport javax.servlet.http.HttpSessionBindingListener;\n\nimport org.picocontainer.MutablePicoContainer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ioc.pico.PicoContainersProvider;\n\npublic class SessionAttributeController implements HttpSessionBindingListener {\n\n    private static final Logger logger = LoggerFactory.getLogger(SessionAttributeController.class);\n\n    public void valueBound(HttpSessionBindingEvent event) {\n        MutablePicoContainer container = (MutablePicoContainer) event.getSession().getAttribute(\n                PicoContainersProvider.CONTAINER_SESSION_KEY);\n        if (container != null) {\n            container.addComponent(event.getValue());\n        } else {\n            logger.debug(\"Ignoring attribute bounding because there is no container for attribute \" + event.getName());\n        }\n    }\n\n    public void valueUnbound(HttpSessionBindingEvent event) {\n        MutablePicoContainer container = (MutablePicoContainer) event.getSession().getAttribute(\n                PicoContainersProvider.CONTAINER_SESSION_KEY);\n        if (container != null) {\n            container.removeComponent(event.getValue());\n        } else {\n            logger.debug(\"Ignoring attribute removal because there is no container for attribute \" + event.getName());\n        }\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport javax.servlet.http.HttpSessionAttributeListener;\nimport javax.servlet.http.HttpSessionBindingEvent;\n\nimport org.picocontainer.MutablePicoContainer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.ioc.pico.PicoContainersProvider;\n\npublic class SessionAttributeController implements HttpSessionAttributeListener {\n\n    private static final Logger logger = LoggerFactory.getLogger(SessionAttributeController.class);\n\n    public void attributeAdded(HttpSessionBindingEvent event) {\n        // TODO cache this search\n        Object value = event.getValue();\n        if (value != null && event.getName().equals(value.getClass().getName())) {\n            MutablePicoContainer container = (MutablePicoContainer) event.getSession().getAttribute(\n                    PicoContainersProvider.CONTAINER_SESSION_KEY);\n            if (container != null) {\n                container.addComponent(value);\n            } else {\n                logger.debug(\"Ignoring attribute bounding because there is no container for attribute \"\n                        + event.getName());\n            }\n        }\n    }\n\n    public void attributeRemoved(HttpSessionBindingEvent event) {\n        MutablePicoContainer container = (MutablePicoContainer) event.getSession().getAttribute(\n                PicoContainersProvider.CONTAINER_SESSION_KEY);\n        if (container != null) {\n            container.removeComponent(event.getValue());\n        } else {\n            logger.debug(\"Ignoring attribute removal because there is no container for attribute \" + event.getName());\n        }\n    }\n\n    public void attributeReplaced(HttpSessionBindingEvent event) {\n        MutablePicoContainer container = (MutablePicoContainer) event.getSession().getAttribute(\n                PicoContainersProvider.CONTAINER_SESSION_KEY);\n        if (container != null) {\n            container.addComponent(event.getValue());\n        } else {\n            logger.debug(\"Ignoring attribute replacing because there is no container for attribute \" + event.getName());\n        }\n    }\n\n}\n","lineNo":18}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.config.BasicConfiguration;\nimport br.com.caelum.vraptor.core.DefaultStaticContentHandler;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.StaticContentHandler;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\n\n/**\n * VRaptor entry point. Provider configuration through init parameter\n * \n * @author Guilherme Silveira\n * @author Fabio Kung\n */\npublic class VRaptor implements Filter {\n    private ContainerProvider provider;\n    private ServletContext servletContext;\n    \n    private StaticContentHandler staticHandler;\n\n    private static final Logger logger = LoggerFactory.getLogger(VRaptor.class);\n\n    public void destroy() {\n        provider.stop();\n        provider = null;\n        servletContext = null;\n    }\n\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,\n            ServletException {\n\n        if (!(req instanceof HttpServletRequest) || !(res instanceof HttpServletResponse)) {\n            throw new ServletException(\n                    \"VRaptor must be run inside a Servlet environment. Portlets and others aren't supported.\");\n        }\n\n        HttpServletRequest webRequest = (HttpServletRequest) req;\n        HttpServletResponse webResponse = (HttpServletResponse) res;\n\n        if (staticHandler.requestingStaticFile(webRequest)) {\n            staticHandler.deferProcessingToContainer(chain, webRequest, webResponse);\n            return;\n        }\n\n        VRaptorRequest request = new VRaptorRequest(servletContext, webRequest, webResponse);\n        try {\n            provider.provide(request).instanceFor(RequestExecution.class).execute();\n        } catch (VRaptorException e) {\n            throw new ServletException(e);\n        }\n    }\n\n    public void init(FilterConfig cfg) throws ServletException {\n        servletContext = cfg.getServletContext();\n        BasicConfiguration config = new BasicConfiguration(servletContext);\n        init(config.getProvider(), new DefaultStaticContentHandler(servletContext));\n        logger.info(\"VRaptor 3 successfuly initialized\");\n    }\n\n    void init(ContainerProvider provider, StaticContentHandler handler) {\n        this.provider = provider;\n        this.staticHandler = handler;\n        this.provider.start(servletContext);\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.config.BasicConfiguration;\nimport br.com.caelum.vraptor.core.DefaultStaticContentHandler;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.StaticContentHandler;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\n\n/**\n * VRaptor entry point.<br>\n * Provider configuration is supported through init parameter.\n * \n * @author Guilherme Silveira\n * @author Fabio Kung\n */\npublic class VRaptor implements Filter {\n    private ContainerProvider provider;\n    private ServletContext servletContext;\n\n    private StaticContentHandler staticHandler;\n\n    private static final Logger logger = LoggerFactory.getLogger(VRaptor.class);\n\n    public void destroy() {\n        provider.stop();\n        provider = null;\n        servletContext = null;\n    }\n\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,\n            ServletException {\n\n        if (!(req instanceof HttpServletRequest) || !(res instanceof HttpServletResponse)) {\n            throw new ServletException(\n                    \"VRaptor must be run inside a Servlet environment. Portlets and others aren't supported.\");\n        }\n\n        HttpServletRequest webRequest = (HttpServletRequest) req;\n        HttpServletResponse webResponse = (HttpServletResponse) res;\n\n        if (staticHandler.requestingStaticFile(webRequest)) {\n            staticHandler.deferProcessingToContainer(chain, webRequest, webResponse);\n            return;\n        }\n\n        VRaptorRequest request = new VRaptorRequest(servletContext, webRequest, webResponse);\n        try {\n            Container container = provider.provide(request);\n            container.instanceFor(RequestExecution.class).execute();\n        } catch (VRaptorException e) {\n            throw new ServletException(e);\n        }\n    }\n\n    public void init(FilterConfig cfg) throws ServletException {\n        servletContext = cfg.getServletContext();\n        BasicConfiguration config = new BasicConfiguration(servletContext);\n        init(config.getProvider(), new DefaultStaticContentHandler(servletContext));\n        logger.info(\"VRaptor 3 successfuly initialized\");\n    }\n\n    void init(ContainerProvider provider, StaticContentHandler handler) {\n        this.provider = provider;\n        this.staticHandler = handler;\n        this.provider.start(servletContext);\n    }\n\n}\n","lineNo":94}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport br.com.caelum.vraptor.core.DefaultConverters;\nimport br.com.caelum.vraptor.core.DefaultInterceptorStack;\nimport br.com.caelum.vraptor.core.DefaultMethodParameters;\nimport br.com.caelum.vraptor.core.DefaultRequestExecution;\nimport br.com.caelum.vraptor.core.DefaultRequestInfo;\nimport br.com.caelum.vraptor.core.DefaultResult;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.http.DefaultRequestParameters;\nimport br.com.caelum.vraptor.http.OgnlParametersProvider;\nimport br.com.caelum.vraptor.http.ParanamerNameProvider;\nimport br.com.caelum.vraptor.http.StupidTranslator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.interceptor.DefaultInterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiator;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.DefaultMethodLookupBuilder;\nimport br.com.caelum.vraptor.resource.DefaultResourceRegistry;\nimport br.com.caelum.vraptor.view.DefaultPathResolver;\nimport br.com.caelum.vraptor.view.jsp.DefaultPageResult;\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.aop.scope.ScopedProxyUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.annotation.ScopeMetadata;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.context.support.GenericApplicationContext;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.context.support.GenericWebApplicationContext;\n\nimport javax.servlet.ServletContext;\n\n/**\n * @author Fabio Kung\n */\npublic class SpringBasedContainer implements Container {\n    private final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n    private final GenericWebApplicationContext applicationContext;\n\n    private String[] basePackages = {\"br.com.caelum.vraptor\"};\n\n    public SpringBasedContainer(String... basePackages) {\n        // TODO provide users the ability to provide custom containers\n        if (basePackages.length > 0) {\n            this.basePackages = basePackages;\n        }\n        applicationContext = new GenericWebApplicationContext();\n        AnnotationConfigUtils.registerAnnotationConfigProcessors(applicationContext);\n        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(applicationContext);\n        registerCustomInjectionProcessor(applicationContext);\n    }\n\n    private void registerCustomInjectionProcessor(GenericApplicationContext applicationContext) {\n        RootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n        definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n        definition.getPropertyValues().addPropertyValue(\"order\", Ordered.LOWEST_PRECEDENCE);\n        applicationContext.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n    }\n\n    public void start(ServletContext context) {\n        registerInstanceFor(ServletContext.class, context);\n        registerApplicationScopedComponents();\n        registerRequestScopedComponents();\n\n        new ComponentScanner(applicationContext).scan(basePackages);\n        applicationContext.refresh();\n        applicationContext.start();\n    }\n\n    public void stop() {\n        applicationContext.stop();\n        applicationContext.destroy();\n    }\n\n    private void registerApplicationScopedComponents() {\n        register(DefaultResourceRegistry.class);\n        register(StupidTranslator.class);\n        register(DefaultInterceptorRegistry.class);\n        register(AsmBasedTypeCreator.class);\n        register(DefaultMethodLookupBuilder.class);\n        register(DefaultPathResolver.class);\n        register(ParanamerNameProvider.class);\n    }\n\n    private void registerRequestScopedComponents() {\n        register(ParametersInstantiator.class);\n        register(DefaultMethodParameters.class);\n        register(DefaultRequestParameters.class);\n        register(InterceptorListPriorToExecutionExtractor.class);\n        register(URLParameterExtractorInterceptor.class);\n        register(DefaultInterceptorStack.class);\n        register(DefaultRequestExecution.class);\n        register(ResourceLookupInterceptor.class);\n        register(InstantiateInterceptor.class);\n        register(DefaultResult.class);\n        register(ExecuteMethodInterceptor.class);\n        register(DefaultPageResult.class);\n        register(OgnlParametersProvider.class);\n        register(DefaultConverters.class);\n        register(DefaultRequestInfo.class);\n        register(HttpServletRequestProvider.class);\n        register(HttpServletResponseProvider.class);\n        register(VRaptorRequestProvider.class);\n        register(this);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> T instanceFor(Class<T> type) {\n        T instance = (T) BeanFactoryUtils.beanOfType(applicationContext, type);\n        return wrapWhenNeeded(type, instance);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private <T> T wrapWhenNeeded(Class<T> type, T instance) {\n        if (RequestExecution.class.isAssignableFrom(type)) {\n            return (T) new RequestExecutionWrapper((RequestExecution) instance, instanceFor(ServletContext.class));\n        }\n        return instance;\n    }\n\n    private <T> void registerInstanceFor(Class<? super T> resolvableType, T instance) {\n        applicationContext.getBeanFactory().registerResolvableDependency(resolvableType, instance);\n    }\n\n    public void register(Class<?> type) {\n        AnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n        String name = beanNameGenerator.generateBeanName(definition, applicationContext);\n        BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name);\n\n        VRaptorScopeResolver scopeResolver = new VRaptorScopeResolver();\n        ScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition);\n        definitionHolder = applyScope(definitionHolder, scopeMetadata);\n\n        BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, applicationContext);\n    }\n\n    /**\n     * From org.springframework.context.annotation.ClassPathBeanDefinitionScanner#applyScope()\n     *\n     * @param definition\n     * @param scopeMetadata\n     * @return\n     */\n    private BeanDefinitionHolder applyScope(BeanDefinitionHolder definition, ScopeMetadata scopeMetadata) {\n        String scope = scopeMetadata.getScopeName();\n        ScopedProxyMode proxyMode = scopeMetadata.getScopedProxyMode();\n        definition.getBeanDefinition().setScope(scope);\n        if (BeanDefinition.SCOPE_SINGLETON.equals(scope) || BeanDefinition.SCOPE_PROTOTYPE.equals(scope) ||\n                proxyMode.equals(ScopedProxyMode.NO)) {\n            return definition;\n        } else {\n            boolean proxyTargetClass = proxyMode.equals(ScopedProxyMode.TARGET_CLASS);\n            return ScopedProxyUtils.createScopedProxy(definition, applicationContext, proxyTargetClass);\n        }\n    }\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport br.com.caelum.vraptor.core.DefaultConverters;\nimport br.com.caelum.vraptor.core.DefaultInterceptorStack;\nimport br.com.caelum.vraptor.core.DefaultMethodParameters;\nimport br.com.caelum.vraptor.core.DefaultRequestExecution;\nimport br.com.caelum.vraptor.core.DefaultRequestInfo;\nimport br.com.caelum.vraptor.core.DefaultResult;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.http.DefaultRequestParameters;\nimport br.com.caelum.vraptor.http.OgnlParametersProvider;\nimport br.com.caelum.vraptor.http.ParanamerNameProvider;\nimport br.com.caelum.vraptor.http.StupidTranslator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.interceptor.DefaultInterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiator;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.DefaultMethodLookupBuilder;\nimport br.com.caelum.vraptor.resource.DefaultResourceRegistry;\nimport br.com.caelum.vraptor.view.DefaultPathResolver;\nimport br.com.caelum.vraptor.view.jsp.DefaultPageResult;\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.aop.scope.ScopedProxyUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.annotation.ScopeMetadata;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.context.support.GenericApplicationContext;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.context.support.GenericWebApplicationContext;\n\nimport javax.servlet.ServletContext;\n\n/**\n * @author Fabio Kung\n */\npublic class SpringBasedContainer implements Container {\n    private final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n    private final GenericWebApplicationContext applicationContext;\n\n    private String[] basePackages = {\"br.com.caelum.vraptor\"};\n\n    public SpringBasedContainer(String... basePackages) {\n        // TODO provide users the ability to provide custom containers\n        if (basePackages.length > 0) {\n            this.basePackages = basePackages;\n        }\n        applicationContext = new GenericWebApplicationContext();\n        AnnotationConfigUtils.registerAnnotationConfigProcessors(applicationContext);\n        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(applicationContext);\n        registerCustomInjectionProcessor(applicationContext);\n    }\n\n    private void registerCustomInjectionProcessor(GenericApplicationContext applicationContext) {\n        RootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n        definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n        definition.getPropertyValues().addPropertyValue(\"order\", Ordered.LOWEST_PRECEDENCE);\n        applicationContext.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n    }\n\n    public void start(ServletContext context) {\n        registerInstanceFor(ServletContext.class, context);\n        registerApplicationScopedComponents();\n        registerRequestScopedComponents();\n\n        new ComponentScanner(applicationContext).scan(basePackages);\n        applicationContext.refresh();\n        applicationContext.start();\n    }\n\n    public void stop() {\n        applicationContext.stop();\n        applicationContext.destroy();\n    }\n\n    private void registerApplicationScopedComponents() {\n        register(DefaultResourceRegistry.class);\n        register(StupidTranslator.class);\n        register(DefaultInterceptorRegistry.class);\n        register(AsmBasedTypeCreator.class);\n        register(DefaultMethodLookupBuilder.class);\n        register(DefaultPathResolver.class);\n        register(ParanamerNameProvider.class);\n    }\n\n    private void registerRequestScopedComponents() {\n        register(ParametersInstantiator.class);\n        register(DefaultMethodParameters.class);\n        register(DefaultRequestParameters.class);\n        register(InterceptorListPriorToExecutionExtractor.class);\n        register(URLParameterExtractorInterceptor.class);\n        register(DefaultInterceptorStack.class);\n        register(DefaultRequestExecution.class);\n        register(ResourceLookupInterceptor.class);\n        register(InstantiateInterceptor.class);\n        register(DefaultResult.class);\n        register(ExecuteMethodInterceptor.class);\n        register(DefaultPageResult.class);\n        register(OgnlParametersProvider.class);\n        register(DefaultConverters.class);\n        register(DefaultRequestInfo.class);\n        register(HttpServletRequestProvider.class);\n        register(HttpServletResponseProvider.class);\n        register(VRaptorRequestProvider.class);\n        registerInstanceFor(Container.class, this);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> T instanceFor(Class<T> type) {\n        T instance = (T) BeanFactoryUtils.beanOfType(applicationContext, type);\n        return wrapWhenNeeded(type, instance);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private <T> T wrapWhenNeeded(Class<T> type, T instance) {\n        if (RequestExecution.class.isAssignableFrom(type)) {\n            VRaptorRequest request = instanceFor(VRaptorRequest.class);\n            RequestExecution execution = (RequestExecution) instance;\n            ServletContext context = instanceFor(ServletContext.class);\n            return (T) new RequestExecutionWrapper(request, execution, context);\n        }\n        return instance;\n    }\n\n    private <T> void registerInstanceFor(Class<? super T> resolvableType, T instance) {\n        applicationContext.getBeanFactory().registerResolvableDependency(resolvableType, instance);\n    }\n\n    public void register(Class<?> type) {\n        AnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n        String name = beanNameGenerator.generateBeanName(definition, applicationContext);\n        BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name);\n\n        VRaptorScopeResolver scopeResolver = new VRaptorScopeResolver();\n        ScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition);\n        definitionHolder = applyScope(definitionHolder, scopeMetadata);\n\n        BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, applicationContext);\n    }\n\n    /**\n     * From org.springframework.context.annotation.ClassPathBeanDefinitionScanner#applyScope()\n     *\n     * @param definition\n     * @param scopeMetadata\n     * @return\n     */\n    private BeanDefinitionHolder applyScope(BeanDefinitionHolder definition, ScopeMetadata scopeMetadata) {\n        String scope = scopeMetadata.getScopeName();\n        ScopedProxyMode proxyMode = scopeMetadata.getScopedProxyMode();\n        definition.getBeanDefinition().setScope(scope);\n        if (BeanDefinition.SCOPE_SINGLETON.equals(scope) || BeanDefinition.SCOPE_PROTOTYPE.equals(scope) ||\n                proxyMode.equals(ScopedProxyMode.NO)) {\n            return definition;\n        } else {\n            boolean proxyTargetClass = proxyMode.equals(ScopedProxyMode.TARGET_CLASS);\n            return ScopedProxyUtils.createScopedProxy(definition, applicationContext, proxyTargetClass);\n        }\n    }\n}\n","lineNo":160}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport br.com.caelum.vraptor.core.DefaultConverters;\nimport br.com.caelum.vraptor.core.DefaultInterceptorStack;\nimport br.com.caelum.vraptor.core.DefaultMethodParameters;\nimport br.com.caelum.vraptor.core.DefaultRequestExecution;\nimport br.com.caelum.vraptor.core.DefaultRequestInfo;\nimport br.com.caelum.vraptor.core.DefaultResult;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.http.DefaultRequestParameters;\nimport br.com.caelum.vraptor.http.OgnlParametersProvider;\nimport br.com.caelum.vraptor.http.ParanamerNameProvider;\nimport br.com.caelum.vraptor.http.StupidTranslator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.interceptor.DefaultInterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiator;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.DefaultMethodLookupBuilder;\nimport br.com.caelum.vraptor.resource.DefaultResourceRegistry;\nimport br.com.caelum.vraptor.view.DefaultPathResolver;\nimport br.com.caelum.vraptor.view.jsp.DefaultPageResult;\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.aop.scope.ScopedProxyUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.annotation.ScopeMetadata;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.context.support.GenericApplicationContext;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.context.support.GenericWebApplicationContext;\n\nimport javax.servlet.ServletContext;\n\n/**\n * @author Fabio Kung\n */\npublic class SpringBasedContainer implements Container {\n    private final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n    private final GenericWebApplicationContext applicationContext;\n\n    private String[] basePackages = {\"br.com.caelum.vraptor\"};\n\n    public SpringBasedContainer(String... basePackages) {\n        // TODO provide users the ability to provide custom containers\n        if (basePackages.length > 0) {\n            this.basePackages = basePackages;\n        }\n        applicationContext = new GenericWebApplicationContext();\n        AnnotationConfigUtils.registerAnnotationConfigProcessors(applicationContext);\n        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(applicationContext);\n        registerCustomInjectionProcessor(applicationContext);\n    }\n\n    private void registerCustomInjectionProcessor(GenericApplicationContext applicationContext) {\n        RootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n        definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n        definition.getPropertyValues().addPropertyValue(\"order\", Ordered.LOWEST_PRECEDENCE);\n        applicationContext.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n    }\n\n    public void start(ServletContext context) {\n        registerInstanceFor(ServletContext.class, context);\n        registerApplicationScopedComponents();\n        registerRequestScopedComponents();\n\n        new ComponentScanner(applicationContext).scan(basePackages);\n        applicationContext.refresh();\n        applicationContext.start();\n    }\n\n    public void stop() {\n        applicationContext.stop();\n        applicationContext.destroy();\n    }\n\n    private void registerApplicationScopedComponents() {\n        register(DefaultResourceRegistry.class);\n        register(StupidTranslator.class);\n        register(DefaultInterceptorRegistry.class);\n        register(AsmBasedTypeCreator.class);\n        register(DefaultMethodLookupBuilder.class);\n        register(DefaultPathResolver.class);\n        register(ParanamerNameProvider.class);\n    }\n\n    private void registerRequestScopedComponents() {\n        register(ParametersInstantiator.class);\n        register(DefaultMethodParameters.class);\n        register(DefaultRequestParameters.class);\n        register(InterceptorListPriorToExecutionExtractor.class);\n        register(URLParameterExtractorInterceptor.class);\n        register(DefaultInterceptorStack.class);\n        register(DefaultRequestExecution.class);\n        register(ResourceLookupInterceptor.class);\n        register(InstantiateInterceptor.class);\n        register(DefaultResult.class);\n        register(ExecuteMethodInterceptor.class);\n        register(DefaultPageResult.class);\n        register(OgnlParametersProvider.class);\n        register(DefaultConverters.class);\n        register(DefaultRequestInfo.class);\n        register(HttpServletRequestProvider.class);\n        register(HttpServletResponseProvider.class);\n        register(VRaptorRequestProvider.class);\n        register(this);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> T instanceFor(Class<T> type) {\n        T instance = (T) BeanFactoryUtils.beanOfType(applicationContext, type);\n        return wrapWhenNeeded(type, instance);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private <T> T wrapWhenNeeded(Class<T> type, T instance) {\n        if (RequestExecution.class.isAssignableFrom(type)) {\n            return (T) new RequestExecutionWrapper((RequestExecution) instance, instanceFor(ServletContext.class));\n        }\n        return instance;\n    }\n\n    private <T> void registerInstanceFor(Class<? super T> resolvableType, T instance) {\n        applicationContext.getBeanFactory().registerResolvableDependency(resolvableType, instance);\n    }\n\n    public void register(Class<?> type) {\n        AnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n        String name = beanNameGenerator.generateBeanName(definition, applicationContext);\n        BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name);\n\n        VRaptorScopeResolver scopeResolver = new VRaptorScopeResolver();\n        ScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition);\n        definitionHolder = applyScope(definitionHolder, scopeMetadata);\n\n        BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, applicationContext);\n    }\n\n    /**\n     * From org.springframework.context.annotation.ClassPathBeanDefinitionScanner#applyScope()\n     *\n     * @param definition\n     * @param scopeMetadata\n     * @return\n     */\n    private BeanDefinitionHolder applyScope(BeanDefinitionHolder definition, ScopeMetadata scopeMetadata) {\n        String scope = scopeMetadata.getScopeName();\n        ScopedProxyMode proxyMode = scopeMetadata.getScopedProxyMode();\n        definition.getBeanDefinition().setScope(scope);\n        if (BeanDefinition.SCOPE_SINGLETON.equals(scope) || BeanDefinition.SCOPE_PROTOTYPE.equals(scope) ||\n                proxyMode.equals(ScopedProxyMode.NO)) {\n            return definition;\n        } else {\n            boolean proxyTargetClass = proxyMode.equals(ScopedProxyMode.TARGET_CLASS);\n            return ScopedProxyUtils.createScopedProxy(definition, applicationContext, proxyTargetClass);\n        }\n    }\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport br.com.caelum.vraptor.core.DefaultConverters;\nimport br.com.caelum.vraptor.core.DefaultInterceptorStack;\nimport br.com.caelum.vraptor.core.DefaultMethodParameters;\nimport br.com.caelum.vraptor.core.DefaultRequestExecution;\nimport br.com.caelum.vraptor.core.DefaultRequestInfo;\nimport br.com.caelum.vraptor.core.DefaultResult;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.URLParameterExtractorInterceptor;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.http.DefaultRequestParameters;\nimport br.com.caelum.vraptor.http.OgnlParametersProvider;\nimport br.com.caelum.vraptor.http.ParanamerNameProvider;\nimport br.com.caelum.vraptor.http.StupidTranslator;\nimport br.com.caelum.vraptor.http.asm.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.interceptor.DefaultInterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.ParametersInstantiator;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.DefaultMethodLookupBuilder;\nimport br.com.caelum.vraptor.resource.DefaultResourceRegistry;\nimport br.com.caelum.vraptor.view.DefaultPathResolver;\nimport br.com.caelum.vraptor.view.jsp.DefaultPageResult;\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.aop.scope.ScopedProxyUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.annotation.ScopeMetadata;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.context.support.GenericApplicationContext;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.context.support.GenericWebApplicationContext;\n\nimport javax.servlet.ServletContext;\n\n/**\n * @author Fabio Kung\n */\npublic class SpringBasedContainer implements Container {\n    private final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n    private final GenericWebApplicationContext applicationContext;\n\n    private String[] basePackages = {\"br.com.caelum.vraptor\"};\n\n    public SpringBasedContainer(String... basePackages) {\n        // TODO provide users the ability to provide custom containers\n        if (basePackages.length > 0) {\n            this.basePackages = basePackages;\n        }\n        applicationContext = new GenericWebApplicationContext();\n        AnnotationConfigUtils.registerAnnotationConfigProcessors(applicationContext);\n        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(applicationContext);\n        registerCustomInjectionProcessor(applicationContext);\n    }\n\n    private void registerCustomInjectionProcessor(GenericApplicationContext applicationContext) {\n        RootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n        definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n        definition.getPropertyValues().addPropertyValue(\"order\", Ordered.LOWEST_PRECEDENCE);\n        applicationContext.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n    }\n\n    public void start(ServletContext context) {\n        registerInstanceFor(ServletContext.class, context);\n        registerApplicationScopedComponents();\n        registerRequestScopedComponents();\n\n        new ComponentScanner(applicationContext).scan(basePackages);\n        applicationContext.refresh();\n        applicationContext.start();\n    }\n\n    public void stop() {\n        applicationContext.stop();\n        applicationContext.destroy();\n    }\n\n    private void registerApplicationScopedComponents() {\n        register(DefaultResourceRegistry.class);\n        register(StupidTranslator.class);\n        register(DefaultInterceptorRegistry.class);\n        register(AsmBasedTypeCreator.class);\n        register(DefaultMethodLookupBuilder.class);\n        register(DefaultPathResolver.class);\n        register(ParanamerNameProvider.class);\n    }\n\n    private void registerRequestScopedComponents() {\n        register(ParametersInstantiator.class);\n        register(DefaultMethodParameters.class);\n        register(DefaultRequestParameters.class);\n        register(InterceptorListPriorToExecutionExtractor.class);\n        register(URLParameterExtractorInterceptor.class);\n        register(DefaultInterceptorStack.class);\n        register(DefaultRequestExecution.class);\n        register(ResourceLookupInterceptor.class);\n        register(InstantiateInterceptor.class);\n        register(DefaultResult.class);\n        register(ExecuteMethodInterceptor.class);\n        register(DefaultPageResult.class);\n        register(OgnlParametersProvider.class);\n        register(DefaultConverters.class);\n        register(DefaultRequestInfo.class);\n        register(HttpServletRequestProvider.class);\n        register(HttpServletResponseProvider.class);\n        register(VRaptorRequestProvider.class);\n        registerInstanceFor(Container.class, this);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> T instanceFor(Class<T> type) {\n        T instance = (T) BeanFactoryUtils.beanOfType(applicationContext, type);\n        return wrapWhenNeeded(type, instance);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private <T> T wrapWhenNeeded(Class<T> type, T instance) {\n        if (RequestExecution.class.isAssignableFrom(type)) {\n            VRaptorRequest request = instanceFor(VRaptorRequest.class);\n            RequestExecution execution = (RequestExecution) instance;\n            ServletContext context = instanceFor(ServletContext.class);\n            return (T) new RequestExecutionWrapper(request, execution, context);\n        }\n        return instance;\n    }\n\n    private <T> void registerInstanceFor(Class<? super T> resolvableType, T instance) {\n        applicationContext.getBeanFactory().registerResolvableDependency(resolvableType, instance);\n    }\n\n    public void register(Class<?> type) {\n        AnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n        String name = beanNameGenerator.generateBeanName(definition, applicationContext);\n        BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name);\n\n        VRaptorScopeResolver scopeResolver = new VRaptorScopeResolver();\n        ScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition);\n        definitionHolder = applyScope(definitionHolder, scopeMetadata);\n\n        BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, applicationContext);\n    }\n\n    /**\n     * From org.springframework.context.annotation.ClassPathBeanDefinitionScanner#applyScope()\n     *\n     * @param definition\n     * @param scopeMetadata\n     * @return\n     */\n    private BeanDefinitionHolder applyScope(BeanDefinitionHolder definition, ScopeMetadata scopeMetadata) {\n        String scope = scopeMetadata.getScopeName();\n        ScopedProxyMode proxyMode = scopeMetadata.getScopedProxyMode();\n        definition.getBeanDefinition().setScope(scope);\n        if (BeanDefinition.SCOPE_SINGLETON.equals(scope) || BeanDefinition.SCOPE_PROTOTYPE.equals(scope) ||\n                proxyMode.equals(ScopedProxyMode.NO)) {\n            return definition;\n        } else {\n            boolean proxyTargetClass = proxyMode.equals(ScopedProxyMode.TARGET_CLASS);\n            return ScopedProxyUtils.createScopedProxy(definition, applicationContext, proxyTargetClass);\n        }\n    }\n}\n","lineNo":159}
{"Smelly Sample":"package br.com.caelum.vraptor.ioc;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.not;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.DefaultInterceptorStack;\nimport br.com.caelum.vraptor.core.DefaultResult;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.OgnlParametersProvider;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.ioc.pico.DirScanner;\nimport br.com.caelum.vraptor.ioc.pico.ResourceLocator;\nimport br.com.caelum.vraptor.ioc.spring.SpringProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceRegistry;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\n/**\n * Acceptance test that checks if the container is capable of giving all\n * required components.\n * \n * @author Guilherme Silveira\n */\npublic abstract class GenericContainerTest {\n\n    private int counter;\n\n    protected Mockery mockery;\n\n    private ContainerProvider provider;\n\n    protected ServletContext context;\n\n    protected abstract ContainerProvider getProvider();\n\n    @Before\n    public void setup() throws IOException {\n        counter = 0;\n        this.mockery = new Mockery();\n        final File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n        final File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n        tmp.mkdir();\n        final File unknownFile = new File(tmp, \"unknown\");\n        this.context = mockery.mock(ServletContext.class);\n        mockery.checking(new Expectations() {\n            {\n                allowing(context).getRealPath(\"\");\n                will(returnValue(tmp.getAbsolutePath()));\n                allowing(context).getRealPath(\"/WEB-INF/classes/vraptor.xml\");\n                will(returnValue(unknownFile.getAbsolutePath()));\n                allowing(context).getRealPath(\"/WEB-INF/classes/views.properties\");\n                will(returnValue(unknownFile.getAbsolutePath()));\n                // UGLY! move to Spring implementation...\n                allowing(context).getInitParameter(SpringProvider.BASE_PACKAGES_PARAMETER_NAME);\n                will(returnValue(\"no.packages\"));\n            }\n        });\n        createRequest();\n        provider = getProvider();\n        provider.start(context);\n    }\n\n    protected VRaptorRequest createRequest() {\n        final HttpServletRequest request = mockery.mock(HttpServletRequest.class, \"req\" + counter++);\n        mockery.checking(new Expectations() {\n            {\n                allowing(request).getSession(); will(returnValue(mockery.mock(HttpSession.class, \"session\" + counter++)));\n                allowing(request).getParameterMap(); will(returnValue(new HashMap<String, String>()));\n            }\n        });\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"res\" + counter++);\n        return new VRaptorRequest(context, request, response);\n    }\n\n    @After\n    public void tearDown() {\n        provider.stop();\n    }\n\n    @Test\n    public void canProvideAllRequestScopedComponents() {\n        checkAvailabilityFor(false, HttpServletRequest.class, HttpServletResponse.class, VRaptorRequest.class,\n                DefaultInterceptorStack.class, RequestInfo.class, RequestExecution.class, ResourceLookupInterceptor.class,\n                InstantiateInterceptor.class, DefaultResult.class, ExecuteMethodInterceptor.class,\n                OgnlParametersProvider.class, Converters.class, HttpSession.class);\n        checkAvailabilityFor(false, PageResult.class);\n        mockery.assertIsSatisfied();\n    }\n\n    private void checkAvailabilityFor(boolean shouldBeTheSame, Class<?> component, Class<?> componentToRegister) {\n        Container firstContainer = provider.provide(createRequest());\n        Container secondContainer = provider.provide(createRequest());\n\n        firstContainer.register(mockery.mock(ResourceMethod.class, \"rm\" + counter++));\n        secondContainer.register(mockery.mock(ResourceMethod.class, \"rm\" + counter++));\n\n        if (componentToRegister != null) {\n            firstContainer.register(componentToRegister);\n            if (secondContainer.instanceFor(componentToRegister) == null) {\n                // not an app scoped... then register on the other one too\n                secondContainer.register(componentToRegister);\n            }\n        }\n\n        Object firstInstance = firstContainer.instanceFor(component);\n        Object secondInstance = secondContainer.instanceFor(component);\n        checkSimilarity(component, shouldBeTheSame, firstInstance, secondInstance);\n    }\n\n    private void checkSimilarity(Class<?> component, boolean shouldBeTheSame, Object firstInstance,\n            Object secondInstance) {\n        if (shouldBeTheSame) {\n            MatcherAssert.assertThat(\"Should be the same instance for \" + component.getName(), firstInstance, Matchers\n                    .is(equalTo(secondInstance)));\n        } else {\n            MatcherAssert.assertThat(\"Should not be the same instance for \" + component.getName(), firstInstance,\n                    Matchers.is(not(equalTo(secondInstance))));\n        }\n    }\n\n    @Test\n    public void canProvideAllApplicationScopedComponents() {\n        Class<?>[] components = new Class[] { UrlToResourceTranslator.class, ResourceRegistry.class, DirScanner.class,\n                ResourceLocator.class, TypeCreator.class, InterceptorRegistry.class, PathResolver.class, ParameterNameProvider.class };\n        checkAvailabilityFor(true, components);\n        mockery.assertIsSatisfied();\n    }\n\n    private void checkAvailabilityFor(boolean shouldBeTheSame, Class<?>... components) {\n        for (Class<?> component : components) {\n            checkAvailabilityFor(shouldBeTheSame, component, null);\n        }\n    }\n\n    @ApplicationScoped\n    public static class MyAppComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyAppBasedComponents() {\n        checkAvailabilityFor(true, MyAppComponent.class, MyAppComponent.class);\n        mockery.assertIsSatisfied();\n    }\n\n    public static class MyRequestComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyRequestBasedComponents() {\n        checkAvailabilityFor(false, MyRequestComponent.class, MyRequestComponent.class);\n        mockery.assertIsSatisfied();\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.ioc;\n\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.DefaultInterceptorStack;\nimport br.com.caelum.vraptor.core.DefaultResult;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.http.OgnlParametersProvider;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.ioc.pico.DirScanner;\nimport br.com.caelum.vraptor.ioc.pico.ResourceLocator;\nimport br.com.caelum.vraptor.ioc.spring.SpringProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceRegistry;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.not;\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\n\n/**\n * Acceptance test that checks if the container is capable of giving all\n * required components.\n *\n * @author Guilherme Silveira\n */\npublic abstract class GenericContainerTest {\n\n    private int counter;\n\n    protected Mockery mockery;\n\n    private ContainerProvider provider;\n\n    protected ServletContext context;\n\n    protected abstract ContainerProvider getProvider();\n\n    @Before\n    public void setup() throws IOException {\n        counter = 0;\n        this.mockery = new Mockery();\n        final File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n        final File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n        tmp.mkdir();\n        final File unknownFile = new File(tmp, \"unknown\");\n        this.context = mockery.mock(ServletContext.class);\n        mockery.checking(new Expectations() {\n            {\n                allowing(context).getRealPath(\"\");\n                will(returnValue(tmp.getAbsolutePath()));\n                allowing(context).getRealPath(\"/WEB-INF/classes/vraptor.xml\");\n                will(returnValue(unknownFile.getAbsolutePath()));\n                allowing(context).getRealPath(\"/WEB-INF/classes/views.properties\");\n                will(returnValue(unknownFile.getAbsolutePath()));\n                // UGLY! move to Spring implementation...\n                allowing(context).getInitParameter(SpringProvider.BASE_PACKAGES_PARAMETER_NAME);\n                will(returnValue(\"no.packages\"));\n            }\n        });\n        createRequest();\n        provider = getProvider();\n        provider.start(context);\n    }\n\n    protected VRaptorRequest createRequest() {\n        final HttpServletRequest request = mockery.mock(HttpServletRequest.class, \"req\" + counter++);\n        mockery.checking(new Expectations() {\n            {\n                allowing(request).getSession();\n                will(returnValue(mockery.mock(HttpSession.class, \"session\" + counter++)));\n                allowing(request).getParameterMap();\n                will(returnValue(new HashMap<String, String>()));\n            }\n        });\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"res\" + counter++);\n        return new VRaptorRequest(context, request, response);\n    }\n\n    @After\n    public void tearDown() {\n        provider.stop();\n    }\n\n    @Test\n    public void canProvideAllRequestScopedComponents() {\n        checkAvailabilityFor(false, HttpServletRequest.class, HttpServletResponse.class, VRaptorRequest.class,\n                DefaultInterceptorStack.class, RequestInfo.class, RequestExecution.class, ResourceLookupInterceptor.class,\n                InstantiateInterceptor.class, DefaultResult.class, ExecuteMethodInterceptor.class,\n                OgnlParametersProvider.class, Converters.class, HttpSession.class);\n        checkAvailabilityFor(false, PageResult.class);\n        mockery.assertIsSatisfied();\n    }\n\n    private void checkAvailabilityFor(boolean shouldBeTheSame, Class<?> component, Class<?> componentToRegister) {\n        Container firstContainer = provider.provide(createRequest());\n        Container secondContainer = provider.provide(createRequest());\n\n        ResourceMethod firstMethod = mockery.mock(ResourceMethod.class, \"rm\" + counter++);\n        ResourceMethod secondMethod = mockery.mock(ResourceMethod.class, \"rm\" + counter++);\n        firstContainer.instanceFor(RequestInfo.class).setResourceMethod(firstMethod);\n        secondContainer.instanceFor(RequestInfo.class).setResourceMethod(secondMethod);\n\n        if (componentToRegister != null) {\n            firstContainer.register(componentToRegister);\n            if (secondContainer.instanceFor(componentToRegister) == null) {\n                // not an app scoped... then register on the other one too\n                secondContainer.register(componentToRegister);\n            }\n        }\n\n        Object firstInstance = firstContainer.instanceFor(component);\n        Object secondInstance = secondContainer.instanceFor(component);\n        checkSimilarity(component, shouldBeTheSame, firstInstance, secondInstance);\n    }\n\n    private void checkSimilarity(Class<?> component, boolean shouldBeTheSame, Object firstInstance,\n            Object secondInstance) {\n        if (shouldBeTheSame) {\n            MatcherAssert.assertThat(\"Should be the same instance for \" + component.getName(), firstInstance, Matchers\n                    .is(equalTo(secondInstance)));\n        } else {\n            MatcherAssert.assertThat(\"Should not be the same instance for \" + component.getName(), firstInstance,\n                    Matchers.is(not(equalTo(secondInstance))));\n        }\n    }\n\n    @Test\n    public void canProvideAllApplicationScopedComponents() {\n        Class<?>[] components = new Class[]{UrlToResourceTranslator.class, ResourceRegistry.class, DirScanner.class,\n                ResourceLocator.class, TypeCreator.class, InterceptorRegistry.class, PathResolver.class, ParameterNameProvider.class};\n        checkAvailabilityFor(true, components);\n        mockery.assertIsSatisfied();\n    }\n\n    private void checkAvailabilityFor(boolean shouldBeTheSame, Class<?>... components) {\n        for (Class<?> component : components) {\n            checkAvailabilityFor(shouldBeTheSame, component, null);\n        }\n    }\n\n    @ApplicationScoped\n    public static class MyAppComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyAppBasedComponents() {\n        checkAvailabilityFor(true, MyAppComponent.class, MyAppComponent.class);\n        mockery.assertIsSatisfied();\n    }\n\n    public static class MyRequestComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyRequestBasedComponents() {\n        checkAvailabilityFor(false, MyRequestComponent.class, MyRequestComponent.class);\n        mockery.assertIsSatisfied();\n    }\n\n}\n","lineNo":120}
{"Smelly Sample":"package br.com.caelum.vraptor.ioc;\n\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.not;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.DefaultInterceptorStack;\nimport br.com.caelum.vraptor.core.DefaultResult;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.http.OgnlParametersProvider;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.ioc.pico.DirScanner;\nimport br.com.caelum.vraptor.ioc.pico.ResourceLocator;\nimport br.com.caelum.vraptor.ioc.spring.SpringProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceRegistry;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\n/**\n * Acceptance test that checks if the container is capable of giving all\n * required components.\n * \n * @author Guilherme Silveira\n */\npublic abstract class GenericContainerTest {\n\n    private int counter;\n\n    protected Mockery mockery;\n\n    private ContainerProvider provider;\n\n    protected ServletContext context;\n\n    protected abstract ContainerProvider getProvider();\n\n    @Before\n    public void setup() throws IOException {\n        counter = 0;\n        this.mockery = new Mockery();\n        final File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n        final File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n        tmp.mkdir();\n        final File unknownFile = new File(tmp, \"unknown\");\n        this.context = mockery.mock(ServletContext.class);\n        mockery.checking(new Expectations() {\n            {\n                allowing(context).getRealPath(\"\");\n                will(returnValue(tmp.getAbsolutePath()));\n                allowing(context).getRealPath(\"/WEB-INF/classes/vraptor.xml\");\n                will(returnValue(unknownFile.getAbsolutePath()));\n                allowing(context).getRealPath(\"/WEB-INF/classes/views.properties\");\n                will(returnValue(unknownFile.getAbsolutePath()));\n                // UGLY! move to Spring implementation...\n                allowing(context).getInitParameter(SpringProvider.BASE_PACKAGES_PARAMETER_NAME);\n                will(returnValue(\"no.packages\"));\n            }\n        });\n        createRequest();\n        provider = getProvider();\n        provider.start(context);\n    }\n\n    protected VRaptorRequest createRequest() {\n        final HttpServletRequest request = mockery.mock(HttpServletRequest.class, \"req\" + counter++);\n        mockery.checking(new Expectations() {\n            {\n                allowing(request).getSession(); will(returnValue(mockery.mock(HttpSession.class, \"session\" + counter++)));\n                allowing(request).getParameterMap(); will(returnValue(new HashMap<String, String>()));\n            }\n        });\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"res\" + counter++);\n        return new VRaptorRequest(context, request, response);\n    }\n\n    @After\n    public void tearDown() {\n        provider.stop();\n    }\n\n    @Test\n    public void canProvideAllRequestScopedComponents() {\n        checkAvailabilityFor(false, HttpServletRequest.class, HttpServletResponse.class, VRaptorRequest.class,\n                DefaultInterceptorStack.class, RequestInfo.class, RequestExecution.class, ResourceLookupInterceptor.class,\n                InstantiateInterceptor.class, DefaultResult.class, ExecuteMethodInterceptor.class,\n                OgnlParametersProvider.class, Converters.class, HttpSession.class);\n        checkAvailabilityFor(false, PageResult.class);\n        mockery.assertIsSatisfied();\n    }\n\n    private void checkAvailabilityFor(boolean shouldBeTheSame, Class<?> component, Class<?> componentToRegister) {\n        Container firstContainer = provider.provide(createRequest());\n        Container secondContainer = provider.provide(createRequest());\n\n        firstContainer.register(mockery.mock(ResourceMethod.class, \"rm\" + counter++));\n        secondContainer.register(mockery.mock(ResourceMethod.class, \"rm\" + counter++));\n\n        if (componentToRegister != null) {\n            firstContainer.register(componentToRegister);\n            if (secondContainer.instanceFor(componentToRegister) == null) {\n                // not an app scoped... then register on the other one too\n                secondContainer.register(componentToRegister);\n            }\n        }\n\n        Object firstInstance = firstContainer.instanceFor(component);\n        Object secondInstance = secondContainer.instanceFor(component);\n        checkSimilarity(component, shouldBeTheSame, firstInstance, secondInstance);\n    }\n\n    private void checkSimilarity(Class<?> component, boolean shouldBeTheSame, Object firstInstance,\n            Object secondInstance) {\n        if (shouldBeTheSame) {\n            MatcherAssert.assertThat(\"Should be the same instance for \" + component.getName(), firstInstance, Matchers\n                    .is(equalTo(secondInstance)));\n        } else {\n            MatcherAssert.assertThat(\"Should not be the same instance for \" + component.getName(), firstInstance,\n                    Matchers.is(not(equalTo(secondInstance))));\n        }\n    }\n\n    @Test\n    public void canProvideAllApplicationScopedComponents() {\n        Class<?>[] components = new Class[] { UrlToResourceTranslator.class, ResourceRegistry.class, DirScanner.class,\n                ResourceLocator.class, TypeCreator.class, InterceptorRegistry.class, PathResolver.class, ParameterNameProvider.class };\n        checkAvailabilityFor(true, components);\n        mockery.assertIsSatisfied();\n    }\n\n    private void checkAvailabilityFor(boolean shouldBeTheSame, Class<?>... components) {\n        for (Class<?> component : components) {\n            checkAvailabilityFor(shouldBeTheSame, component, null);\n        }\n    }\n\n    @ApplicationScoped\n    public static class MyAppComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyAppBasedComponents() {\n        checkAvailabilityFor(true, MyAppComponent.class, MyAppComponent.class);\n        mockery.assertIsSatisfied();\n    }\n\n    public static class MyRequestComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyRequestBasedComponents() {\n        checkAvailabilityFor(false, MyRequestComponent.class, MyRequestComponent.class);\n        mockery.assertIsSatisfied();\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.ioc;\n\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.core.DefaultInterceptorStack;\nimport br.com.caelum.vraptor.core.DefaultResult;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.RequestInfo;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.http.OgnlParametersProvider;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.TypeCreator;\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.ioc.pico.DirScanner;\nimport br.com.caelum.vraptor.ioc.pico.ResourceLocator;\nimport br.com.caelum.vraptor.ioc.spring.SpringProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.resource.ResourceRegistry;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\nimport org.hamcrest.MatcherAssert;\nimport org.hamcrest.Matchers;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.not;\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\n\n/**\n * Acceptance test that checks if the container is capable of giving all\n * required components.\n *\n * @author Guilherme Silveira\n */\npublic abstract class GenericContainerTest {\n\n    private int counter;\n\n    protected Mockery mockery;\n\n    private ContainerProvider provider;\n\n    protected ServletContext context;\n\n    protected abstract ContainerProvider getProvider();\n\n    @Before\n    public void setup() throws IOException {\n        counter = 0;\n        this.mockery = new Mockery();\n        final File tmpDir = File.createTempFile(\"tmp_\", \"_file\").getParentFile();\n        final File tmp = new File(tmpDir, \"_tmp_vraptor_test\");\n        tmp.mkdir();\n        final File unknownFile = new File(tmp, \"unknown\");\n        this.context = mockery.mock(ServletContext.class);\n        mockery.checking(new Expectations() {\n            {\n                allowing(context).getRealPath(\"\");\n                will(returnValue(tmp.getAbsolutePath()));\n                allowing(context).getRealPath(\"/WEB-INF/classes/vraptor.xml\");\n                will(returnValue(unknownFile.getAbsolutePath()));\n                allowing(context).getRealPath(\"/WEB-INF/classes/views.properties\");\n                will(returnValue(unknownFile.getAbsolutePath()));\n                // UGLY! move to Spring implementation...\n                allowing(context).getInitParameter(SpringProvider.BASE_PACKAGES_PARAMETER_NAME);\n                will(returnValue(\"no.packages\"));\n            }\n        });\n        createRequest();\n        provider = getProvider();\n        provider.start(context);\n    }\n\n    protected VRaptorRequest createRequest() {\n        final HttpServletRequest request = mockery.mock(HttpServletRequest.class, \"req\" + counter++);\n        mockery.checking(new Expectations() {\n            {\n                allowing(request).getSession();\n                will(returnValue(mockery.mock(HttpSession.class, \"session\" + counter++)));\n                allowing(request).getParameterMap();\n                will(returnValue(new HashMap<String, String>()));\n            }\n        });\n        HttpServletResponse response = mockery.mock(HttpServletResponse.class, \"res\" + counter++);\n        return new VRaptorRequest(context, request, response);\n    }\n\n    @After\n    public void tearDown() {\n        provider.stop();\n    }\n\n    @Test\n    public void canProvideAllRequestScopedComponents() {\n        checkAvailabilityFor(false, HttpServletRequest.class, HttpServletResponse.class, VRaptorRequest.class,\n                DefaultInterceptorStack.class, RequestInfo.class, RequestExecution.class, ResourceLookupInterceptor.class,\n                InstantiateInterceptor.class, DefaultResult.class, ExecuteMethodInterceptor.class,\n                OgnlParametersProvider.class, Converters.class, HttpSession.class);\n        checkAvailabilityFor(false, PageResult.class);\n        mockery.assertIsSatisfied();\n    }\n\n    private void checkAvailabilityFor(boolean shouldBeTheSame, Class<?> component, Class<?> componentToRegister) {\n        Container firstContainer = provider.provide(createRequest());\n        Container secondContainer = provider.provide(createRequest());\n\n        ResourceMethod firstMethod = mockery.mock(ResourceMethod.class, \"rm\" + counter++);\n        ResourceMethod secondMethod = mockery.mock(ResourceMethod.class, \"rm\" + counter++);\n        firstContainer.instanceFor(RequestInfo.class).setResourceMethod(firstMethod);\n        secondContainer.instanceFor(RequestInfo.class).setResourceMethod(secondMethod);\n\n        if (componentToRegister != null) {\n            firstContainer.register(componentToRegister);\n            if (secondContainer.instanceFor(componentToRegister) == null) {\n                // not an app scoped... then register on the other one too\n                secondContainer.register(componentToRegister);\n            }\n        }\n\n        Object firstInstance = firstContainer.instanceFor(component);\n        Object secondInstance = secondContainer.instanceFor(component);\n        checkSimilarity(component, shouldBeTheSame, firstInstance, secondInstance);\n    }\n\n    private void checkSimilarity(Class<?> component, boolean shouldBeTheSame, Object firstInstance,\n            Object secondInstance) {\n        if (shouldBeTheSame) {\n            MatcherAssert.assertThat(\"Should be the same instance for \" + component.getName(), firstInstance, Matchers\n                    .is(equalTo(secondInstance)));\n        } else {\n            MatcherAssert.assertThat(\"Should not be the same instance for \" + component.getName(), firstInstance,\n                    Matchers.is(not(equalTo(secondInstance))));\n        }\n    }\n\n    @Test\n    public void canProvideAllApplicationScopedComponents() {\n        Class<?>[] components = new Class[]{UrlToResourceTranslator.class, ResourceRegistry.class, DirScanner.class,\n                ResourceLocator.class, TypeCreator.class, InterceptorRegistry.class, PathResolver.class, ParameterNameProvider.class};\n        checkAvailabilityFor(true, components);\n        mockery.assertIsSatisfied();\n    }\n\n    private void checkAvailabilityFor(boolean shouldBeTheSame, Class<?>... components) {\n        for (Class<?> component : components) {\n            checkAvailabilityFor(shouldBeTheSame, component, null);\n        }\n    }\n\n    @ApplicationScoped\n    public static class MyAppComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyAppBasedComponents() {\n        checkAvailabilityFor(true, MyAppComponent.class, MyAppComponent.class);\n        mockery.assertIsSatisfied();\n    }\n\n    public static class MyRequestComponent {\n\n    }\n\n    @Test\n    public void processesCorrectlyRequestBasedComponents() {\n        checkAvailabilityFor(false, MyRequestComponent.class, MyRequestComponent.class);\n        mockery.assertIsSatisfied();\n    }\n\n}\n","lineNo":121}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\n\nimport org.hamcrest.Matcher;\nimport org.jmock.Expectations;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.vraptor.i18n.Message;\nimport org.vraptor.i18n.ValidationMessage;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.VRaptorMockery;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ValidatorTest {\n\n    private VRaptorMockery mockery;\n    private Validator validator;\n    private PageResult result;\n    private ParametersProvider provider;\n    private InterceptorStack stack;\n    private ValidationErrors errors;\n\n    @Before\n    public void setup() {\n        this.mockery = new VRaptorMockery();\n        this.result = mockery.mock(PageResult.class);\n        this.provider = mockery.mock(ParametersProvider.class);\n        this.errors = mockery.mock(ValidationErrors.class);\n        this.validator = new Validator(this.provider, this.result, errors);\n        this.stack = mockery.mock(InterceptorStack.class);\n    }\n\n    class OldComponent {\n        void method() {\n        }\n    }\n\n    @Test\n    public void doesNothingIfNotAnOldComponent() throws InterceptionException, IOException, NoSuchMethodException {\n        final OldComponent resourceInstance = new OldComponent();\n        final ResourceMethod method = mockery.methodFor(OldComponent.class, \"method\");\n        mockery.checking(new Expectations() {\n            {\n                one(stack).next(method, resourceInstance);\n            }\n        });\n        validator.intercept(stack, method, resourceInstance);\n        mockery.assertIsSatisfied();\n    }\n    \n    @org.vraptor.annotations.Component\n    interface MyComponent {\n        void noValidation();\n        void withValidation();\n        void validateWithValidation(ValidationErrors errors);\n    }\n\n\n    @Test\n    public void doestNothingIfValidationMethodNotFound() throws NoSuchMethodException, InterceptionException, IOException {\n        final MyComponent resourceInstance = mockery.mock(MyComponent.class);\n        final ResourceMethod method = mockery.methodFor(MyComponent.class, \"noValidation\");\n        mockery.checking(new Expectations() {\n            {\n                one(stack).next(method, resourceInstance);\n            }\n        });\n        validator.intercept(stack, method, resourceInstance);\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void forwardToValidationPageWithErrorsIfSomeFound() throws NoSuchMethodException, InterceptionException, IOException, ServletException {\n        final MyComponent resourceInstance = new MyComponent() {\n            public void validateWithValidation(ValidationErrors errors) {\n                errors.add(new Message(\"\", \"\"));\n            }\n            public void noValidation() {\n            }\n            public void withValidation() {\n            }\n        };\n        final ResourceMethod method = mockery.methodFor(MyComponent.class, \"withValidation\");\n        mockery.checking(new Expectations() {\n            {\n                one(provider).getParametersFor(method); will(returnValue(new Object[0]));\n                one(result).include(with(equal(\"errors\")), with(an(ValidationErrors.class)));\n                one(result).forward(\"invalid\");\n                one(errors).add(with((Matcher<? extends ValidationMessage>) an(Message.class)));\n                one(errors).size(); will(returnValue(1));\n            }\n        });\n        validator.intercept(stack, method, resourceInstance);\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void doesNothingIfValidationMethodExistsButNoErrorsOccur() throws NoSuchMethodException, InterceptionException, IOException {\n        final MyComponent resourceInstance = new MyComponent() {\n            public void validateWithValidation(ValidationErrors errors) {\n            }\n            public void noValidation() {\n            }\n            public void withValidation() {\n            }\n        };\n        final ResourceMethod method = mockery.methodFor(MyComponent.class, \"withValidation\");\n        mockery.checking(new Expectations() {\n            {\n                one(provider).getParametersFor(method); will(returnValue(new Object[0]));\n                one(stack).next(method, resourceInstance);\n                one(errors).size(); will(returnValue(0));\n            }\n        });\n        validator.intercept(stack, method, resourceInstance);\n        mockery.assertIsSatisfied();\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\n\nimport org.hamcrest.Matcher;\nimport org.jmock.Expectations;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.vraptor.i18n.Message;\nimport org.vraptor.i18n.ValidationMessage;\nimport org.vraptor.validator.ValidationErrors;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.VRaptorMockery;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ValidatorTest {\n\n    private VRaptorMockery mockery;\n    private Validator validator;\n    private PageResult result;\n    private ParametersProvider provider;\n    private InterceptorStack stack;\n    private ValidationErrors errors;\n\n    @Before\n    public void setup() {\n        this.mockery = new VRaptorMockery();\n        this.result = mockery.mock(PageResult.class);\n        this.provider = mockery.mock(ParametersProvider.class);\n        this.errors = mockery.mock(ValidationErrors.class);\n        this.validator = new Validator(this.provider, this.result, errors);\n        this.stack = mockery.mock(InterceptorStack.class);\n    }\n\n    class OldComponent {\n        void method() {\n        }\n    }\n\n    @Test\n    public void doesNothingIfNotAnOldComponent() throws InterceptionException, IOException, NoSuchMethodException {\n        final OldComponent resourceInstance = new OldComponent();\n        final ResourceMethod method = mockery.methodFor(OldComponent.class, \"method\");\n        mockery.checking(new Expectations() {\n            {\n                one(stack).next(method, resourceInstance);\n            }\n        });\n        validator.intercept(stack, method, resourceInstance);\n        mockery.assertIsSatisfied();\n    }\n    \n    @org.vraptor.annotations.Component\n    interface MyComponent {\n        void noValidation();\n        void withValidation();\n        void validateWithValidation(ValidationErrors errors);\n    }\n\n\n    @Test\n    public void doestNothingIfValidationMethodNotFound() throws NoSuchMethodException, InterceptionException, IOException {\n        final MyComponent resourceInstance = mockery.mock(MyComponent.class);\n        final ResourceMethod method = mockery.methodFor(MyComponent.class, \"noValidation\");\n        mockery.checking(new Expectations() {\n            {\n                one(stack).next(method, resourceInstance);\n            }\n        });\n        validator.intercept(stack, method, resourceInstance);\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void forwardToValidationPageWithErrorsIfSomeFound() throws NoSuchMethodException, InterceptionException, IOException, ServletException {\n        final Message message = new Message(\"\", \"\");\n        final MyComponent resourceInstance = new MyComponent() {\n            public void validateWithValidation(ValidationErrors errors) {\n                errors.add(message);\n            }\n            public void noValidation() {\n            }\n            public void withValidation() {\n            }\n        };\n        final ResourceMethod method = mockery.methodFor(MyComponent.class, \"withValidation\");\n        mockery.checking(new Expectations() {\n            {\n                one(provider).getParametersFor(method); will(returnValue(new Object[0]));\n                one(result).include(with(equal(\"errors\")), with(an(ValidationErrors.class)));\n                one(result).forward(\"invalid\");\n                one(errors).add(message);\n                one(errors).size(); will(returnValue(1));\n            }\n        });\n        validator.intercept(stack, method, resourceInstance);\n        mockery.assertIsSatisfied();\n    }\n\n    @Test\n    public void doesNothingIfValidationMethodExistsButNoErrorsOccur() throws NoSuchMethodException, InterceptionException, IOException {\n        final MyComponent resourceInstance = new MyComponent() {\n            public void validateWithValidation(ValidationErrors errors) {\n            }\n            public void noValidation() {\n            }\n            public void withValidation() {\n            }\n        };\n        final ResourceMethod method = mockery.methodFor(MyComponent.class, \"withValidation\");\n        mockery.checking(new Expectations() {\n            {\n                one(provider).getParametersFor(method); will(returnValue(new Object[0]));\n                one(stack).next(method, resourceInstance);\n                one(errors).size(); will(returnValue(0));\n            }\n        });\n        validator.intercept(stack, method, resourceInstance);\n        mockery.assertIsSatisfied();\n    }\n\n}\n","lineNo":82}
{"Smelly Sample":"package br.com.caelum.vraptor.interceptor;\n\nimport java.io.IOException;\n\nimport org.jmock.Expectations;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.VRaptorMockery;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodParameters;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class ParametersInstantiatorTest {\n\n    private VRaptorMockery mockery;\n    private ParametersInstantiator instantiator;\n    private MethodParameters params;\n    private ParameterNameProvider provider;\n    private ParametersProvider parametersProvider;\n\n    @Before\n    public void setup() {\n        this.mockery = new VRaptorMockery();\n        this.params = mockery.mock(MethodParameters.class);\n        this.provider = mockery.mock(ParameterNameProvider.class);\n        this.parametersProvider = mockery.mock(ParametersProvider.class);\n        this.instantiator = new ParametersInstantiator(parametersProvider, params, provider);\n    }\n    \n    class Component {\n        void method() {\n        }\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n        final InterceptorStack stack = mockery.mock(InterceptorStack.class);\n        final ResourceMethod method = mockery.methodFor(Component.class, \"method\");\n        mockery.checking(new Expectations() {\n            {\n                one(parametersProvider).getParametersFor(method); Object[] values = new Object[]{new Object()};\n                will(returnValue(values));\n                one(provider).parameterNamesFor(method.getMethod()); will(returnValue(new String[]{\"names\"}));\n                one(stack).next(method, null);\n                one(params).set(values, new String[]{\"names\"});\n            }\n        });\n        instantiator.intercept(stack, method, null);\n        mockery.assertIsSatisfied();\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.interceptor;\n\nimport java.io.IOException;\nimport java.lang.reflect.Method;\n\nimport org.jmock.Expectations;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.VRaptorMockery;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodParameters;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class ParametersInstantiatorTest {\n\n    private VRaptorMockery mockery;\n    private ParametersInstantiator instantiator;\n    private MethodParameters params;\n    private ParameterNameProvider provider;\n    private ParametersProvider parametersProvider;\n\n    @Before\n    public void setup() {\n        this.mockery = new VRaptorMockery();\n        this.params = mockery.mock(MethodParameters.class);\n        this.provider = mockery.mock(ParameterNameProvider.class);\n        this.parametersProvider = mockery.mock(ParametersProvider.class);\n        this.instantiator = new ParametersInstantiator(parametersProvider, params, provider);\n    }\n\n    class Component {\n        void method() {\n        }\n    }\n\n    @Test\n    public void shouldUseTheProvidedParameters() throws InterceptionException, IOException, NoSuchMethodException {\n        final InterceptorStack stack = mockery.mock(InterceptorStack.class);\n        final ResourceMethod method = mockery.methodFor(Component.class, \"method\");\n        final Method reflected = method.getMethod();\n        mockery.checking(new Expectations() {\n            {\n                one(parametersProvider).getParametersFor(method);\n                Object[] values = new Object[] { new Object() };\n                will(returnValue(values));\n                one(provider).parameterNamesFor(reflected);\n                will(returnValue(new String[] { \"names\" }));\n                one(stack).next(method, null);\n                one(params).set(values, new String[] { \"names\" });\n            }\n        });\n        instantiator.intercept(stack, method, null);\n        mockery.assertIsSatisfied();\n    }\n\n}\n","lineNo":44}
{"Smelly Sample":"package br.com.caelum.vraptor.interceptor;\n\nimport java.io.IOException;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodParameters;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class ParametersInstantiator implements Interceptor{\n\n    private final ParametersProvider provider;\n    private final MethodParameters parameters;\n    private final ParameterNameProvider nameProvider;\n\n    public ParametersInstantiator(ParametersProvider provider, MethodParameters parameters, ParameterNameProvider nameProvider) {\n        this.provider = provider;\n        this.parameters = parameters;\n        this.nameProvider = nameProvider;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException,\n            InterceptionException {\n        parameters.set(provider.getParametersFor(method), nameProvider.parameterNamesFor(method.getMethod()));\n        stack.next(method, resourceInstance);\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.interceptor;\n\nimport java.io.IOException;\nimport java.util.Arrays;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.core.MethodParameters;\nimport br.com.caelum.vraptor.http.ParameterNameProvider;\nimport br.com.caelum.vraptor.http.ParametersProvider;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\n/**\n * An interceptor which instantiates parameters and provide them to the stack.\n * \n * @author Guilherme Silveira\n */\npublic class ParametersInstantiator implements Interceptor {\n\n    private final ParametersProvider provider;\n    private final MethodParameters parameters;\n    private final ParameterNameProvider nameProvider;\n\n    private static final Logger logger = LoggerFactory.getLogger(ParametersInstantiator.class);\n\n    public ParametersInstantiator(ParametersProvider provider, MethodParameters parameters,\n            ParameterNameProvider nameProvider) {\n        this.provider = provider;\n        this.parameters = parameters;\n        this.nameProvider = nameProvider;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException,\n            InterceptionException {\n        Object[] values = provider.getParametersFor(method);\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"Parameter values for \" + method + \" are \" + Arrays.asList(values));\n        }\n        parameters.set(values, nameProvider.parameterNamesFor(method.getMethod()));\n        stack.next(method, resourceInstance);\n    }\n\n}\n","lineNo":43}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.servlet.ServletContext;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * Loads some basic config from vraptor.xml. Only this basic configuration is\n * automatically supported.\n * \n * @author Guilherme Silveira\n */\npublic class VRaptor2Config implements Config {\n\n    private static final Logger logger = LoggerFactory.getLogger(VRaptor2Config.class);\n\n    private final List<String> converters = new ArrayList<String>();\n\n    private final Map<String, String> results = new HashMap<String,String>();\n\n    private String viewPattern = \"/$component/$logic.$result.jsp\";\n\n    public VRaptor2Config(ServletContext context) throws IOException {\n        File xml = new File(context.getRealPath(\"/WEB-INF/classes/vraptor.xml\"));\n        parseVRaptor(xml);\n        File views = new File(context.getRealPath(\"/WEB-INF/classes/views.properties\"));\n        parseViews(views);\n    }\n    interface LineListener{\n        void content(String line);\n    }\n\n    private void parseVRaptor(File file) throws FileNotFoundException, IOException {\n        parse(file, new LineListener() {\n            public void content(String line) {\n                if (line.contains(\"<converter>\")) {\n                    line = extract(line, \"converter\");\n                    logger.info(\"Vraptor 2 converter found - remember to migrate to vraptor3 : \" + line);\n                    converters.add(line);\n                } else if(line.contains(\"<regex-view-manager>\")) {\n                    line = extract(line, \"regex-view-manager\");\n                    logger.info(\"Vraptor 2 regex-view-manager found - remember to migrate to vraptor3 : \" + line);\n                    viewPattern = line;\n                }\n            }\n        });\n    }\n\n    private void parse(File file, LineListener listener) throws IOException {\n        if(!file.exists()) {\n            return;\n        }\n        FileReader fileReader = new FileReader(file);\n        BufferedReader reader = new BufferedReader(fileReader);\n        while (true) {\n            String line = reader.readLine();\n            if (line == null) {\n                break;\n            }\n            listener.content(line);\n        }\n        fileReader.close();\n        reader.close();\n    }\n\n    private void parseViews(File file) throws FileNotFoundException, IOException {\n        if(!file.exists()) {\n            return;\n        }\n        logger.warn(\"Vraptor 2 views.properties found - remember to migrate to vraptor3\");\n        Properties p = new Properties();\n        FileInputStream stream = new FileInputStream(file);\n        p.load(stream);\n        for(Object key : p.keySet()) {\n            results.put((String) key, p.getProperty((String) key));\n            logger.debug(\"Mapped: \" + key + \" to \" + p.getProperty((String) key));\n        }\n        stream.close();\n    }\n\n    private String extract(String line, String tag) {\n        return line.substring(line.indexOf(\"<\" + tag + \">\") + tag.length()+2, line.lastIndexOf(\"<\/\" + tag + \">\"));\n    }\n    \n    public String getViewPattern() {\n        return viewPattern;\n    }\n\n    public List<String> getConverters() {\n        return converters;\n    }\n\n    public String getForwardFor(String key) {\n        return this.results.get(key);\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport javax.servlet.ServletContext;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.plugin.VRaptorPlugin;\n\n/**\n * Loads some basic config from vraptor.xml.<br>\n * Only this basic configuration is automatically supported. This way we can\n * support vraptor2 most important features. We do not really parse the xml file\n * as it would be a little bit too much for the information that we require.\n * \n * @author Guilherme Silveira\n */\npublic class VRaptor2Config implements Config {\n\n    private static final Logger logger = LoggerFactory.getLogger(VRaptor2Config.class);\n\n    private final List<String> converters = new ArrayList<String>();\n    private final List<String> plugins = new ArrayList<String>();\n\n    private final Map<String, String> results = new HashMap<String, String>();\n\n    private String viewPattern = \"/$component/$logic.$result.jsp\";\n\n    public VRaptor2Config(ServletContext context) throws IOException, ConfigException {\n        File xml = new File(context.getRealPath(\"/WEB-INF/classes/vraptor.xml\"));\n        parseVRaptor(xml);\n        File views = new File(context.getRealPath(\"/WEB-INF/classes/views.properties\"));\n        parseViews(views);\n    }\n\n    interface LineListener {\n        void content(String line) throws ConfigException;\n    }\n\n    private void parseVRaptor(File file) throws FileNotFoundException, IOException, ConfigException {\n        parse(file, new LineListener() {\n            public void content(String line) throws ConfigException {\n                if (line.contains(\"<converter>\")) {\n                    line = extract(line, \"converter\");\n                    logger.info(\"Vraptor 2 converter found - remember to migrate to vraptor3 : \" + line);\n                    converters.add(line);\n                } else if (line.contains(\"<regex-view-manager>\")) {\n                    line = extract(line, \"regex-view-manager\");\n                    logger.info(\"Vraptor 2 regex-view-manager found - remember to migrate to vraptor3 : \" + line);\n                    viewPattern = line;\n                } else if (line.contains(\"<plugin>\")) {\n                    line = extract(line, \"plugin\");\n                    logger.info(\"Vraptor 2 plugin found - remember to migrate to vraptor3 : \" + line);\n                    plugins.add(line);\n                }\n            }\n        });\n    }\n\n    private void parse(File file, LineListener listener) throws IOException, ConfigException {\n        if (!file.exists()) {\n            return;\n        }\n        FileReader fileReader = new FileReader(file);\n        BufferedReader reader = new BufferedReader(fileReader);\n        while (true) {\n            String line = reader.readLine();\n            if (line == null) {\n                break;\n            }\n            listener.content(line);\n        }\n        fileReader.close();\n        reader.close();\n    }\n\n    private void parseViews(File file) throws FileNotFoundException, IOException {\n        if (!file.exists()) {\n            return;\n        }\n        logger.warn(\"Vraptor 2 views.properties found - remember to migrate to vraptor3\");\n        Properties p = new Properties();\n        FileInputStream stream = new FileInputStream(file);\n        p.load(stream);\n        for (Object key : p.keySet()) {\n            results.put((String) key, p.getProperty((String) key));\n            logger.debug(\"Mapped: \" + key + \" to \" + p.getProperty((String) key));\n        }\n        stream.close();\n    }\n\n    private String extract(String line, String tag) throws ConfigException {\n        int lastPosition = line.lastIndexOf(\"<\/\" + tag + \">\");\n        if (lastPosition == -1) {\n            throw new ConfigException(\"Valid vraptor.xml but not supported by vraptor3. You should put all \" + tag\n                    + \" tags in separate lines (one line for an opening, content and closing tag)\");\n        }\n        return line.substring(line.indexOf(\"<\" + tag + \">\") + tag.length() + 2, lastPosition);\n    }\n\n    public String getViewPattern() {\n        return viewPattern;\n    }\n\n    public List<String> getConverters() {\n        return converters;\n    }\n\n    public String getForwardFor(String key) {\n        return this.results.get(key);\n    }\n\n    public boolean hasPlugin(Class<? extends VRaptorPlugin> type) {\n        return this.plugins.contains(type.getName());\n    }\n\n}\n","lineNo":104}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class OutjectionInterceptor implements Interceptor{\n    \n    private static final String GET = \"get\";\n    private static final String IS = \"is\";\n    \n    private static final Logger logger = LoggerFactory.getLogger(OutjectionInterceptor.class);\n    private final HttpServletRequest request;\n    private static final BeanHelper helper = new BeanHelper();\n    \n    public OutjectionInterceptor(HttpServletRequest request) {\n        this.request = request;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException,\n            InterceptionException {\n        Method[] methods = method.getResource().getType().getDeclaredMethods();\n        for (Method outject : methods) {\n            if(outject.getName().length()<3 || !(outject.getName().startsWith(IS) || outject.getName().startsWith(GET))) {\n                continue;\n            }\n            if(outject.getParameterTypes().length!=0) {\n                logger.error(\"A get method was found at \" + method.getResource().getType() + \" but was not used because it receives parameters. Fix it.\");\n                continue;\n            } else if(outject.getReturnType().equals(Void.class)) {\n                logger.error(\"A get method was found at \" + method.getResource().getType() + \" but was not used because it returns void. Fix it.\");\n                continue;\n            }\n            try {\n                Object result = outject.invoke(resourceInstance);\n                String name = helper.nameForGetter(outject);\n                logger.debug(\"Outjecting \" + name);\n                request.setAttribute(name, result);\n            } catch (IllegalArgumentException e) {\n                throw new InterceptionException(\"Unable to outject value for \" + outject.getName(), e);\n            } catch (IllegalAccessException e) {\n                throw new InterceptionException(\"Unable to outject value for \" + outject.getName(), e);\n            } catch (InvocationTargetException e) {\n                throw new InterceptionException(\"Unable to outject value for \" + outject.getName(), e.getCause());\n            }\n        }\n        stack.next(method, resourceInstance);\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.InterceptionException;\nimport br.com.caelum.vraptor.Interceptor;\nimport br.com.caelum.vraptor.core.InterceptorStack;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class OutjectionInterceptor implements Interceptor{\n    \n    private static final String GET = \"get\";\n    private static final String IS = \"is\";\n    \n    private static final Logger logger = LoggerFactory.getLogger(OutjectionInterceptor.class);\n    private final HttpServletRequest request;\n    private static final BeanHelper helper = new BeanHelper();\n    \n    public OutjectionInterceptor(HttpServletRequest request) {\n        this.request = request;\n    }\n\n    public boolean accepts(ResourceMethod method) {\n        return true;\n    }\n\n    public void intercept(InterceptorStack stack, ResourceMethod method, Object resourceInstance) throws IOException,\n            InterceptionException {\n        Class<?> type = method.getResource().getType();\n        Method[] methods = type.getDeclaredMethods();\n        for (Method outject : methods) {\n            if(outject.getName().length()<3 || !(outject.getName().startsWith(IS) || outject.getName().startsWith(GET))) {\n                continue;\n            }\n            if(outject.getParameterTypes().length!=0) {\n                logger.error(\"A get method was found at \" + type + \" but was not used because it receives parameters. Fix it.\");\n                continue;\n            } else if(outject.getReturnType().equals(void.class)) {\n                logger.error(\"A get method was found at \" + type + \" but was not used because it returns void. Fix it.\");\n                continue;\n            }\n            try {\n                Object result = outject.invoke(resourceInstance);\n                String name = helper.nameForGetter(outject);\n                logger.debug(\"Outjecting \" + name);\n                request.setAttribute(name, result);\n            } catch (IllegalArgumentException e) {\n                throw new InterceptionException(\"Unable to outject value for \" + outject.getName(), e);\n            } catch (IllegalAccessException e) {\n                throw new InterceptionException(\"Unable to outject value for \" + outject.getName(), e);\n            } catch (InvocationTargetException e) {\n                throw new InterceptionException(\"Unable to outject value for \" + outject.getName(), e.getCause());\n            }\n        }\n        stack.next(method, resourceInstance);\n    }\n\n}\n","lineNo":36}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.core.WebRequest;\nimport org.vraptor.http.VRaptorServletRequest;\nimport org.vraptor.http.VRaptorServletResponse;\nimport org.vraptor.introspector.ExpressionEvaluationException;\nimport org.vraptor.introspector.ExpressionEvaluator;\nimport org.vraptor.scope.DefaultLogicRequest;\n\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ViewsPropertiesPageResult implements PageResult{\n\n    private final Config config;\n    private final HttpServletRequest request;\n    private final PathResolver resolver;\n    private final ResourceMethod method;\n    private final HttpServletResponse response;\n    private final ExpressionEvaluator evaluator = new ExpressionEvaluator();\n    private final DefaultLogicRequest logic;\n    \n    private static final Logger logger = LoggerFactory.getLogger(ViewsPropertiesPageResult.class);\n\n    public ViewsPropertiesPageResult(Config config, HttpServletRequest request, PathResolver resolver, ResourceMethod method, HttpServletResponse response, ServletContext context) {\n        this.config = config;\n        this.request = request;\n        this.resolver = resolver;\n        this.method = method;\n        this.response = response;\n        logic = new DefaultLogicRequest(null,new WebRequest(new VRaptorServletRequest(request,null), new VRaptorServletResponse(response), context),null);\n    }\n\n    public void forward(String result) throws ServletException, IOException {\n        String key = Info.getComponentName(method.getResource().getType()) + \".\" + Info.getLogicName(method.getMethod()) + \".\" + result;\n        \n        String path = config.getForwardFor(key);\n        \n        if(path==null) {\n            request.getRequestDispatcher(resolver.pathFor(method, result)).forward(request, response);\n        } else{\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"overriden view found for \" + key + \" : \" + path);\n            }\n            try {\n                result = evaluator.parseExpression(path, logic);\n            } catch (ExpressionEvaluationException e) {\n                throw new IOException(\"Unable to redirect while evaluating expression '\" + path + \"'.\",e);\n            }\n            if(path.startsWith(\"redirect:\")) {\n                response.sendRedirect(path.substring(9));\n            } else {\n                request.getRequestDispatcher(path).forward(request, response);\n            }\n        }\n    }\n\n    public void include(String result) throws ServletException, IOException {\n        request.getRequestDispatcher(resolver.pathFor(method, result)).include(request, response);\n    }\n\n    public void include(String key, Object value) {\n        request.setAttribute(key, value);\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.core.WebRequest;\nimport org.vraptor.http.VRaptorServletRequest;\nimport org.vraptor.http.VRaptorServletResponse;\nimport org.vraptor.introspector.ExpressionEvaluationException;\nimport org.vraptor.introspector.ExpressionEvaluator;\nimport org.vraptor.scope.DefaultLogicRequest;\n\nimport br.com.caelum.vraptor.resource.Resource;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ViewsPropertiesPageResult implements PageResult {\n\n    private final Config config;\n    private final HttpServletRequest request;\n    private final PathResolver resolver;\n    private final ResourceMethod method;\n    private final HttpServletResponse response;\n    private final ExpressionEvaluator evaluator = new ExpressionEvaluator();\n    private final DefaultLogicRequest logic;\n\n    private static final Logger logger = LoggerFactory.getLogger(ViewsPropertiesPageResult.class);\n\n    public ViewsPropertiesPageResult(Config config, HttpServletRequest request, PathResolver resolver,\n            ResourceMethod method, HttpServletResponse response, ServletContext context) {\n        this.config = config;\n        this.request = request;\n        this.resolver = resolver;\n        this.method = method;\n        this.response = response;\n        logic = new DefaultLogicRequest(null, new WebRequest(new VRaptorServletRequest(request, null),\n                new VRaptorServletResponse(response), context), null);\n    }\n\n    public void forward(String result) throws ServletException, IOException {\n        Resource resource = method.getResource();\n        if(!Info.isOldComponent(resource)) {\n            request.getRequestDispatcher(resolver.pathFor(method, result)).forward(request, response);\n            return;\n        }\n        String key = Info.getComponentName(resource.getType()) + \".\"\n                + Info.getLogicName(method.getMethod()) + \".\" + result;\n\n        String path = config.getForwardFor(key);\n\n        if (path == null) {\n            request.getRequestDispatcher(resolver.pathFor(method, result)).forward(request, response);\n        } else {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"overriden view found for \" + key + \" : \" + path);\n            }\n            try {\n                result = evaluator.parseExpression(path, logic);\n            } catch (ExpressionEvaluationException e) {\n                throw new IOException(\"Unable to redirect while evaluating expression '\" + path + \"'.\", e);\n            }\n            if (path.startsWith(\"redirect:\")) {\n                response.sendRedirect(path.substring(9));\n            } else {\n                request.getRequestDispatcher(path).forward(request, response);\n            }\n        }\n    }\n\n    public void include(String result) throws ServletException, IOException {\n        request.getRequestDispatcher(resolver.pathFor(method, result)).include(request, response);\n    }\n\n    public void include(String key, Object value) {\n        request.setAttribute(key, value);\n    }\n\n}\n","lineNo":48}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.converter;\n\nimport java.lang.reflect.Member;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Map;\n\nimport ognl.TypeConverter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.ioc.Container;\n\npublic class OgnlToConvertersController implements TypeConverter {\n    \n    private final Converters converters;\n\n    public OgnlToConvertersController(Converters converters) {\n        this.converters = converters;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Object convertValue(Map context, Object target, Member member, String propertyName, Object value, Class toType) {\n        if(!(member instanceof Method)) {\n            throw new IllegalArgumentException(\"Vraptor can only navigate through getter/setter methods, not \" + member + \" from \" + target.getClass().getName());\n        }\n        Method method = (Method) member;\n        Type[] parameterTypes = method.getGenericParameterTypes();\n        if(parameterTypes.length!=1) {\n            throw new IllegalArgumentException(\"Vraptor can only navigate through setters with one parameter, not \" + member + \" from \" + target.getClass().getName());\n        }\n        Type parameterType = parameterTypes[0];\n        Class type;\n        if(parameterType instanceof ParameterizedType) {\n            type = (Class) ((ParameterizedType) parameterType).getRawType();\n        } else {\n            type = (Class) parameterType;\n        }\n        Container container = (Container) context.get(Container.class);\n        return converters.to(type, container).convert((String) value, type);\n    }\n\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.converter;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Member;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Map;\n\nimport ognl.TypeConverter;\nimport br.com.caelum.vraptor.Converter;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.ioc.Container;\n\npublic class OgnlToConvertersController implements TypeConverter {\n\n    private final Converters converters;\n\n    public OgnlToConvertersController(Converters converters) {\n        this.converters = converters;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public Object convertValue(Map context, Object target, Member member, String propertyName, Object value,\n            Class toType) {\n        Type genericType;\n        if (member instanceof Field) {\n            Field field = (Field) member;\n            genericType = field.getGenericType();\n        } else if (member instanceof Method) {\n            Method method = (Method) member;\n            Type[] parameterTypes = method.getGenericParameterTypes();\n            if (parameterTypes.length != 1) {\n                // TODO better\n                throw new IllegalArgumentException(\"Vraptor can only navigate through setters with one parameter, not \"\n                        + member + \" from \" + target.getClass().getName());\n            }\n            genericType = parameterTypes[0];\n        } else {\n            // TODO better\n            throw new IllegalArgumentException(\"Vraptor can only navigate through getter/setter methods, not \" + member\n                    + \" from \" + target.getClass().getName());\n        }\n        Class type;\n        if (genericType instanceof ParameterizedType) {\n            type = (Class) ((ParameterizedType) genericType).getRawType();\n        } else {\n            type = (Class) genericType;\n        }\n        Container container = (Container) context.get(Container.class);\n        Converter<?> converter = converters.to(type, container);\n        if (converter == null) {\n            // TODO better, validation error?\n            throw new IllegalArgumentException(\"Cannot find a converter to \" + type.getName());\n        }\n        return converter.convert((String) value, type);\n    }\n\n}\n","lineNo":80}
{"Smelly Sample":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.core.WebRequest;\nimport org.vraptor.http.VRaptorServletRequest;\nimport org.vraptor.http.VRaptorServletResponse;\nimport org.vraptor.introspector.ExpressionEvaluationException;\nimport org.vraptor.introspector.ExpressionEvaluator;\nimport org.vraptor.scope.DefaultLogicRequest;\n\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ViewsPropertiesPageResult implements PageResult{\n\n    private final Config config;\n    private final HttpServletRequest request;\n    private final PathResolver resolver;\n    private final ResourceMethod method;\n    private final HttpServletResponse response;\n    private final ExpressionEvaluator evaluator = new ExpressionEvaluator();\n    private final DefaultLogicRequest logic;\n    \n    private static final Logger logger = LoggerFactory.getLogger(ViewsPropertiesPageResult.class);\n\n    public ViewsPropertiesPageResult(Config config, HttpServletRequest request, PathResolver resolver, ResourceMethod method, HttpServletResponse response, ServletContext context) {\n        this.config = config;\n        this.request = request;\n        this.resolver = resolver;\n        this.method = method;\n        this.response = response;\n        logic = new DefaultLogicRequest(null,new WebRequest(new VRaptorServletRequest(request,null), new VRaptorServletResponse(response), context),null);\n    }\n\n    public void forward(String result) throws ServletException, IOException {\n        String path = config.getForwardFor(result);\n        if(path==null) {\n            request.getRequestDispatcher(resolver.pathFor(method, result)).forward(request, response);\n        } else{\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"overriden view found \" + result + \" : \" + path);\n            }\n            try {\n                result = evaluator.parseExpression(path, logic);\n            } catch (ExpressionEvaluationException e) {\n                throw new IOException(\"Unable to redirect while evaluating expression '\" + path + \"'.\",e);\n            }\n            if(path.startsWith(\"redirect:\")) {\n                response.sendRedirect(path.substring(9));\n            } else {\n                request.getRequestDispatcher(path).forward(request, response);\n            }\n        }\n    }\n\n    public void include(String result) throws ServletException, IOException {\n        request.getRequestDispatcher(resolver.pathFor(method, result)).include(request, response);\n    }\n\n    public void include(String key, Object value) {\n        request.setAttribute(key, value);\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.vraptor2;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletContext;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.vraptor.core.WebRequest;\nimport org.vraptor.http.VRaptorServletRequest;\nimport org.vraptor.http.VRaptorServletResponse;\nimport org.vraptor.introspector.ExpressionEvaluationException;\nimport org.vraptor.introspector.ExpressionEvaluator;\nimport org.vraptor.scope.DefaultLogicRequest;\n\nimport br.com.caelum.vraptor.resource.ResourceMethod;\nimport br.com.caelum.vraptor.view.PathResolver;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\n\npublic class ViewsPropertiesPageResult implements PageResult{\n\n    private final Config config;\n    private final HttpServletRequest request;\n    private final PathResolver resolver;\n    private final ResourceMethod method;\n    private final HttpServletResponse response;\n    private final ExpressionEvaluator evaluator = new ExpressionEvaluator();\n    private final DefaultLogicRequest logic;\n    \n    private static final Logger logger = LoggerFactory.getLogger(ViewsPropertiesPageResult.class);\n\n    public ViewsPropertiesPageResult(Config config, HttpServletRequest request, PathResolver resolver, ResourceMethod method, HttpServletResponse response, ServletContext context) {\n        this.config = config;\n        this.request = request;\n        this.resolver = resolver;\n        this.method = method;\n        this.response = response;\n        logic = new DefaultLogicRequest(null,new WebRequest(new VRaptorServletRequest(request,null), new VRaptorServletResponse(response), context),null);\n    }\n\n    public void forward(String result) throws ServletException, IOException {\n        String key = Info.getComponentName(method.getResource().getType()) + \".\" + Info.getLogicName(method.getMethod()) + \".\" + result;\n        \n        String path = config.getForwardFor(key);\n        \n        if(path==null) {\n            request.getRequestDispatcher(resolver.pathFor(method, result)).forward(request, response);\n        } else{\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"overriden view found for \" + key + \" : \" + path);\n            }\n            try {\n                result = evaluator.parseExpression(path, logic);\n            } catch (ExpressionEvaluationException e) {\n                throw new IOException(\"Unable to redirect while evaluating expression '\" + path + \"'.\",e);\n            }\n            if(path.startsWith(\"redirect:\")) {\n                response.sendRedirect(path.substring(9));\n            } else {\n                request.getRequestDispatcher(path).forward(request, response);\n            }\n        }\n    }\n\n    public void include(String result) throws ServletException, IOException {\n        request.getRequestDispatcher(resolver.pathFor(method, result)).include(request, response);\n    }\n\n    public void include(String key, Object value) {\n        request.setAttribute(key, value);\n    }\n\n}\n","lineNo":45}
{"Smelly Sample":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport br.com.caelum.vraptor.core.DefaultRequestExecution;\nimport br.com.caelum.vraptor.http.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.http.StupidTranslator;\nimport br.com.caelum.vraptor.interceptor.DefaultInterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.DefaultMethodLookupBuilder;\nimport br.com.caelum.vraptor.resource.DefaultResourceRegistry;\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.support.GenericApplicationContext;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.context.support.GenericWebApplicationContext;\n\nimport javax.servlet.ServletContext;\n\n/**\n * @author Fabio Kung\n */\npublic class SpringBasedContainer implements Container {\n    private final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n    private final GenericWebApplicationContext applicationContext;\n\n    private String[] basePackages = {\"br.com.caelum.vraptor\"};\n\n    public SpringBasedContainer(String... basePackages) {\n        // TODO provide users the ability to provide custom containers\n        if (basePackages.length > 0) {\n            this.basePackages = basePackages;\n        }\n        applicationContext = new GenericWebApplicationContext();\n        registerCustomInjectionProcessor(applicationContext);\n        AnnotationConfigUtils.registerAnnotationConfigProcessors(applicationContext);\n        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(applicationContext);\n    }\n\n    private void registerCustomInjectionProcessor(GenericApplicationContext applicationContext) {\n        RootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n        definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n        definition.getPropertyValues().addPropertyValue(\"order\", new Integer(Ordered.LOWEST_PRECEDENCE));\n        applicationContext.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n    }\n\n    public void start(ServletContext context) {\n        register(context);\n        register(DefaultResourceRegistry.class);\n        register(StupidTranslator.class);\n        register(DefaultRequestExecution.class);\n        register(DefaultInterceptorRegistry.class);\n        register(InstantiateInterceptor.class);\n        register(AsmBasedTypeCreator.class);\n        register(DefaultMethodLookupBuilder.class);\n\n        new ComponentScanner(applicationContext).scan(basePackages);\n        applicationContext.refresh();\n        applicationContext.start();\n    }\n\n    public void stop() {\n        applicationContext.stop();\n        applicationContext.destroy();\n    }\n\n    public <T> T instanceFor(Class<T> type) {\n        return (T) BeanFactoryUtils.beanOfType(applicationContext, type);\n    }\n\n    public void register(Object instance) {\n        applicationContext.getBeanFactory().registerSingleton(instance.getClass().getName(), instance);\n    }\n\n    public void register(Class<?> type) {\n        AnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n        String name = beanNameGenerator.generateBeanName(definition, applicationContext);\n        applicationContext.registerBeanDefinition(name, definition);\n    }\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.ioc.spring;\n\nimport br.com.caelum.vraptor.core.DefaultConverters;\nimport br.com.caelum.vraptor.core.DefaultInterceptorStack;\nimport br.com.caelum.vraptor.core.DefaultRequestExecution;\nimport br.com.caelum.vraptor.core.DefaultResult;\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.http.AsmBasedTypeCreator;\nimport br.com.caelum.vraptor.http.OgnlParametersProvider;\nimport br.com.caelum.vraptor.http.StupidTranslator;\nimport br.com.caelum.vraptor.interceptor.DefaultInterceptorRegistry;\nimport br.com.caelum.vraptor.interceptor.ExecuteMethodInterceptor;\nimport br.com.caelum.vraptor.interceptor.InstantiateInterceptor;\nimport br.com.caelum.vraptor.interceptor.InterceptorListPriorToExecutionExtractor;\nimport br.com.caelum.vraptor.interceptor.ResourceLookupInterceptor;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.DefaultMethodLookupBuilder;\nimport br.com.caelum.vraptor.resource.DefaultResourceRegistry;\nimport br.com.caelum.vraptor.view.jsp.PageResult;\nimport org.springframework.aop.config.AopConfigUtils;\nimport org.springframework.aop.scope.ScopedProxyUtils;\nimport org.springframework.beans.factory.BeanFactoryUtils;\nimport org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.config.BeanDefinitionHolder;\nimport org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\nimport org.springframework.beans.factory.support.RootBeanDefinition;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.AnnotationConfigUtils;\nimport org.springframework.context.annotation.ScopeMetadata;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.context.support.GenericApplicationContext;\nimport org.springframework.core.Ordered;\nimport org.springframework.web.context.support.GenericWebApplicationContext;\n\nimport javax.servlet.ServletContext;\n\n/**\n * @author Fabio Kung\n */\npublic class SpringBasedContainer implements Container {\n    private final AnnotationBeanNameGenerator beanNameGenerator = new AnnotationBeanNameGenerator();\n    private final GenericWebApplicationContext applicationContext;\n\n    private String[] basePackages = {\"br.com.caelum.vraptor\"};\n\n    public SpringBasedContainer(String... basePackages) {\n        // TODO provide users the ability to provide custom containers\n        if (basePackages.length > 0) {\n            this.basePackages = basePackages;\n        }\n        applicationContext = new GenericWebApplicationContext();\n        registerCustomInjectionProcessor(applicationContext);\n        AnnotationConfigUtils.registerAnnotationConfigProcessors(applicationContext);\n        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(applicationContext);\n    }\n\n    private void registerCustomInjectionProcessor(GenericApplicationContext applicationContext) {\n        RootBeanDefinition definition = new RootBeanDefinition(InjectionBeanPostProcessor.class);\n        definition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n        definition.getPropertyValues().addPropertyValue(\"order\", new Integer(Ordered.LOWEST_PRECEDENCE));\n        applicationContext.registerBeanDefinition(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME, definition);\n    }\n\n    public void start(ServletContext context) {\n        register(context);\n        registerApplicationScopedComponents();\n        registerRequestScopedComponents();\n\n        new ComponentScanner(applicationContext).scan(basePackages);\n        applicationContext.refresh();\n        applicationContext.start();\n    }\n\n    public void stop() {\n        applicationContext.stop();\n        applicationContext.destroy();\n    }\n\n    private void registerApplicationScopedComponents() {\n        register(DefaultResourceRegistry.class);\n        register(StupidTranslator.class);\n        register(DefaultRequestExecution.class);\n        register(DefaultInterceptorRegistry.class);\n        register(InstantiateInterceptor.class);\n        register(AsmBasedTypeCreator.class);\n        register(DefaultMethodLookupBuilder.class);\n    }\n\n    private void registerRequestScopedComponents() {\n        register(InterceptorListPriorToExecutionExtractor.class);\n        register(DefaultInterceptorStack.class);\n        register(DefaultRequestExecution.class);\n        register(ResourceLookupInterceptor.class);\n        register(InstantiateInterceptor.class);\n        register(DefaultResult.class);\n        register(ExecuteMethodInterceptor.class);\n        register(PageResult.class);\n        register(OgnlParametersProvider.class);\n        register(DefaultConverters.class);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public <T> T instanceFor(Class<T> type) {\n        T instance = (T) BeanFactoryUtils.beanOfType(applicationContext, type);\n        if (RequestExecution.class.isAssignableFrom(type)) {\n            return (T) new RequestExecutionWrapper((RequestExecution) instance, instanceFor(ServletContext.class));\n        }\n        return instance;\n    }\n\n    public void register(Object instance) {\n        applicationContext.getBeanFactory().registerSingleton(instance.getClass().getName(), instance);\n    }\n\n    public void register(Class<?> type) {\n        AnnotatedGenericBeanDefinition definition = new AnnotatedGenericBeanDefinition(type);\n        String name = beanNameGenerator.generateBeanName(definition, applicationContext);\n        BeanDefinitionHolder definitionHolder = new BeanDefinitionHolder(definition, name);\n\n        VRaptorScopeResolver scopeResolver = new VRaptorScopeResolver();\n        ScopeMetadata scopeMetadata = scopeResolver.resolveScopeMetadata(definition);\n        definitionHolder = applyScope(definitionHolder, scopeMetadata);\n\n        BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, applicationContext);\n    }\n\n    /**\n     * From org.springframework.context.annotation.ClassPathBeanDefinitionScanner#applyScope()\n     *\n     * @param definition\n     * @param scopeMetadata\n     * @return\n     */\n    private BeanDefinitionHolder applyScope(BeanDefinitionHolder definition, ScopeMetadata scopeMetadata) {\n        String scope = scopeMetadata.getScopeName();\n        ScopedProxyMode proxyMode = scopeMetadata.getScopedProxyMode();\n        definition.getBeanDefinition().setScope(scope);\n        if (BeanDefinition.SCOPE_SINGLETON.equals(scope) || BeanDefinition.SCOPE_PROTOTYPE.equals(scope) ||\n                proxyMode.equals(ScopedProxyMode.NO)) {\n            return definition;\n        } else {\n            boolean proxyTargetClass = proxyMode.equals(ScopedProxyMode.TARGET_CLASS);\n            return ScopedProxyUtils.createScopedProxy(definition, applicationContext, proxyTargetClass);\n        }\n    }\n}\n","lineNo":148}
{"Smelly Sample":"package br.com.caelum.vraptor.http;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport ognl.Ognl;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport ognl.OgnlRuntime;\nimport br.com.caelum.vraptor.converter.OgnlToConvertersController;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.http.ognl.ListAccessor;\nimport br.com.caelum.vraptor.http.ognl.ReflectionBasedNullHandler;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class OgnlParametersProvider implements ParametersProvider {\n\n    private final HttpServletRequest request;\n\n    private final TypeCreator creator;\n\n    private final Container container;\n\n    private final Converters converters; \n\n    public OgnlParametersProvider(HttpServletRequest request, TypeCreator creator, Container container, Converters converters) {\n        this.creator = creator;\n        this.request = request;\n        this.container = container;\n        this.converters = converters;\n        OgnlRuntime.setNullHandler(Object.class, new ReflectionBasedNullHandler());\n        OgnlRuntime.setPropertyAccessor(List.class, new ListAccessor());\n    }\n\n    public Object[] getParametersFor(ResourceMethod method) {\n        try {\n            Class<?> type = creator.typeFor(method);\n            Object root = type.getDeclaredConstructor().newInstance();\n            OgnlContext context = (OgnlContext) Ognl.createDefaultContext(root);\n            context.setTraceEvaluations(true);\n            context.put(Container.class,this.container);\n            \n            Ognl.setTypeConverter(context, new OgnlToConvertersController(converters));\n            for(String key : (Set<String>)request.getParameterMap().keySet()) {\n                String[] values = request.getParameterValues(key);\n                Ognl.setValue(key, context,root, values.length==1 ? values[0] : values);\n            }\n            Type[] types = method.getMethod().getGenericParameterTypes();\n            Object[] result = new Object[types.length];\n            for (int i = 0; i < types.length; i++) {\n                Type paramType = types[i];\n                result[i] = root.getClass().getMethod(\"get\" + creator.nameFor(paramType)).invoke(root);\n            }\n            return result;\n        } catch (InstantiationException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (IllegalAccessException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (IllegalArgumentException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (SecurityException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (InvocationTargetException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (NoSuchMethodException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (OgnlException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        }\n    }\n}\n","Method after Refactoring":"/***\n *\n * Copyright (c) 2009 Caelum - www.caelum.com.br/opensource\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n * 3. Neither the name of the copyright holders nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n * THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage br.com.caelum.vraptor.http;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.Set;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport ognl.Ognl;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport ognl.OgnlRuntime;\nimport br.com.caelum.vraptor.converter.OgnlToConvertersController;\nimport br.com.caelum.vraptor.core.Converters;\nimport br.com.caelum.vraptor.http.ognl.ListAccessor;\nimport br.com.caelum.vraptor.http.ognl.ReflectionBasedNullHandler;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class OgnlParametersProvider implements ParametersProvider {\n\n    private final HttpServletRequest request;\n\n    private final TypeCreator creator;\n\n    private final Container container;\n\n    private final Converters converters; \n\n    public OgnlParametersProvider(HttpServletRequest request, TypeCreator creator, Container container, Converters converters) {\n        this.creator = creator;\n        this.request = request;\n        this.container = container;\n        this.converters = converters;\n        OgnlRuntime.setNullHandler(Object.class, new ReflectionBasedNullHandler());\n        OgnlRuntime.setPropertyAccessor(List.class, new ListAccessor());\n    }\n\n    public Object[] getParametersFor(ResourceMethod method) {\n        try {\n            Class<?> type = creator.typeFor(method);\n            Object root = type.getDeclaredConstructor().newInstance();\n            OgnlContext context = (OgnlContext) Ognl.createDefaultContext(root);\n            context.setTraceEvaluations(true);\n            context.put(Container.class,this.container);\n            \n            OgnlToConvertersController controller = new OgnlToConvertersController(converters);\n            Ognl.setTypeConverter(context, controller);\n            for(String key : (Set<String>)request.getParameterMap().keySet()) {\n                String[] values = request.getParameterValues(key);\n                Ognl.setValue(key, context,root, values.length==1 ? values[0] : values);\n            }\n            Type[] types = method.getMethod().getGenericParameterTypes();\n            Object[] result = new Object[types.length];\n            for (int i = 0; i < types.length; i++) {\n                Type paramType = types[i];\n                result[i] = root.getClass().getMethod(\"get\" + creator.nameFor(paramType)).invoke(root);\n            }\n            return result;\n        } catch (InstantiationException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (IllegalAccessException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (IllegalArgumentException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (SecurityException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (InvocationTargetException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (NoSuchMethodException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        } catch (OgnlException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\",e);\n        }\n    }\n}\n","lineNo":77}
{"Smelly Sample":"package br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Map;\n\nimport ognl.NullHandler;\n\npublic class ReflectionBasedNullHandler implements NullHandler {\n\n    public Object nullMethodResult(Map context, Object target, String methodName, Object[] args) {\n        return null;\n    }\n\n    public Object nullPropertyValue(Map context, Object target, Object property) {\n        Method method = findMethod(target.getClass(), \"get\" + translate((String) property), target.getClass());\n        Type returnType = method.getGenericReturnType();\n        if (returnType instanceof ParameterizedType) {\n            ParameterizedType paramType = (ParameterizedType) returnType;\n            returnType = paramType.getRawType();\n        }\n        try {\n            Class<?> baseType = (Class<?>) returnType;\n            if(baseType.isArray()) {\n                // TODO better\n                throw new IllegalArgumentException(\"Vraptor does not support array types: use lists instead!\");\n            }\n            Object instance = baseType.newInstance();\n            Method setter= findMethod(target.getClass(), \"set\" + translate((String) property), target.getClass(), method.getReturnType());\n            setter.invoke(target, instance);\n            return instance;\n        } catch (InstantiationException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (IllegalAccessException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (IllegalArgumentException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (InvocationTargetException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        }\n    }\n\n    private String translate(String property) {\n        return property.length() == 1 ? property.toUpperCase() : Character.toUpperCase(property.charAt(0))\n                + property.substring(1);\n    }\n\n    private Method findMethod(Class<? extends Object> type, String name, Class<? extends Object> baseType, Class<?> ...params) {\n        try {\n            return type.getDeclaredMethod(name, params);\n        } catch (SecurityException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (NoSuchMethodException e) {\n            if (type.equals(Object.class)) {\n                // TODO better\n                throw new IllegalArgumentException(\"Unable to find getter for \" + name + \" @ \" + baseType.getName());\n            }\n            return findMethod(type.getSuperclass(), name, type, params);\n        }\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.http.ognl;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport ognl.ObjectNullHandler;\nimport ognl.OgnlContext;\n\npublic class ReflectionBasedNullHandler extends ObjectNullHandler {\n\n    private static final Map<Class<?>, Class<?>> CONCRETE_TYPES = new HashMap<Class<?>, Class<?>>();\n\n    static {\n        CONCRETE_TYPES.put(List.class, ArrayList.class);\n    }\n\n    public Object nullPropertyValue(Map context, Object target, Object property) {\n\n        OgnlContext ctx = (OgnlContext) context;\n        int indexInParent = ctx.getCurrentEvaluation().getNode().getIndexInParent();\n        int maxIndex = ctx.getRootEvaluation().getNode().jjtGetNumChildren() - 1;\n\n        if (!(indexInParent != -1 && indexInParent < maxIndex)) {\n            return null;\n        }\n\n        Method method = findMethod(target.getClass(), \"get\" + translate((String) property), target.getClass());\n        Type returnType = method.getGenericReturnType();\n        if (returnType instanceof ParameterizedType) {\n            ParameterizedType paramType = (ParameterizedType) returnType;\n            returnType = paramType.getRawType();\n        }\n        try {\n            Class<?> baseType = (Class<?>) returnType;\n            if (baseType.isArray()) {\n                // TODO better\n                throw new IllegalArgumentException(\"Vraptor does not support array types: use lists instead!\");\n            }\n            Class<?> typeToInstantiate = baseType;\n            if (baseType.isInterface()) {\n                if (!CONCRETE_TYPES.containsKey(baseType)) {\n                    // TODO better\n                    throw new IllegalArgumentException(\"Vraptor does not support this interface: \"\n                            + typeToInstantiate.getName());\n                }\n                typeToInstantiate = CONCRETE_TYPES.get(baseType);\n            }\n            Object instance = typeToInstantiate.newInstance();\n            Method setter = findMethod(target.getClass(), \"set\" + translate((String) property), target.getClass(),\n                    method.getReturnType());\n            setter.invoke(target, instance);\n            return instance;\n        } catch (InstantiationException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (IllegalAccessException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (IllegalArgumentException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (InvocationTargetException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        }\n    }\n\n    private String translate(String property) {\n        return property.length() == 1 ? property.toUpperCase() : Character.toUpperCase(property.charAt(0))\n                + property.substring(1);\n    }\n\n    private Method findMethod(Class<? extends Object> type, String name, Class<? extends Object> baseType,\n            Class<?>... params) {\n        try {\n            return type.getDeclaredMethod(name, params);\n        } catch (SecurityException e) {\n            // TODO better\n            throw new IllegalArgumentException(e);\n        } catch (NoSuchMethodException e) {\n            if (type.equals(Object.class)) {\n                // TODO better\n                throw new IllegalArgumentException(\"Unable to find getter for \" + name + \" @ \" + baseType.getName());\n            }\n            return findMethod(type.getSuperclass(), name, type, params);\n        }\n    }\n\n}\n","lineNo":45}
{"Smelly Sample":"package br.com.caelum.vraptor.http;\n\nimport java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javassist.CannotCompileException;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport javassist.CtField;\nimport javassist.CtNewMethod;\nimport javassist.LoaderClassPath;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class JavassistTypeCreator implements TypeCreator {\n\n    /*\n     * we require the class loading counter in order to reload method params\n     * when reloading classes in the same classloader\n     */\n    private static int classLoadCounter = 0;\n\n    public Class<?> typeFor(ResourceMethod method) {\n        Method reflectionMethod = method.getMethod();\n        ClassPool pool = new ClassPool();\n        pool.appendClassPath(new LoaderClassPath(this.getClass().getClassLoader()));\n        CtClass ctType = pool\n                .makeClass(reflectionMethod.getDeclaringClass().getName() + \"$\" + reflectionMethod.getName() + \"$\"\n                        + Math.abs(reflectionMethod.hashCode()) + \"$\" + (++classLoadCounter));\n        String valueLists = \"\";\n        for (Class type : reflectionMethod.getParameterTypes()) {\n            try {\n                String fieldName = extractName(type);\n                CtField field = CtField.make(\"private \" + extractTypeDefinition(type) + \" \" + fieldName + \"_;\", ctType);\n                ctType.addField(field);\n                ctType.addMethod(CtNewMethod.getter(\"get\" + fieldName, field));\n                ctType.addMethod(CtNewMethod.setter(\"set\" + fieldName, field));\n                if (!valueLists.equals(\"\")) {\n                    valueLists += \",\";\n                }\n                if (type.isPrimitive()) {\n                    valueLists += wrapperCodeFor(type, fieldName + \"_\");\n                } else {\n                    valueLists += fieldName + \"_\";\n                }\n            } catch (CannotCompileException e) {\n                // TODO validation exception?\n                throw new IllegalArgumentException(\"unable to compile expression\", e);\n            }\n        }\n        try {\n            String content;\n            if (valueLists.length() == 0) {\n                content = \"new Object[0]\";\n            } else {\n                content = \"new Object[]{\" + valueLists + \"}\";\n            }\n            String gimmeCode = \"public Object[] gimmeMyValues() { return \" + content + \";}\";\n            ctType.addMethod(CtNewMethod.make(gimmeCode, ctType));\n        } catch (CannotCompileException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\", e);\n        }\n        try {\n            return ctType.toClass();\n        } catch (CannotCompileException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\", e);\n        }\n    }\n\n    private String extractTypeDefinition(Class type) {\n        if (type.isArray()) {\n            return type.getComponentType().getName() + \"[] \";\n        }\n        return type.getName();\n    }\n\n    private String extractName(Class type) {\n        if (type.isArray()) {\n            return type.getComponentType().getSimpleName();\n        }\n        return type.getSimpleName();\n    }\n\n    private static final Map<Class<?>, String> wrapper = new HashMap<Class<?>, String>();\n    static {\n        wrapper.put(int.class, \"Integer.valueOf(\");\n        wrapper.put(long.class, \"Long.valueOf(\");\n        wrapper.put(double.class, \"Double.valueOf(\");\n        wrapper.put(float.class, \"Float.valueOf(\");\n        wrapper.put(byte.class, \"Byte.valueOf(\");\n        wrapper.put(char.class, \"Character.valueOf(\");\n        wrapper.put(short.class, \"Short.valueOf(\");\n        wrapper.put(boolean.class, \"Boolean.valueOf(\");\n    }\n\n    private String wrapperCodeFor(Class<?> type, String fieldName) {\n        return wrapper.get(type) + fieldName + \")\";\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.http;\n\nimport java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javassist.CannotCompileException;\nimport javassist.ClassPool;\nimport javassist.CtClass;\nimport javassist.CtField;\nimport javassist.CtNewMethod;\nimport javassist.LoaderClassPath;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class JavassistTypeCreator implements TypeCreator {\n\n    private static final Logger logger = LoggerFactory.getLogger(JavassistTypeCreator.class);\n\n    /*\n     * we require the class loading counter in order to reload method params\n     * when reloading classes in the same classloader\n     */\n    private static int classLoadCounter = 0;\n\n    public Class<?> typeFor(ResourceMethod method) {\n        Method reflectionMethod = method.getMethod();\n        ClassPool pool = new ClassPool();\n        pool.appendClassPath(new LoaderClassPath(this.getClass().getClassLoader()));\n        String newTypeName = reflectionMethod.getDeclaringClass().getName() + \"$\" + reflectionMethod.getName() + \"$\"\n                + Math.abs(reflectionMethod.hashCode()) + \"$\" + (++classLoadCounter);\n        logger.debug(\"Trying to make class for \" + newTypeName);\n        CtClass ctType = pool.makeClass(newTypeName);\n        String valueLists = \"\";\n        for (Class type : reflectionMethod.getParameterTypes()) {\n            try {\n                String fieldName = extractName(type);\n                CtField field = CtField.make(\"private \" + extractTypeDefinition(type) + \" \" + fieldName + \"_;\", ctType);\n                ctType.addField(field);\n                ctType.addMethod(CtNewMethod.getter(\"get\" + fieldName, field));\n                ctType.addMethod(CtNewMethod.setter(\"set\" + fieldName, field));\n                if (!valueLists.equals(\"\")) {\n                    valueLists += \",\";\n                }\n                if (type.isPrimitive()) {\n                    valueLists += wrapperCodeFor(type, fieldName + \"_\");\n                } else {\n                    valueLists += fieldName + \"_\";\n                }\n            } catch (CannotCompileException e) {\n                // TODO validation exception?\n                throw new IllegalArgumentException(\"unable to compile expression\", e);\n            }\n        }\n        try {\n            String content;\n            if (valueLists.length() == 0) {\n                content = \"new Object[0]\";\n            } else {\n                content = \"new Object[]{\" + valueLists + \"}\";\n            }\n            String gimmeCode = \"public Object[] gimmeMyValues() { return \" + content + \";}\";\n            ctType.addMethod(CtNewMethod.make(gimmeCode, ctType));\n        } catch (CannotCompileException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\", e);\n        }\n        try {\n            return ctType.toClass();\n        } catch (CannotCompileException e) {\n            // TODO validation exception?\n            throw new IllegalArgumentException(\"unable to compile expression\", e);\n        }\n    }\n\n    private String extractTypeDefinition(Class type) {\n        if (type.isArray()) {\n            return type.getComponentType().getName() + \"[] \";\n        }\n        return type.getName();\n    }\n\n    private String extractName(Class type) {\n        if (type.isArray()) {\n            return type.getComponentType().getSimpleName();\n        }\n        return type.getSimpleName();\n    }\n\n    private static final Map<Class<?>, String> wrapper = new HashMap<Class<?>, String>();\n    static {\n        wrapper.put(int.class, \"Integer.valueOf(\");\n        wrapper.put(long.class, \"Long.valueOf(\");\n        wrapper.put(double.class, \"Double.valueOf(\");\n        wrapper.put(float.class, \"Float.valueOf(\");\n        wrapper.put(byte.class, \"Byte.valueOf(\");\n        wrapper.put(char.class, \"Character.valueOf(\");\n        wrapper.put(short.class, \"Short.valueOf(\");\n        wrapper.put(boolean.class, \"Boolean.valueOf(\");\n    }\n\n    private String wrapperCodeFor(Class<?> type, String fieldName) {\n        return wrapper.get(type) + fieldName + \")\";\n    }\n\n}\n","lineNo":33}
{"Smelly Sample":"package br.com.caelum.vraptor;\n\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.pico.PicoBasedContainer;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n/**\n * VRaptor entry point.\n *\n * @author Guilherme Silveira\n * @author Fabio Kung\n */\npublic class VRaptor implements Filter {\n\n    private Container container;\n    private ServletContext servletContext;\n\n    public void destroy() {\n        container.stop();\n    }\n\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,\n            ServletException {\n\n        if (!(req instanceof HttpServletRequest) || !(res instanceof HttpServletResponse)) {\n            throw new ServletException(\n                    \"VRaptor must be run inside a Servlet environment. Portlets and others aren't supported.\");\n        }\n\n        HttpServletRequest request = (HttpServletRequest) req;\n        HttpServletResponse response = (HttpServletResponse) res;\n\n        container.instanceFor(RequestExecution.class).execute(new VRaptorRequest(servletContext, request, response));\n    }\n\n    public void init(FilterConfig cfg) throws ServletException {\n        servletContext = cfg.getServletContext();\n        this.container = new PicoBasedContainer(servletContext);\n        // container = new SpringBasedContainer(servletContext);\n        container.start();\n    }\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor;\n\nimport br.com.caelum.vraptor.core.RequestExecution;\nimport br.com.caelum.vraptor.core.VRaptorRequest;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.ContainerProvider;\nimport br.com.caelum.vraptor.ioc.pico.PicoBasedContainer;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.ServletContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n/**\n * VRaptor entry point.\n *\n * @author Guilherme Silveira\n * @author Fabio Kung\n */\npublic class VRaptor implements Filter {\n\n    private Container container;\n    private ServletContext servletContext;\n\n    public void destroy() {\n        container.stop();\n        container = null;\n        servletContext = null;\n    }\n\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,\n            ServletException {\n\n        if (!(req instanceof HttpServletRequest) || !(res instanceof HttpServletResponse)) {\n            throw new ServletException(\n                    \"VRaptor must be run inside a Servlet environment. Portlets and others aren't supported.\");\n        }\n\n        HttpServletRequest request = (HttpServletRequest) req;\n        HttpServletResponse response = (HttpServletResponse) res;\n\n        VRaptorRequest vraptorRequest = new VRaptorRequest(servletContext, request, response);\n        //container.getContainerProvider().provide(vraptorRequest).instanceFor(RequestExecution.class).execute();\n    }\n\n    public void init(FilterConfig cfg) throws ServletException {\n        servletContext = cfg.getServletContext();\n        this.container = new PicoBasedContainer(servletContext);\n        // container = new SpringBasedContainer(servletContext);\n        container.start();\n    }\n\n}\n","lineNo":48}
{"Smelly Sample":"package br.com.caelum.vraptor;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.PicoBasedContainer;\nimport br.com.caelum.vraptor.resource.ResourceLocator;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class VRaptor implements Filter {\n\n\tprivate Container container;\n\n\tpublic void destroy() {\n\t\tcontainer.stop();\n\t}\n\n\tpublic void doFilter(ServletRequest request, ServletResponse res,\n\t\t\tFilterChain chain) throws IOException, ServletException {\n\t\tUrlToResourceTranslator translator = container\n\t\t\t\t.withA(UrlToResourceTranslator.class);\n\t\tResourceMethod method = translator\n\t\t\t\t.translate((HttpServletRequest) request);\n\t\tHttpServletResponse response = (HttpServletResponse) res;\n\t\tif (method == null) {\n\t\t\tresponse.setStatus(404);\n\t\t\tresponse.getWriter().println(\"resource not found\");\n\t\t\treturn;\n\t\t}\n\n\t\tresponse.getWriter().println(\"found resource \" + method);\n\t\tcontainer.forRequest(request).execute(method);\n\n\t}\n\n\tpublic void init(FilterConfig cfg) throws ServletException {\n\t\tthis.container = new PicoBasedContainer(cfg.getServletContext());\n\t\tcontainer.withA(ResourceLocator.class).loadAll();\n\t\tcontainer.start();\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.PicoBasedContainer;\nimport br.com.caelum.vraptor.resource.ResourceLocator;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class VRaptor implements Filter {\n\n\tprivate Container container;\n\n\tpublic void destroy() {\n\t\tcontainer.stop();\n\t}\n\n\tpublic void doFilter(ServletRequest req, ServletResponse res,\n\t\t\tFilterChain chain) throws IOException, ServletException {\n\t\t\n\t\tHttpServletRequest request = (HttpServletRequest) req;\n\t\tHttpServletResponse response = (HttpServletResponse) res;\n\n\t\tUrlToResourceTranslator translator = container\n\t\t\t\t.withA(UrlToResourceTranslator.class);\n\t\tResourceMethod method = translator.translate(request);\n\t\tif (method == null) {\n\t\t\tresponse.setStatus(404);\n\t\t\tresponse.getWriter().println(\"resource not found\");\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.prepareFor(request, response).execute(method);\n\n\t}\n\n\tpublic void init(FilterConfig cfg) throws ServletException {\n\t\tthis.container = new PicoBasedContainer(cfg.getServletContext());\n\t\tcontainer.withA(ResourceLocator.class).loadAll();\n\t\tcontainer.start();\n\t}\n\n}\n","lineNo":31}
{"Smelly Sample":"package br.com.caelum.vraptor;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.PicoBasedContainer;\nimport br.com.caelum.vraptor.resource.ResourceLocator;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class VRaptor implements Filter {\n\n\tprivate Container container;\n\n\tpublic void destroy() {\n\t\tcontainer.stop();\n\t}\n\n\tpublic void doFilter(ServletRequest request, ServletResponse res,\n\t\t\tFilterChain chain) throws IOException, ServletException {\n\t\tResourceMethod methodDefinition = container.withA(\n\t\t\t\tUrlToResourceTranslator.class).translate(\n\t\t\t\t(HttpServletRequest) request);\n\t\tHttpServletResponse response = (HttpServletResponse) res;\n\t\tif (methodDefinition == null) {\n\t\t\tresponse.setStatus(404);\n\t\t\tresponse.getWriter().println(\"resource not found\");\n\t\t} else {\n\t\t\tresponse.getWriter().println(\"found resource \" + methodDefinition);\n\t\t}\n\t}\n\n\tpublic void init(FilterConfig cfg) throws ServletException {\n\t\tthis.container = new PicoBasedContainer(cfg.getServletContext());\n\t\tcontainer.withA(ResourceLocator.class).loadAll();\n\t\tcontainer.start();\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor;\n\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport br.com.caelum.vraptor.http.UrlToResourceTranslator;\nimport br.com.caelum.vraptor.ioc.Container;\nimport br.com.caelum.vraptor.ioc.PicoBasedContainer;\nimport br.com.caelum.vraptor.resource.ResourceLocator;\nimport br.com.caelum.vraptor.resource.ResourceMethod;\n\npublic class VRaptor implements Filter {\n\n\tprivate Container container;\n\n\tpublic void destroy() {\n\t\tcontainer.stop();\n\t}\n\n\tpublic void doFilter(ServletRequest request, ServletResponse res,\n\t\t\tFilterChain chain) throws IOException, ServletException {\n\t\tUrlToResourceTranslator translator = container\n\t\t\t\t.withA(UrlToResourceTranslator.class);\n\t\tResourceMethod method = translator\n\t\t\t\t.translate((HttpServletRequest) request);\n\t\tHttpServletResponse response = (HttpServletResponse) res;\n\t\tif (method == null) {\n\t\t\tresponse.setStatus(404);\n\t\t\tresponse.getWriter().println(\"resource not found\");\n\t\t\treturn;\n\t\t}\n\n\t\tresponse.getWriter().println(\"found resource \" + method);\n\t\tcontainer.forRequest(request).execute(method);\n\n\t}\n\n\tpublic void init(FilterConfig cfg) throws ServletException {\n\t\tthis.container = new PicoBasedContainer(cfg.getServletContext());\n\t\tcontainer.withA(ResourceLocator.class).loadAll();\n\t\tcontainer.start();\n\t}\n\n}\n","lineNo":30}
{"Smelly Sample":"package br.com.caelum.vraptor.resource;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.servlet.ServletContext;\n\npublic class WebInfClassesScanner implements ResourceLocator {\n\n\tprivate final File classes;\n\n\tprivate final List<Resource> resources;\n\n\tprivate final DirScanner scanner;\n\n\tpublic WebInfClassesScanner(ServletContext context, DirScanner scanner) {\n\t\tString path = context.getRealPath(\"\");\n\t\tthis.classes = new File(path, \"WEB-INF/classes\");\n\t\tthis.resources = new ArrayList<Resource>();\n\t\tthis.scanner = scanner;\n\t}\n\n\tpublic void loadAll() {\n\t\t// TODO Auto-generated method stub\n\t\tSystem.out.println(\"Starting looking for \" + classes.getAbsolutePath());\n\t\t// TODO this should be in a start/config method... tried with pico but was unable... urgh!\n\t\tthis.resources.addAll(scanner.scan(classes));\n\t\tSystem.out.println(\"Resources found: \" + resources);\n\t}\n\n}\n","Method after Refactoring":"package br.com.caelum.vraptor.resource;\n\nimport java.io.File;\nimport java.util.List;\n\nimport javax.servlet.ServletContext;\n\npublic class WebInfClassesScanner implements ResourceLocator {\n\n\tprivate final File classes;\n\n\tprivate final DirScanner scanner;\n\n\tprivate final ResourceRegistry registry;\n\n\tpublic WebInfClassesScanner(ServletContext context, DirScanner scanner, ResourceRegistry registry) {\n\t\tthis.registry = registry;\n\t\tString path = context.getRealPath(\"\");\n\t\tthis.classes = new File(path, \"WEB-INF/classes\");\n\t\tthis.scanner = scanner;\n\t}\n\n\tpublic void loadAll() {\n\t\t// TODO Auto-generated method stub\n\t\tSystem.out.println(\"Starting looking for \" + classes.getAbsolutePath());\n\t\t// TODO this should be in a start/config method... tried with pico but was unable... urgh!\n\t\tList<Resource> results = scanner.scan(classes);\n\t\tSystem.out.println(\"Resources found: \" + results);\n\t\tthis.registry.register(results);\n\t}\n\n}\n","lineNo":27}
